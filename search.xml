<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSV文件读写</title>
    <url>/2021/02/10/CSV%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
    <content><![CDATA[<h1 id="CSV表格文件的输入输出"><a href="#CSV表格文件的输入输出" class="headerlink" title="CSV表格文件的输入输出"></a>CSV表格文件的输入输出</h1><blockquote>
<ol>
<li><font color="#0000FF">逗号分隔值(Comma-Separated Values，CSV) </font>, 其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列, 不含必须像二进制数字那样被解读的数据. CSV文件由任意数目的记录组成, 记录间以某种换行符分隔; 每条记录由字段组成, 字段间的分隔符是其它字符或字符串, 最常见的是逗号或制表符。建议使用WORDPAD或是记事本来开启，再则先另存新档后用EXCEL开启, 也是方法之一. </li>
<li>CSV文件格式的通用标准并不存在, 但是在RFC 4180中有基础性的描述. 使用的字符编码同样没有被指定. 是一种通用的、相对简单的文件格式, 被用户、商业和科学广泛应用. 最广泛的应用是在程序之间转移表格数据, 而这些程序本身是在不兼容的格式上进行操作的( 往往是私有的和/或无规范的格式). 因为大量程序都支持某种CSV变体, 至少是作为一种可选择的输入/输出格式. </li>
<li>简单讲, 是一种比较原始简单的表格/数据存储方式, 灵活性高, 可做客制化或临时存储 (例如, 加密存储某一列数据)</li>
</ol>
</blockquote>
<h1 id="文件的打开方式"><a href="#文件的打开方式" class="headerlink" title="文件的打开方式"></a>文件的打开方式</h1><table class="reference"> <tbody><tr><th style="width:10%">模式</th><th>描述</th></tr> <tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr> <tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。</td></tr> <tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr> <tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr> <tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr> <tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr> <tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr> <tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr> <tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr> <tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr> <tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr> <tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr> </tbody></table>
即
<font size="3">
<table class="reference">
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">r</th>
<th style="text-align:center">r+</th>
<th style="text-align:center">w</th>
<th style="text-align:center">w+</th>
<th style="text-align:center">a</th>
<th style="text-align:center">a+</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">读</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">写</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">覆盖</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">指针在开头</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">指针在结尾</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
</tbody>
</table>
</font>

<h1 id="CSV文件打开"><a href="#CSV文件打开" class="headerlink" title="CSV文件打开"></a>CSV文件打开</h1><div class="gallery ">
    <p>
    <div class="fancybox">
        <img src= "/img/loading.gif" data-lazy-src="/2021/02/10/CSV%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/使用Excel打开.png" alt="使用Excel打开">
        <span class="image-caption">使用Excel打开</span>
    </div><br>
    <div class="fancybox">
        <img src= "/img/loading.gif" data-lazy-src="/2021/02/10/CSV%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/使用记事本打开.png" alt="使用记事本打开">
        <span class="image-caption">使用记事本打开</span>
    </div>
    </p>
</div>

<h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h3 id="reader"><a href="#reader" class="headerlink" title="reader"></a>reader</h3><p><code>csv.reader(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line">exampleFile &#x3D; open(r&#39;E:\1.Python\csv\example.csv&#39;,&#39;r&#39;)</span><br><span class="line">exampleReader &#x3D; csv.reader(exampleFile)</span><br><span class="line">print(type(exampleReader))</span><br><span class="line">exampleData &#x3D; list(exampleReader)      # 转换成list. </span><br><span class="line">print(exampleData)</span><br><span class="line">exampleFile.close()</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p><code>&lt;class &#39;_csv.reader&#39;&gt;</code><br>[[‘Time’, ‘Food’, ‘quantity’], [‘4/5/2014 13:34’, ‘Apples’, ‘73’], [‘4/5/2014 3:41’, ‘Cherries’, ‘85’], [‘4/6/2014 12:46’, ‘Pears’, ‘14’], [‘4/8/2014 8:59’, ‘Oranges’,<br>‘52’], [‘4/10/2014 2:07’, ‘Apples’, ‘152’], [‘4/10/2014 18:10’, ‘Bananas’, ‘23’], [‘4/10/2014 2:40’, ‘Strawberries’, ‘98’]]<br>reader返回一个<code>reader</code>对象(迭代器)<br>那么,可以用<code>next(exampleReader)</code>来取 也可以用<code>for i in exampleReader</code> 来打印</p>
</blockquote>
<h3 id="DictReader"><a href="#DictReader" class="headerlink" title="DictReader"></a>DictReader</h3><p>与reader同理,只是一字典(Dict)的形式输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line">exampleFile &#x3D; open(r&#39;E:\1.Python\csv\example.csv&#39;,&#39;r&#39;)</span><br><span class="line">exampleReader &#x3D; csv.DictReader(exampleFile)</span><br><span class="line">print(type(exampleReader))</span><br><span class="line">print(next(exampleReader))  #调用next()试试</span><br><span class="line">for row in exampleReader:   #字典类型</span><br><span class="line">    print(row[&#39;Time&#39;])</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p><code>&lt;class &#39;csv.DictReader&#39;&gt;</code><br>{‘Time’: ‘4/5/2014 13:34’, ‘Food’: ‘Apples’, ‘quantity’: ‘73’}<br>4/5/2014 3:41<br>4/6/2014 12:46<br>4/8/2014 8:59<br>4/10/2014 2:07<br>4/10/2014 18:10<br>4/10/2014 2:40</p>
</blockquote>
<h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><h3 id="writer"><a href="#writer" class="headerlink" title="writer"></a>writer</h3><p><code>csv.writer(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exampleData &#x3D; [[&#39;Time&#39;, &#39;Food&#39;, &#39;quantity&#39;], [&#39;4&#x2F;5&#x2F;2014 13:34&#39;, &#39;Apples&#39;, &#39;73&#39;], [&#39;4&#x2F;5&#x2F;2014 3:41&#39;, &#39;Cherries&#39;, &#39;85&#39;], [&#39;4&#x2F;6&#x2F;2014 12:46&#39;, &#39;Pears&#39;, &#39;14&#39;], [&#39;4&#x2F;8&#x2F;2014 8:59&#39;, &#39;Oranges&#39;, </span><br><span class="line">&#39;52&#39;], [&#39;4&#x2F;10&#x2F;2014 2:07&#39;, &#39;Apples&#39;, &#39;152&#39;], [&#39;4&#x2F;10&#x2F;2014 18:10&#39;, &#39;Bananas&#39;, &#39;23&#39;], [&#39;4&#x2F;10&#x2F;2014 2:40&#39;, &#39;Strawberries&#39;, &#39;98&#39;]]</span><br><span class="line">with open(&#39;example_new.csv&#39;, &#39;w+&#39;, newline&#x3D;&#39;&#39;) as f:  # 如果不指定newline&#x3D;&#39;&#39;,有时则每写入一行将有一空行被写入</span><br><span class="line">    writer &#x3D; csv.writer(f)</span><br><span class="line">    for row in exampleData:</span><br><span class="line">        writer.writerow(row)</span><br></pre></td></tr></table></figure>
<p>先用<code>csv.writer</code>返回一个 writer 对象 可以将文件类对象上转换为带分隔符的字符串<br>然后再<code>writerow(row)</code>写入每一行 或者 用<code>writerows(rows)</code>将 迭代器rows 写入</p>
<blockquote>
<p>如果没有指定 newline=’’，则嵌入引号中的换行符将无法正确解析，并且在写入时，使用 \r\n 换行的平台会有多余的 \r 写入。由于 csv 模块会执行自己的（通用）换行符处理，因此指定 newline=’’ 应该总是安全的。</p>
</blockquote>
<h3 id="DictWriter"><a href="#DictWriter" class="headerlink" title="DictWriter"></a>DictWriter</h3><p>对象在操作上类似常规 writer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line">exampleFile &#x3D; open(r&#39;E:\1.Python\csv\example.csv&#39;,&#39;r&#39;)</span><br><span class="line">exampleReader &#x3D; csv.DictReader(exampleFile)</span><br><span class="line">with open(&#39;new.csv&#39;,&#39;w&#39;) as f:</span><br><span class="line">    fieldnames &#x3D; [&#39;Food&#39;,&#39;Time&#39;,&#39;quantity&#39;]</span><br><span class="line">    writer &#x3D; csv.DictWriter(f,fieldnames&#x3D;fieldnames)</span><br><span class="line">    writer.writerows(exampleReader)</span><br></pre></td></tr></table></figure>
<p>可以指定写入的顺序<br><code>[&#39;Food&#39;,&#39;quantity&#39;.&#39;Time&#39;] `` [&#39;Food&#39;,&#39;Time&#39;,&#39;quantity&#39;]</code></p>
<h1 id="fmtparams详见Python文档"><a href="#fmtparams详见Python文档" class="headerlink" title="**fmtparams详见Python文档"></a>**fmtparams详见Python文档</h1><p><a class="btn-beautify button--animated outline" href="https://docs.python.org/zh-cn/3/library/csv.html#csv-fmt-params" target="_blank" rel="noopener" title="地址">地址</a></p><p></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>CSV文件读写</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy (一) 框架</title>
    <url>/2021/02/13/Scrapy%20(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><p>在目标的文件夹下按按住<kbd>Shift</kbd> 和鼠标右键<br>点击<code>在此处打开命令窗口</code><br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject 文件</span><br><span class="line">cd 文件</span><br><span class="line">scrapy genspider 名字 域名</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/13/Scrapy%20(%E4%B8%80)/cmd.png"><br>即出现了<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/13/Scrapy%20(%E4%B8%80)/%E5%88%86%E7%BA%A7.png"></p>
<h1 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a>items.py</h1><p>在<code>items.py</code>下编辑要爬取的内容</p>
<h1 id="settings-py-编辑设置"><a href="#settings-py-编辑设置" class="headerlink" title="settings.py 编辑设置"></a>settings.py 编辑设置</h1><p>在<code>settings.py</code>下编辑</p>
<ol>
<li><p>BOT_NAME：项目名</p>
</li>
<li><p>USER_AGENT：就是 UA  即 浏览器标识(也可以放在<code>DEFAULT_REQUEST_HEADERS</code>里面)</p>
</li>
<li><p>ROBOTSTXT_OBEY：机器人协议，默认是true，需要改为false，否则很多东西爬不了</p>
</li>
<li><p>CONCURRENT_REQUESTS：最大并发数，就是同时允许开启多少个爬虫线程</p>
</li>
<li><p>DOWNLOAD_DELAY：下载延迟时间，单位是秒，控制爬虫爬取的频率，默认是3秒</p>
</li>
<li><p>COOKIES_ENABLED：是否保存COOKIES，默认关闭，开机可以记录爬取过程中的COOKIE</p>
</li>
<li><p>DEFAULT_REQUEST_HEADERS：默认请求头</p>
</li>
<li><p>ITEM_PIPELINES：项目管道，300为优先级，越低越爬取的优先度越高</p>
</li>
</ol>
<h1 id="名字-py-爬虫主文件"><a href="#名字-py-爬虫主文件" class="headerlink" title="名字.py 爬虫主文件"></a>名字.py 爬虫主文件</h1><p>在spiders下的<code>名字.py</code></p>
<p>name: 名字<br>allowed_domains: 域名<br>start_urls: 网址</p>
<h1 id="开始爬虫"><a href="#开始爬虫" class="headerlink" title="开始爬虫"></a>开始爬虫</h1><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><h3 id="保存在文件"><a href="#保存在文件" class="headerlink" title="保存在文件"></a>保存在文件</h3><ol>
<li>scrapy crawl 名字 -o xx.csv</li>
<li>scrapy crawl 名字 -o xx.json</li>
</ol>
<h3 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h3><ol start="3">
<li>scrapy crawl 名字</li>
</ol>
<h2 id="以-py的形式"><a href="#以-py的形式" class="headerlink" title="以.py的形式"></a>以.py的形式</h2><p>在<code>spiders</code>新建<code>run.py</code><br>写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from scrapy import cmdline</span><br><span class="line">cmdline.execute(&#39;上面的三种形式&#39;.split())</span><br></pre></td></tr></table></figure>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from scrapy import cmdline</span><br><span class="line">cmdline.execute(&#39;scrapy crawl 名字&#39;.split())</span><br></pre></td></tr></table></figure>
<p>运行这个就可以了</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="爬取豆瓣电影"><a href="#爬取豆瓣电影" class="headerlink" title="爬取豆瓣电影"></a>爬取豆瓣电影</h2><p><a class="btn-beautify button--animated outline" href="https://movie.douban.com/explore#!type=movie&tag=%E7%83%AD%E9%97%A8&sort=recommend&page_limit=20&page_start=0" target="_blank" rel="noopener" title="爬取的地址">爬取的地址</a></p><p> </p>
<h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject movies</span><br><span class="line">cd movies</span><br><span class="line">scrapy genspider mv movie.douban.com</span><br><span class="line">![](cmd.png)</span><br></pre></td></tr></table></figure>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在<code>setting.py</code>修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROBOTSTXT_OBEY &#x3D; False</span><br><span class="line"># 取消机器人协议</span><br><span class="line">DOWNLOAD_DELAY &#x3D; 1</span><br><span class="line"># 请求间隔为1秒</span><br><span class="line">DEFAULT_REQUEST_HEADERS &#x3D; &#123;</span><br><span class="line">   &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">   &#39;Accept-Language&#39;: &#39;en&#39;,</span><br><span class="line">   &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.150 Safari&#x2F;537.36 Edg&#x2F;88.0.705.63&#39;</span><br><span class="line">&#125;</span><br><span class="line"># 设置请求头</span><br></pre></td></tr></table></figure>
<h3 id="设置items"><a href="#设置items" class="headerlink" title="设置items"></a>设置items</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">class MoviesItem(scrapy.Item):</span><br><span class="line">    name &#x3D; scrapy.Field()</span><br><span class="line">    score &#x3D; scrapy.Field()</span><br><span class="line">    url &#x3D; scrapy.Field()</span><br><span class="line">    cover &#x3D; scrapy.Field()</span><br></pre></td></tr></table></figure>
<p>配置爬取的内容<br>爬取<code>name</code>  <code>score</code> <code>url</code>  <code>cover</code></p>
<h3 id="编辑主程序"><a href="#编辑主程序" class="headerlink" title="编辑主程序"></a>编辑主程序</h3><h4 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h4><p>在<code>spiders</code> 下的<code>名字.py</code> 编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">from ..items import MoviesItem</span><br><span class="line"># 从父级的 items 引入 MoviesItem 类</span><br><span class="line"></span><br><span class="line">class MvSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;mv&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;movie.douban.com&#39;]</span><br><span class="line">    start_urls &#x3D; [&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;j&#x2F;search_subjects?type&#x3D;movie&amp;tag&#x3D;%E7%83%AD%E9%97%A8&amp;sort&#x3D;recommend&amp;page_limit&#x3D;20&amp;page_start&#x3D;0&#39;]</span><br><span class="line">    start &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        true &#x3D; 0</span><br><span class="line">        false &#x3D; 0</span><br><span class="line">        # 由于爬取的时候会返回 true和false 而这两个词未定义会报错 我就给他们赋值了(因情况而异,大部分不需要)</span><br><span class="line">        items &#x3D; MoviesItem() # 引入类</span><br><span class="line">        movies &#x3D; eval(response.text)[&#39;subjects&#39;] # 获取响应</span><br><span class="line">        for movie in movies: # 记录(类似列表)</span><br><span class="line">            items[&#39;name&#39;] &#x3D; movie[&#39;title&#39;]</span><br><span class="line">            items[&#39;score&#39;] &#x3D; movie[&#39;rate&#39;]</span><br><span class="line">            items[&#39;url&#39;] &#x3D; movie[&#39;url&#39;]</span><br><span class="line">            items[&#39;cover&#39;] &#x3D; movie[&#39;cover&#39;]</span><br><span class="line">            yield items        </span><br><span class="line">        if self.start &lt;200: # 多次爬取</span><br><span class="line">            self.start +&#x3D; 20</span><br><span class="line">            url &#x3D; f&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;j&#x2F;search_subjects?type&#x3D;movie&amp;tag&#x3D;%E7%83%AD%E9%97%A8&amp;sort&#x3D;recommend&amp;page_limit&#x3D;20&amp;page_start&#x3D;&#123;str(self.start)&#125;&#39;</span><br><span class="line">            yield scrapy.Request(url&#x3D;url)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/13/Scrapy%20(%E4%B8%80)/%E7%94%B5%E5%BD%B1%E5%93%8D%E5%BA%94.png"><br>这是以字符串的的形式,先用eval()去掉  ‘ ‘ ,变成字典类型<br>再获取其中的<code>&#39;subject&#39;</code>的值,保存为列表的形式<br>对于每个<code>&#39;subject&#39;</code>,再获取我们要的值<br>用<code>yield</code>挂起</p>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">from ..items import MoviesItem</span><br><span class="line"></span><br><span class="line">class MvSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;mv&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;movie.douban.com&#39;]</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;j&#x2F;search_subjects?type&#x3D;movie&amp;tag&#x3D;%E7%83%AD%E9%97%A8&amp;sort&#x3D;recommend&amp;page_limit&#x3D;20&amp;page_start&#x3D;&#123;&#125;&#39;</span><br><span class="line">    start &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def start_requests(self):</span><br><span class="line">        for i in range(0,2001,20):</span><br><span class="line">            url &#x3D; self.url.format(i)</span><br><span class="line">            yield scrapy.Request(</span><br><span class="line">            url&#x3D;url,</span><br><span class="line">            callback&#x3D;self.parse</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        true &#x3D; 0</span><br><span class="line">        false &#x3D; 0</span><br><span class="line">        items &#x3D; MoviesItem()</span><br><span class="line">        movies &#x3D; eval(response.text)[&#39;subjects&#39;]</span><br><span class="line">        for movie in movies:</span><br><span class="line">            items[&#39;name&#39;] &#x3D; movie[&#39;title&#39;]</span><br><span class="line">            items[&#39;score&#39;] &#x3D; movie[&#39;rate&#39;]</span><br><span class="line">            items[&#39;url&#39;] &#x3D; movie[&#39;url&#39;]</span><br><span class="line">            items[&#39;cover&#39;] &#x3D; movie[&#39;cover&#39;]</span><br><span class="line">            yield items </span><br></pre></td></tr></table></figure>
<p>增加个<code>start_requests(self)</code> 函数 实现异步</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在<code>spiders</code>新建<code>run.py</code><br>写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from scrapy import cmdline</span><br><span class="line">cmdline.execute(&#39;scrapy crawl 名字&#39;.split())</span><br></pre></td></tr></table></figure>
<p>运行这个就可以了<br>或者在cmd下运行<br><code>scrapy crawl 名字</code><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/13/Scrapy%20(%E4%B8%80)/%E7%94%B5%E5%BD%B1%E6%88%90%E5%8A%9F.png"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 入门</title>
    <url>/2021/02/06/HTML%20%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>vscode 中 输入!可以开始套模板</p>
<h1 id="标题写法"><a href="#标题写法" class="headerlink" title="标题写法"></a>标题写法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;一级标题&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;二级标题&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;三级标题&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4&gt;四级标题&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5&gt;五级标题&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;h6&gt;六级标题&lt;&#x2F;h6&gt;</span><br></pre></td></tr></table></figure>
<h1>一级标题</h1>
<h2>二级标题</h2>
<h3>三级标题</h3>
<h4>四级标题</h4>
<h5>五级标题</h5>
<h6>六级标题</h6>

<hr>
<h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;这是一个段落&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;在文字中,用&lt;br&#x2F;&gt;可以换行&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<p>这是一个段落</p>
<p>在文字中,用<br>可以换行</p>

<ul>
<li>区别: <blockquote>
<ol>
<li><code>&lt;p&gt;&lt;/p&gt;</code>和<code>&lt;p&gt;&lt;/p&gt;</code>之间会有一个空行</li>
<li><code>&lt;br/&gt;</code>只有一个,不是一对</li>
</ol>
</blockquote>
</li>
</ul>
<hr>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;strong&gt;加粗&lt;&#x2F;strong&gt;或&lt;b&gt;加粗&lt;&#x2F;b&gt;</span><br><span class="line">&lt;em&gt;倾斜&lt;&#x2F;em&gt;或&lt;i&gt;倾斜&lt;&#x2F;i&gt;</span><br><span class="line">&lt;del&gt;删除线&lt;&#x2F;del&gt;或&lt;s&gt;删除线&lt;&#x2F;s&gt;</span><br><span class="line">&lt;ins&gt;下划线&lt;&#x2F;ins&gt;或&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br><span class="line">&lt;big&gt;大&lt;&#x2F;big&gt; &lt;big&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;大&lt;&#x2F;big&gt;&lt;&#x2F;big&gt;&lt;&#x2F;big&gt;&lt;&#x2F;big&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>加粗</strong>或<b>加粗</b><br><em>倾斜</em>或<i>倾斜</i><br><del>删除线</del>或<s>删除线</s><br><ins>下划线</ins>或<u>下划线</u><br><big>大</big> <big><big><big><big>大</big></big></big></big></p>
<hr>
<h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><table>
<thead>
<tr>
<th align="center">特殊符号</th>
<th align="center">描述</th>
<th align="left">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">空格</td>
<td align="left"><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于号</td>
<td align="left"><code>&amp;lt;</code></td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于号</td>
<td align="left"><code>&amp;gt;</code></td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">和号</td>
<td align="left"><code>&amp;amp;</code></td>
</tr>
<tr>
<td align="center">￥</td>
<td align="center">人民币</td>
<td align="left"><code>yen;</code></td>
</tr>
<tr>
<td align="center">&copy;</td>
<td align="center">版权</td>
<td align="left"><code>&amp;copy;</code></td>
</tr>
<tr>
<td align="center">&reg;</td>
<td align="center">注册商标</td>
<td align="left"><code>&amp;reg;</code></td>
</tr>
<tr>
<td align="center">&deg;</td>
<td align="center">摄氏度</td>
<td align="left"><code>&amp;deg;</code></td>
</tr>
<tr>
<td align="center">&plusmn;</td>
<td align="center">正负号</td>
<td align="left"><code>&amp;plusmn;</code></td>
</tr>
<tr>
<td align="center">&times;</td>
<td align="center">乘号</td>
<td align="left"><code>&amp;times;</code></td>
</tr>
<tr>
<td align="center">&divide;</td>
<td align="center">除号</td>
<td align="left"><code>&amp;divide;</code></td>
</tr>
<tr>
<td align="center">&sup2;</td>
<td align="center">平方</td>
<td align="left"><code>&amp;sup2;</code></td>
</tr>
<tr>
<td align="center">&sup3;</td>
<td align="center">立方</td>
<td align="left"><code>&amp;sup3;</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;一行&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;又一行&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span&gt;一行&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span&gt;还是在这一行&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>
<div>一行</div>
<div>又一行</div>
<span>一行</span>
<span>还是在这一行</span>

<hr>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;天空.jpg&quot; alt&#x3D;&quot;图片加载不了显示的内容&quot; title&#x3D;&quot;标题&quot; width&#x3D;&quot;150&quot; height&#x3D;&quot;150&quot; border&#x3D;&quot;10&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/02/06/HTML%20%E5%85%A5%E9%97%A8/没有图片.jpg" alt="图片加载不了显示的内容" title="标题" width="150" height="150" border="10">

<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">名称</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">src</td>
<td>中可以放url或路径</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">alt</td>
<td>表示 图片加载不了的话显示的内容</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">title</td>
<td>标题</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">width</td>
<td>宽</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">height</td>
<td>高</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">border</td>
<td>边框大小</td>
</tr>
</tbody></table>
<hr>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot; target&#x3D;&quot;_self&quot;&gt;百度&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.baidu.com" target="_self">百度</a></p>
<ol>
<li>href 放入链接</li>
<li>target 打开方式<blockquote>
<ul>
<li>在本身页面 _self</li>
<li>新的页面 _blank</li>
<li>默认为_self</li>
</ul>
</blockquote>
</li>
<li><code>&lt;a&gt;</code>和<code>&lt;/a&gt;</code>之间的为内容</li>
<li>内部链接不用加入http</li>
<li>可用# 代替为空标签</li>
<li>锚点链接<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#目标位置&quot;&gt;转跳&lt;&#x2F;a&gt;</span><br><span class="line">&lt;h1 id&#x3D;&quot;目标位置&quot;&gt;目标&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt; &lt;th&gt;第一列&lt;&#x2F;th&gt; &lt;th&gt;第二列&lt;&#x2F;th&gt; &lt;th&gt;第三列&lt;&#x2F;th&gt; &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;(1,1)&lt;&#x2F;td&gt; &lt;td&gt;(1,2)&lt;&#x2F;td&gt; &lt;td&gt;(1,3)&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;(2,1)&lt;&#x2F;td&gt; &lt;td&gt;(2,2)&lt;&#x2F;td&gt; &lt;td&gt;(2,3)&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;(3,1)&lt;&#x2F;td&gt; &lt;td&gt;(3,2)&lt;&#x2F;td&gt; &lt;td&gt;(3,3)&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>
<table align="center">
    <tr> <th>第一列</th> <th>第二列</th> <th>第三列</th> </tr>
    <tr> <td>(1,1)</td> <td>(1,2)</td> <td>(1,3)</td> </tr>
    <tr> <td>(2,1)</td> <td>(2,2)</td> <td>(2,3)</td> </tr>
    <tr> <td>(3,1)</td> <td>(3,2)</td> <td>(3,3)</td> </tr>

</table>
<div class="note info simple"><p><big><big><big><br>tr : table row<br>td : table data<br>th : table head<br></big></big></big></p>
</div>

<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;2&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
    <li>1</li>
    <li>2</li>
</ul>

<h2 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;2&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>
<ol>
    <li>1</li>
    <li>2</li>
</ol>

<blockquote>
<p><code>&lt;ul&gt;&lt;/ul&gt;</code>之间和<code>&lt;ol&gt;&lt;/ol&gt;</code>之间里面只能放 <code>&lt;li&gt;&lt;/li&gt;</code></p>
</blockquote>
<h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;title&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;data&lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dt&gt;title&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;data&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>
<dl>
    <dt>title</dt>
    <dd>data</dd>
    <dt>title</dt>
    <dd>data</dd>
</dl>

<blockquote>
<p><code>&lt;dl&gt;&lt;/dl&gt;</code>之间只能放<code>&lt;dt&gt;&lt;/dt&gt;</code> <code>&lt;dd&gt;&lt;/dd&gt;</code> </p>
</blockquote>
<hr>
<h1 id="表格-1"><a href="#表格-1" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;url&quot; method&#x3D;&quot;post&#x2F;get&quot; name&#x3D;&quot;表单名&quot;&gt;...........&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>………..</p>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&#39;usn&#39; value&#x3D;&quot;用户名&quot; maxlength&#x3D;&quot;3&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;psd&quot; &gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;dxo&quot;&gt;单选1.&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&#39;dan&#39; id&#x3D;&quot;dxo&quot;&gt; &lt;label for&#x3D;&quot;dx2&quot;&gt;单选2.&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&#39;dan&#39; id&#x3D;&quot;dx2&quot;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">复选1.&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot; name&#x3D;&#39;duo1&#39;&gt;复选2.&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&#39;duo2&#39;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;这是一个按钮&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; value&#x3D;&quot;上传图片&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&gt; &lt;input type&#x3D;&#39;submit&#39;&gt;</span><br></pre></td></tr></table></figure>
<pre><code>    &lt;input type=&quot;text&quot; name=&#39;usn&#39; value=&quot;用户名&quot; maxlength=&quot;3&quot; /&gt;&lt;br/&gt;
    &lt;input type=&quot;password&quot; name=&quot;psd&quot; &gt;&lt;br/&gt;
    &lt;label for=&quot;dxo&quot;&gt;单选1.&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&#39;dan&#39; id=&quot;dxo&quot;&gt; &lt;label for=&quot;dx2&quot;&gt;单选2.&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&#39;dan&#39; id=&quot;dx2&quot;&gt;&lt;br/&gt;
    复选1.&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; name=&#39;duo1&#39;&gt;复选2.&lt;input type=&quot;checkbox&quot; name=&#39;duo2&#39;&gt;&lt;br/&gt;
    &lt;input type=&quot;button&quot; value=&quot;这是一个按钮&quot; /&gt;&lt;br/&gt;
    &lt;input type=&quot;file&quot; value=&quot;上传图片&quot; /&gt;&lt;br/&gt;
    &lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt; &lt;input type=&#39;submit&#39;&gt;
</code></pre>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;option&gt;第一&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;第二&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;第三&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option selected&#x3D;&quot;selected&quot;&gt;第四&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>
<pre><code>&lt;select&gt;
    &lt;option&gt;第一&lt;/option&gt;
    &lt;option&gt;第二&lt;/option&gt;
    &lt;option&gt;第三&lt;/option&gt;
    &lt;option selected=&quot;selected&quot;&gt;第四&lt;/option&gt;
&lt;/select&gt;
</code></pre>
<h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;textarea&gt;123&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure>
<p><textarea>123</textarea></p>
<p>将上面的封装到表格中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;url&quot; method&#x3D;&quot;post&#x2F;get&quot; name&#x3D;&quot;表单名&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&#39;usn&#39; value&#x3D;&quot;用户名&quot; maxlength&#x3D;&quot;3&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;psd&quot; &gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;dxo&quot;&gt;单选1.&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&#39;dan&#39; id&#x3D;&quot;dxo&quot;&gt; &lt;label for&#x3D;&quot;dx2&quot;&gt;单选2.&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&#39;dan&#39; id&#x3D;&quot;dx2&quot;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    复选1.&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot; name&#x3D;&#39;duo1&#39;&gt;复选2.&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&#39;duo2&#39;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;这是一个按钮&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; value&#x3D;&quot;上传图片&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&gt; &lt;input type&#x3D;&#39;submit&#39;&gt;</span><br><span class="line"></span><br><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;option&gt;第一&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;第二&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;第三&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option selected&#x3D;&quot;selected&quot;&gt;第四&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;textarea&gt;123&lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<form action="url" method="post/get" name="表单名">
        <input type="text" name="usn" value="用户名" maxlength="3"><br>
        <input type="password" name="psd"><br>
        <label for="dxo">单选1.</label><input type="radio" name="dan" id="dxo"> <label for="dx2">单选2.</label><input type="radio" name="dan" id="dx2"><br>
        复选1.<input type="checkbox" checked="checked" name="duo1">复选2.<input type="checkbox" name="duo2"><br>
       <select>
            <option>第一</option>
            <option>第二</option>
            <option>第三</option>
            <option selected="selected">第四</option>
        </select><br>
        <textarea>123</textarea><br>
        <input type="button" value="这是一个按钮"><br>
        <input type="file" value="上传图片"><br>
        <input type="reset" value="重置"> 
        <input type="submit">
</form>

<p>&nbsp;</p>
<blockquote>
<div class="tip info"><p>action填url
method填方式
name填表格名
</p></div></blockquote>
<p>

<blockquote>
<p><code>&lt;input type=&quot;xxx&quot;&gt;</code>是框架<br><big><strong>name</strong></big>: 发送数据的名字<br><big><strong>value</strong></big>: 默认值<br><big><strong>checked / selected</strong></big>:默认选中默认选中</p>
</blockquote>
<div class="snote idea yellow"><p>单选的话，要有相同的 name才会被认为是同一个</p></div>
<div class="tip wtgo font5 fas fa-bolt"><p>在checkbox和radio中加入id  在的对应的文字加入&lt;label for='idname'&gt;即可以通过文字来点击按钮</p><p></p></div>
</p>]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 多任务异步</title>
    <url>/2021/02/08/Python%20%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="模拟堵塞环境"><a href="#模拟堵塞环境" class="headerlink" title="模拟堵塞环境"></a>模拟堵塞环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">app &#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;qqq&#39;)</span><br><span class="line">def index_qqq():</span><br><span class="line">    sleep(2)</span><br><span class="line">    return &#39;qqq&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;www&#39;)</span><br><span class="line">def index_www():</span><br><span class="line">    sleep(2)</span><br><span class="line">    return &#39;www&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;eee&#39;)</span><br><span class="line">def index_eee():</span><br><span class="line">    sleep(2)</span><br><span class="line">    return &#39;eee&#39;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    app.run(threaded&#x3D;True)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>堵塞2秒后加载</p>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="普通的爬取"><a href="#普通的爬取" class="headerlink" title="普通的爬取"></a>普通的爬取</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls &#x3D; [&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;qqq&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;www&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;eee&#39;]</span><br><span class="line">start &#x3D; time.time()</span><br><span class="line"></span><br><span class="line">for url in urls:</span><br><span class="line">    page &#x3D; requests.get(url)</span><br><span class="line">    print(page.text)</span><br><span class="line">print(f&#39;总共花费&#123;time.time() - start&#125;s&#39;)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/08/Python%20%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%BC%82%E6%AD%A5/%E6%99%AE%E9%80%9A%E7%88%AC%E5%8F%96.png" alt="普通爬取"><br>总共用时6秒 有点慢</p>
<h2 id="线程池异步"><a href="#线程池异步" class="headerlink" title="线程池异步"></a>线程池异步</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from multiprocessing.dummy import Pool</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">urls &#x3D; [&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;qqq&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;www&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;eee&#39;]</span><br><span class="line">pool &#x3D; Pool(3)</span><br><span class="line">start &#x3D; time.time()</span><br><span class="line">def get_request(url):</span><br><span class="line">    return requests.get(url).text</span><br><span class="line">response &#x3D; pool.map(get_request,urls)</span><br><span class="line">print(response)</span><br><span class="line"># 模拟解析</span><br><span class="line">def get_len(response):</span><br><span class="line">    return len(response)</span><br><span class="line">re_len &#x3D; pool.map(get_len,response)</span><br><span class="line">print(re_len)</span><br><span class="line">print(f&#39;总共花费&#123;time.time() - start&#125;s&#39;)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/08/Python%20%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%BC%82%E6%AD%A5/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png" alt="线程池"><br>快了许多<br><code>pool = Pool(3)</code> 新建3线程<br><code>pool.map()</code> 对每个线程进行处理<br>map的格式 <code>map(函数,对象)</code></p>
<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import aiohttp</span><br><span class="line">from lxml import etree</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">now &#x3D; lambda :time.time()</span><br><span class="line"></span><br><span class="line">def callback(task):</span><br><span class="line">    page_text &#x3D; task.result()</span><br><span class="line">    tree &#x3D; etree.HTML(page_text)</span><br><span class="line">    text &#x3D; tree.xpath(&#39;&#x2F;&#x2F;p&#x2F;text()&#39;)</span><br><span class="line">    print(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def res(url):</span><br><span class="line">    async with aiohttp.ClientSession() as s:</span><br><span class="line">        async with await s.get(url) as resopnse:</span><br><span class="line">            page_text &#x3D; await resopnse.text()</span><br><span class="line">            return page_text</span><br><span class="line">#with 前加 async 在 阻塞前加 await</span><br><span class="line">    return f&#39;&#123;url&#125;请求结束&#39;</span><br><span class="line">start &#x3D; now()</span><br><span class="line"></span><br><span class="line"># 协程对象</span><br><span class="line">urls &#x3D; [&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;qqq&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;www&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;eee&#39;]</span><br><span class="line">tasks &#x3D; []</span><br><span class="line">for url in urls:# 每个url要进行的操作</span><br><span class="line">    # 协程对象</span><br><span class="line">    coroutine &#x3D; res(url)</span><br><span class="line">    # 封装成任务对象</span><br><span class="line">    task &#x3D; asyncio.ensure_future(coroutine)</span><br><span class="line">    # 回调</span><br><span class="line">    task.add_done_callback(callback)</span><br><span class="line">    tasks.append(task)</span><br><span class="line"># 创建一个事件loop</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line"># 添加回调</span><br><span class="line"></span><br><span class="line"># 将任务对象加入到事件循环loop </span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">print(f&quot;Time: &#123;now() - start&#125; s&quot;)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/08/Python%20%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%BC%82%E6%AD%A5/%E5%8D%8F%E7%A8%8B%E5%BC%82%E6%AD%A5.png" alt="协程异步"><br>同样的,也是2s</p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ol>
<li><p><code>now = lambda :time.time()</code> 用匿名函数获取时间</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async def res(url):</span><br><span class="line">    async with aiohttp.ClientSession() as s:</span><br><span class="line">        async with await s.get(url) as resopnse:</span><br><span class="line">            page_text &#x3D; await resopnse.text()</span><br><span class="line">            return page_text</span><br></pre></td></tr></table></figure>
<blockquote>
<p>定义特殊函数<br>引入 aiohttp (操作与requests类似)<br>将得到的response解析</p>
<div class="tip warning"><p>在每个with前面加async <br>
在每个堵塞操作前加 await </p><p></p></div>
</blockquote>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for url in urls:# 每个url要进行的操作</span><br><span class="line">    # 协程对象</span><br><span class="line">    coroutine &#x3D; res(url)</span><br><span class="line">    # 封装成任务对象</span><br><span class="line">    task &#x3D; asyncio.ensure_future(coroutine)</span><br><span class="line">    # 回调</span><br><span class="line">    task.add_done_callback(callback)</span><br><span class="line">    tasks.append(task)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对每个url -&gt; 协程包装 -&gt; 封装成任务对象<br>绑定回调<br>添加到一个列表</p>
</blockquote>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建一个事件loop</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line"># 将任务对象加入到事件循环loop </span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注册循环 开始</p>
<div class="tip warning"><p>asyncio.wait(tasks)一定不要忘记 </p><p></p></div></blockquote>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def callback(task):</span><br><span class="line">    page_text &#x3D; task.result()</span><br><span class="line">    tree &#x3D; etree.HTML(page_text)</span><br><span class="line">    text &#x3D; tree.xpath(&#39;&#x2F;&#x2F;p&#x2F;text()&#39;)</span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>回调的操作</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
        <category>多任务异步</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy (二) middlewares</title>
    <url>/2021/02/14/Scrapy%20(%E4%BA%8C)/</url>
    <content><![CDATA[<h1 id="修改-UA"><a href="#修改-UA" class="headerlink" title="修改 UA"></a>修改 UA</h1><p>在middlewares.py下添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UAMiddleware(object):</span><br><span class="line">    def process_request(self, request, spider):</span><br><span class="line">        ua &#x3D; random.choice(settings[&#39;USER_AGENT_LIST&#39;])</span><br><span class="line">        request.headers[&#39;User-Agent&#39;] &#x3D; ua</span><br></pre></td></tr></table></figure>
<p>定义一个UA类 获取settings里面的UA列表 把ua放入请求头里面</p>
<p>由于引入<code>random</code>和<code>settings</code>所以要<code>import</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">from scrapy.utils.project import get_project_settings</span><br><span class="line">settings &#x3D; get_project_settings()</span><br></pre></td></tr></table></figure>
<h1 id="改-settings"><a href="#改-settings" class="headerlink" title="改 settings"></a>改 settings</h1><p>在settings修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES &#x3D; &#123;</span><br><span class="line">  &#39;UA.middlewares.UAMiddleware&#39;: 543,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 UA 的目录下的 middlewares.py 的 UAMiddleware  优先级别设置为 543</p>
<p>同时,放入 UA 供选择</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USER_AGENT_LIST &#x3D; [</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;45.0.2454.101 Safari&#x2F;537.36&quot;,</span><br><span class="line">&quot;JUC (Linux; U; 2.3.7; zh-cn; MB200; 320*480) UCWEB7.9.3.103&#x2F;139&#x2F;999&quot;,</span><br><span class="line">&#39;MQQBrowser&#x2F;26 Mozilla&#x2F;5.0 (Linux; U;*roid 2.3.7; zh-cn; MB200 Build&#x2F;GRJ22; CyanogenMod-7) AppleWebKit&#x2F;533.1 (KHTML, like Gecko) Version&#x2F;4.0 Mobile Safari&#x2F;533.1&#39;,</span><br><span class="line">&#39;Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1) Gecko&#x2F;20070803 Firefox&#x2F;1.5.0.12&#39;,</span><br><span class="line">&#39;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&#39;,</span><br><span class="line">&#39;Mozilla&#x2F;5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit&#x2F;533.17.9 (KHTML, like Gecko) Version&#x2F;5.0.2 Mobile&#x2F;8J2 Safari&#x2F;6533.18.5&#39;,</span><br><span class="line">&quot;Dalvik&#x2F;1.6.0 (Linux; U; Android 4.2.1; 2013022 MIUI&#x2F;JHACNBL30.0)&quot;,</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Linux; U; Android 4.4.2; zh-cn; HUAWEI MT7-TL00 Build&#x2F;HuaweiMT7-TL00) AppleWebKit&#x2F;533.1 (KHTML, like Gecko) Version&#x2F;4.0 Mobile Safari&#x2F;533.1&quot;,</span><br><span class="line">&quot;AndroidDownloadManager&quot;,</span><br><span class="line">&quot;Apache-HttpClient&#x2F;UNAVAILABLE (java 1.4)&quot;,</span><br><span class="line">&quot;Dalvik&#x2F;1.6.0 (Linux; U; Android 4.3; SM-N7508V Build&#x2F;JLS36C)&quot;,</span><br><span class="line">&quot;Android50-AndroidPhone-8000-76-0-Statistics-wifi&quot;,</span><br><span class="line">&quot;Dalvik&#x2F;1.6.0 (Linux; U; Android 4.4.4; MI 3 MIUI&#x2F;V7.2.1.0.KXCCNDA)&quot;,</span><br><span class="line">&quot;Dalvik&#x2F;1.6.0 (Linux; U; Android 4.4.2; Lenovo A3800-d Build&#x2F;LenovoA3800-d)&quot;,</span><br><span class="line">&quot;Lite 1.0 ( http:&#x2F;&#x2F;litesuits.com )&quot;,</span><br><span class="line">&quot;Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727)&quot;,</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Windows NT 6.1) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;38.0.2125.122 Safari&#x2F;537.36 SE 2.X MetaSr 1.0&quot;,</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Linux; U; Android 4.1.1; zh-cn; HTC T528t Build&#x2F;JRO03H) AppleWebKit&#x2F;534.30 (KHTML, like Gecko) Version&#x2F;4.0 Mobile Safari&#x2F;534.30; 360browser(securitypay,securityinstalled); 360(android,uppayplugin); 360 Aphone Browser (2.0.4)&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="获取UA"><a href="#获取UA" class="headerlink" title="获取UA"></a>获取UA</h1><p><a class="btn-beautify button--animated outline" href="http://exercise.kingname.info/exercise_middleware_ua/1" target="_blank" rel="noopener" title="http://exercise.kingname.info/exercise_middleware_ua/1">http://exercise.kingname.info/exercise_middleware_ua/1</a><br>修改最后面的 /1 就可以修改页面</p>
<p>主程序下写</p>
<h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">class UaSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;ua&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;exercise.kingname.info&#39;]</span><br><span class="line">    start_urls &#x3D; [&#39;http:&#x2F;&#x2F;exercise.kingname.info&#x2F;exercise_middleware_ua&#x2F;1&#39;]</span><br><span class="line">    st &#x3D; 1</span><br><span class="line">    def parse(self, response):</span><br><span class="line">        re &#x3D; response.text</span><br><span class="line">        print(re)</span><br><span class="line">        yield re</span><br><span class="line">        if self.st &lt; 50:</span><br><span class="line">            self.st +&#x3D; 1</span><br><span class="line">            url &#x3D; f&#39;http:&#x2F;&#x2F;exercise.kingname.info&#x2F;exercise_middleware_ua&#x2F;&#123;str(self.st)&#125;&#39;</span><br><span class="line">            yield scrapy.Request(url &#x3D; url)</span><br></pre></td></tr></table></figure>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">class UaSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;ua&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;exercise.kingname.info&#39;]</span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;exercise.kingname.info&#x2F;exercise_middleware_ua&#x2F;&#123;&#125;&#39;</span><br><span class="line">    st &#x3D; 1</span><br><span class="line">    def start_requests(self):</span><br><span class="line">        for i in range(1,50):</span><br><span class="line">            url &#x3D; self.url.format(i)</span><br><span class="line">            yield scrapy.Request(url &#x3D; url)</span><br><span class="line">    def parse(self, response):</span><br><span class="line">        re &#x3D; response.text</span><br><span class="line">        print(re)</span><br><span class="line">        yield re</span><br></pre></td></tr></table></figure>
<p>最后执行即可</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo --博客搭建</title>
    <url>/2021/02/05/heox%20--%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="snote info"><p><span class="inline-tag blue">搭建环境</span> win10 32位(虚拟机)</p></div>
<div class="snote info"><p><span class="inline-tag blue">博客搭建</span> hexo + Github</p></div>
<div class="tip success"><p>如果下载慢,可在<a class="btn-beautify button--animated outline" href="https://d.serctl.com/" target="_blank" rel="noopener" title="下载">下载</a></p><p></p></div>
<div class="snote idea yellow"><p>CMD下<kbd>Ctrl</kbd> + <kbd>C</kbd>不是复制</p></div>
<div class="snote idea yellow"><p><a class="btn-beautify button--animated outline" href="https://blog.ifycyu.ltd" target="_blank" rel="noopener" title="这是链接">方框是链接,可以点击</a></p></div>

<hr>
<h1 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h1><ol>
<li>注册,登录<a class="btn-beautify button--animated outline" href="https://github.com/" target="_blank" rel="noopener" title="Github">Github</a><emp>记住自己的 username</emp></li>
<li>右上角+号 -&gt; 点击 <a class="btn-beautify button--animated outline" href="https://github.com/new" target="_blank" rel="noopener" title="New repository">New repository</a></li>
<li>Repository name 填写<emp>第一步</emp>的 username.github.io<div class="snote idea yellow"><p>例如 我的username为123,就填写123.github.io</p></div>

</li>
</ol>
<hr>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><ol>
<li>安装 <a class="btn-beautify button--animated outline" href="http://nodejs.cn/download/" target="_blank" rel="noopener" title="Node.js">Node.js</a></li>
<li>安装 <a class="btn-beautify button--animated outline" href="https://git-scm.com/downloads" target="_blank" rel="noopener" title="Git">Git</a><blockquote>
<p>打开 <code>Git Bash</code> 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;注册的username&quot;</span><br><span class="line">git config --global user.emaim &quot;注册的邮箱&quot;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>安装 Hexo<blockquote>
<p>打开 cmd 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<div class="tip warning"><p>如果下载过慢可以先输入下面</p><p></p></div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<hr>
<h1 id="建立Hexo"><a href="#建立Hexo" class="headerlink" title="建立Hexo"></a>建立Hexo</h1><ol>
<li>新建一个文件夹,用于存放博客</li>
<li>打开文件夹<blockquote>
<ul>
<li>按住<kbd>Shift</kbd> 和鼠标右键 </li>
<li>点击<code>在此处打开命令窗口</code></li>
</ul>
</blockquote>
</li>
<li>输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
等到加载成功,访问<a class="btn-beautify button--animated outline" href="http://localhost:4000/" target="_blank" rel="noopener" title="localhost:4000">localhost:4000</a>即可打开博客</li>
</ol>
<hr>
<h1 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h1><h2 id="获取公钥"><a href="#获取公钥" class="headerlink" title="获取公钥"></a>获取公钥</h2><div class="tip important font5 fas fa-home"><p>需要将ssh-keygen设置为环境变量</p><p></p></div>

<ol>
<li><p>打开cmd 输入</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;注册Github的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p> 一连输入三个 <kbd>Enter</kbd><br>得到 <code>Your public key has been saved in /c/Users/Hexo/.ssh/id_rsa.pub.</code><br>找到该文件 打开<br>按 <kbd>Ctrl</kbd> + <kbd>A</kbd> 全选<br>按 <kbd>Ctrl</kbd> + <kbd>C</kbd> 复制</p>
</blockquote>
</li>
</ol>
<h2 id="填写公钥"><a href="#填写公钥" class="headerlink" title="填写公钥"></a>填写公钥</h2><ol start="2">
<li>打开 <a href="https://github.com/settings/keys">Github</a><blockquote>
<p>点击 New SSH Key<br>填写 Title<br>填写Key 粘贴</p>
</blockquote>
</li>
</ol>
<hr>
<h1 id="修改站点信息"><a href="#修改站点信息" class="headerlink" title="修改站点信息"></a>修改站点信息</h1><p>在根目录下(默认为blog目录下),打开 _config.yml (可用记事本打开)<br>移到最下面,修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>点击<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: bg;color: color">例子
    </button><div class="hide-content"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如我的username为 123</span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;123&#x2F;123.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div></div></p>
<hr>
<h1 id="同步到Github"><a href="#同步到Github" class="headerlink" title="同步到Github"></a>同步到Github</h1><p>在根目录下(默认为blog目录下),运行cmd<br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<div class="note danger disabled"><p>可能需要安装框架,可以不用安装最新的版本,看要求即可</p>
</div>

<p>然后会弹出Github登录 登录即可</p>
<hr>
<h1 id="成功部署"><a href="#成功部署" class="headerlink" title="成功部署"></a>成功部署</h1><p>访问 <a href="https://username.github.io/">https://username.github.io/</a> 即可!!!</p>
<div class="tip wtgo font5 fas fa-bolt"><p>可能需要等待几分钟同步...</p><p></p></div>

<hr>
<h1 id="域名设定"><a href="#域名设定" class="headerlink" title="域名设定"></a>域名设定</h1><ol>
<li>打开cmd 输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping yourname.github.io</span><br></pre></td></tr></table></figure>
获取ip,解析到域名</li>
<li>在根目录下的<code>source</code> 新建一个<code>CNAME</code> 写入域名<div class="note info simple"><p>即先创建一个.txt的文件,再改为CNAME </p>
</div>
<div class="checkbox yellow checked">
 <input type="checkbox" checked>
 <p>一定要去掉后缀!!!!!!</p>
</div></li>
<li>同步到Github即可</li>
</ol>
]]></content>
      <categories>
        <category>博客 hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>XPath</title>
    <url>/2021/02/11/XPath/</url>
    <content><![CDATA[<h1 id="XPath的符号表示"><a href="#XPath的符号表示" class="headerlink" title="XPath的符号表示"></a>XPath的符号表示</h1><div><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从当前节点选取直接子节点(下一级)</td></tr><tr><td>//</td><td>从当前节点选取子孙节点(下级)</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr></tbody></table></div>

<h1 id="XPath快速定位"><a href="#XPath快速定位" class="headerlink" title="XPath快速定位"></a>XPath快速定位</h1><p>按<code>F12</code> -&gt; <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd> -&gt; 定位元素 -&gt; -&gt; 右键点击元素 -&gt; 复制XPath<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/XPath/%E6%B5%8F%E8%A7%88%E5%99%A8xpath.png"></p>
<h1 id="XPath常用函数"><a href="#XPath常用函数" class="headerlink" title="XPath常用函数"></a>XPath常用函数</h1><p>1.contains()：匹配属性值中包含(部分)某些字符串的节点<br>形式如 : //li[contains(@id,”xxx”)]<br>2.text()：获取标签里的内容，作为字符串输出<br>形式如 : //li[contains(@id,”xxx”)]/text()</p>
<h1 id="爬取猫眼"><a href="#爬取猫眼" class="headerlink" title="爬取猫眼"></a>爬取猫眼</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;maoyan.com&#x2F;board&#39;</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Cookie&#39;: &#39;uuid_n_v&#x3D;v1; uuid&#x3D;CE8F01006C1A11EBB1AE3B87C7DEAC0D4CE0991FF0534C30B00482914D74394D; _csrf&#x3D;56c5a92f32b7fd0839d8aea3d8fb63efdb760413d3a66e64f20c85a7b69626d5; Hm_lvt_703e94591e87be68cc8da0da7cbd0be2&#x3D;1613014796; _lxsdk_cuid&#x3D;1778f2c88e8c8-018bd17ae4d2da-78667f69-13c680-1778f2c88e857; _lxsdk&#x3D;CE8F01006C1A11EBB1AE3B87C7DEAC0D4CE0991FF0534C30B00482914D74394D; Hm_lpvt_703e94591e87be68cc8da0da7cbd0be2&#x3D;1613015805; __mta&#x3D;55391636.1613014796550.1613015755811.1613015805268.3; _lxsdk_s&#x3D;1778f2c88e9-1db-289-172%7C%7C9&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.150 Safari&#x2F;537.36 Edg&#x2F;88.0.705.63&#39;</span><br><span class="line">&#125;</span><br><span class="line">text &#x3D; requests.get(url &#x3D; url,headers&#x3D; headers).text</span><br><span class="line">tree &#x3D; etree.HTML(text)</span><br><span class="line">contents1 &#x3D; tree.xpath(&#39;&#x2F;&#x2F;p[@class&#x3D;&quot;name&quot;]&#x2F;a&#x2F;@title&#39;)</span><br><span class="line">print(contents1)</span><br><span class="line">contents2 &#x3D; tree.xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div&#x2F;div&#x2F;dl&#x2F;dd&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;p[1]&#x2F;a&#x2F;@title&#39;)</span><br><span class="line">print(contents2)</span><br><span class="line">contents3 &#x3D; tree.xpath(&#39;&#x2F;&#x2F;p&#x2F;&#x2F;a&#x2F;@title&#39;)</span><br><span class="line">print(contents3)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>[‘心灵奇旅’, ‘拆弹专家2’, ‘送你一朵小红花’, ‘紧急救援’, ‘崖上的波妞’, ‘许愿神龙’, ‘海底小纵队：火焰之环’, ‘赛尔号大电影7：疯狂机器城’, ‘温暖的抱抱’, ‘武汉日夜’]<br>[‘心灵奇旅’, ‘拆弹专家2’, ‘送你一朵小红花’, ‘紧急救援’, ‘崖上的波妞’, ‘许愿神龙’, ‘海底小纵队：火焰之环’, ‘赛尔号大电影7：疯狂机器城’, ‘温暖的抱抱’, ‘武汉日夜’]<br>[‘心灵奇旅’, ‘拆弹专家2’, ‘送你一朵小红花’, ‘紧急救援’, ‘崖上的波妞’, ‘许愿神龙’, ‘海底小纵队：火焰之环’, ‘赛尔号大电影7：疯狂机器城’, ‘温暖的抱抱’, ‘武汉日夜’]  </p>
</blockquote>
<p>三个方式的XPath都是爬取到电影名字(一列表的形式)</p>
<h2 id="法一-属性值作为条件"><a href="#法一-属性值作为条件" class="headerlink" title="法一 属性值作为条件"></a>法一 属性值作为条件</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/XPath/%E6%B3%95%E4%B8%80.png"><br>在 class=’name’ 下属的 a 中 就可以<br>用<code>(&#39;//p[@class=&quot;name&quot;]/a/@title&#39;)</code> 引出 标题<br>或者将<code>@title</code> 换成<code>text()</code></p>
<h2 id="法二-对比法"><a href="#法二-对比法" class="headerlink" title="法二 对比法"></a>法二 对比法</h2><p>复制两个标题的XPath</p>
<p><code>//*[@id=&quot;app&quot;]/div/div/div/dl/dd[1]/div/div/div[1]/p[1]/a</code><br><code>//*[@id=&quot;app&quot;]/div/div/div/dl/dd[2]/div/div/div[1]/p[1]/a</code><br>发现只有<code>dd[1]</code> 和<code>dd[2]</code>的区别<br>于是把[]去掉<br><code>//*[@id=&quot;app&quot;]/div/div/div/dl/dd/div/div/div[1]/p[1]/a/@title</code></p>
<h2 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h2><p>看出在p下的a 有点猜测的意味,不推荐</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>XPath</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>高阶函数</title>
    <url>/2021/02/14/%E9%AB%98%E4%BB%B7%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="函数作为对象"><a href="#函数作为对象" class="headerlink" title="函数作为对象"></a>函数作为对象</h1><ol>
<li>定义一个函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def factorial(n):     </span><br><span class="line">    &#39;&#39;&#39;returns n!&#39;&#39;&#39;</span><br><span class="line">    return 1 if n &lt; 2 else n * factorial(n-1)  # factorial:阶乘, 这里用的是递归调用</span><br></pre></td></tr></table></figure></li>
<li>调用函数,读取他的__doc__属性<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(factorial(42))</span><br><span class="line">print(factorial.__doc__)</span><br><span class="line">print(type(factorial))</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>1405006117752879898543142606244511569936384000000000<br>returns n!<br><code>&lt;class &#39;function&#39;&gt;</code></p>
</blockquote>
</li>
</ol>
<h1 id="函数用作参数"><a href="#函数用作参数" class="headerlink" title="函数用作参数"></a>函数用作参数</h1><p>定义一个打印的方式<br>定义一个默认的打印方式,把<code>变量</code> 指向<code>print</code>函数 那么这个变量就和<code>print</code> 一样了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def print_score_dict(dict):</span><br><span class="line">    for k in dict.keys():</span><br><span class="line">        print(&#39;姓名: &#123;:s&#125; ; 成绩: &#123;&#125;&#39;.format(k,dict[k]))</span><br><span class="line">def displace_exam_score(print_function&#x3D;print):</span><br><span class="line">    exam_score &#x3D; &#123;&#39;赵一&#39;:92, &#39;陈二&#39;:83, &#39;张三&#39;:87, &#39;李四&#39;:88, &#39;王五&#39;:85&#125;</span><br><span class="line">    print_function(exam_score)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">displace_exam_score()      # 函数对象也可做缺省参数</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>{‘赵一’: 92, ‘陈二’: 83, ‘张三’: 87, ‘李四’: 88, ‘王五’: 85}</p>
</blockquote>
<p>由于有默认值,可以不用在括号内填写</p>
<p>调用自己的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">displace_exam_score(print_function&#x3D;print_score_dict)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>姓名: 赵一 ; 成绩: 92<br>姓名: 陈二 ; 成绩: 83<br>姓名: 张三 ; 成绩: 87<br>姓名: 李四 ; 成绩: 88<br>姓名: 王五 ; 成绩: 85</p>
</blockquote>
<p>以自己定义的方式打印</p>
<p>总的来说</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; print</span><br><span class="line">a(&#39;123&#39;)</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(print))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>123<br><code>&lt;class &#39;builtin_function_or_method&#39;&gt;</code><br><code>&lt;class &#39;builtin_function_or_method&#39;&gt;</code></p>
</blockquote>
<p>把 <code>a</code>定义为<code>print</code>,那么<code>a</code>就和 <code>print</code>一样了,也就有了打印的功能</p>
<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>匿名函数又称为Lamda函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; lambda x,y: x + y</span><br><span class="line">print(a(1,2))</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>3<br><code>&lt;class &#39;function&#39;&gt;</code></p>
</blockquote>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p><strong>接受函数为参数</strong>, 或者把函数作为结果返回的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fruits &#x3D; [&#39;strawberry&#39;, &#39;fig&#39;, &#39;apple&#39;, &#39;cherry&#39;, &#39;raspberry&#39;, &#39;banana&#39;]</span><br><span class="line">a &#x3D; sorted(fruits, key&#x3D;len)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>比如sorted,让<code>key</code>传入<code>len</code>这个函数</p>
<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>格式 : map(func , Iterable)<br>例如 计算 x&sup2;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">    return x * x</span><br><span class="line"></span><br><span class="line">r &#x3D; map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">print(list(r))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>[1, 4, 9, 16, 25, 36, 49, 64, 81]<br>先定义一个函数,再对每一个值进行该操作</p>
</blockquote>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p><code>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">def fn(x, y):</span><br><span class="line">    return x * 10 + y</span><br><span class="line">print(reduce(fn, [1, 3, 5, 7, 9]))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>13579</p>
</blockquote>
<ol>
<li>1&times;10 + 3 = 13</li>
<li>13&times;10 + 5 = 135<br>…</li>
</ol>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>过滤函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def is_odd(n):</span><br><span class="line">    return n % 2 &#x3D;&#x3D; 1</span><br><span class="line"></span><br><span class="line">a &#x3D; list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>[1, 5, 9, 15]</p>
</blockquote>
<h2 id="map、filter-替代"><a href="#map、filter-替代" class="headerlink" title="map、filter 替代"></a>map、filter 替代</h2><p>用列表生成器<br><code>[funtion(x) for x in range(xxxx) if xxx]</code></p>
<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="被修饰无参数"><a href="#被修饰无参数" class="headerlink" title="被修饰无参数"></a>被修饰无参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># funA 作为装饰器函数</span><br><span class="line">def funA(fn):</span><br><span class="line">    print(&quot;funA1&quot;)</span><br><span class="line">    fn() # 执行传入的fn参数</span><br><span class="line">    print(&quot;funA2&quot;)</span><br><span class="line">    return &#39;我是funA&#39;</span><br><span class="line">@funA</span><br><span class="line">def funB():</span><br><span class="line">    print(&quot;funB&quot;)</span><br><span class="line">    return &#39;我是funB&#39;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>funA1<br>funB<br>funA2<br>传入的<code>fn</code> 就是传入的函数<code>funB</code><br>funB 作为 funA() 的参数传入</p>
</blockquote>
<ul>
<li>等价于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def funA(fn):</span><br><span class="line">    print(&quot;funA1&quot;)</span><br><span class="line">    fn() # 执行传入的fn参数</span><br><span class="line">    print(&quot;funA2&quot;)</span><br><span class="line">    return &#39;我是funA&#39;</span><br><span class="line">def funB():</span><br><span class="line">    print(&quot;funB&quot;)</span><br><span class="line">    return &#39;我是funB&#39;</span><br><span class="line">funA(funB)</span><br></pre></td></tr></table></figure>
如果在最后加上<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(funB)</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>我是funA<br>返回的是funA的返回值</p>
</blockquote>
</li>
</ul>
<hr>
<p>同理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@funA</span><br><span class="line">@funB</span><br><span class="line">@funC</span><br><span class="line">def fun():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<ul>
<li>等价于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun &#x3D; funA(funB(funC(fun)))</span><br></pre></td></tr></table></figure>
从上到下,函数从外到内</li>
</ul>
<h2 id="被修饰有参数"><a href="#被修饰有参数" class="headerlink" title="被修饰有参数"></a>被修饰有参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#funA 作为装饰器函数</span><br><span class="line">def funA(fn):</span><br><span class="line">    def funC(abc):</span><br><span class="line">        print(&#39;funC&#39;, abc)</span><br><span class="line">    return funC</span><br><span class="line">@funA</span><br><span class="line">def funB(ab):</span><br><span class="line">    print(&quot;funB&quot;,ab)</span><br><span class="line">funB(&#39;123&#39;)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>funC 123</p>
</blockquote>
<p>由于funA 返回了 funC 是一个函数 , 那么funB(被修饰的函数)的传入值<code>ab</code>就变成funC的传入值<code>abc</code></p>
<ul>
<li>等价于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def funA(fn):</span><br><span class="line">    def funC(abc):</span><br><span class="line">        print(&#39;funC&#39;, abc)</span><br><span class="line">    return funC</span><br><span class="line">def funB(abc):</span><br><span class="line">    print(&quot;funB()&quot;, abc)</span><br><span class="line">funB &#x3D; funA(funB)</span><br><span class="line">funB(&#39;123&#39;)</span><br></pre></td></tr></table></figure>
就是对funA传入的函数为funB 再保存为funB</li>
</ul>
<p>让 funC = funB , funB 的参数放在funC中<br>我们虽然在调用funB,实际上是在运行funC</p>
<h2 id="传入多个参数"><a href="#传入多个参数" class="headerlink" title="传入多个参数"></a>传入多个参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def funA(fn):</span><br><span class="line">    # 定义一个嵌套函数</span><br><span class="line">    def funC(*args,**kwargs):</span><br><span class="line">        fn(*args,**kwargs)</span><br><span class="line">    return funC</span><br><span class="line">@funA</span><br><span class="line">def funB1(abc):</span><br><span class="line">    print(&quot;funB1&quot;,abc)</span><br><span class="line">@funA</span><br><span class="line">def funB2(name,abc):</span><br><span class="line">    print(name,abc)</span><br><span class="line">funB1(123)</span><br><span class="line">funB2(&quot;funB2&quot;,&quot;123&quot;)</span><br></pre></td></tr></table></figure>
<p>由于数量未知 在funC内传入<code>*args </code>和<code>**kwargs</code>作为装饰器内部嵌套函数的参数</p>
<ol>
<li>*args的用法：当传入的参数个数未知，且不需要知道参数名称时</li>
<li>**kwargs的用法：当传入的参数个数未知，但需要知道参数的名称时(比如 : 字典)</li>
</ol>
<ul>
<li>*xxx 和 **xxx<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for key in kwargs:</span><br><span class="line">    print(key,kwargs[key])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h1><p>偏函数<br>与数学上的偏函数不同 修改函数的默认值<br>比如 int </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(int(&#39;111&#39;))</span><br><span class="line">print(int(&#39;111&#39;,base&#x3D;10))</span><br><span class="line">print(int(&#39;111&#39;,base&#x3D;2))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>111<br>111<br>7</p>
</blockquote>
<p>int 默认为10进制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import functools</span><br><span class="line">int2 &#x3D; functools.partial(int, base&#x3D;2)</span><br><span class="line">print(int2(&#39;111&#39;))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>7</p>
</blockquote>
<p>就是把int的默认值修改,保存为int2</p>
<ul>
<li>等价于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def int2(x, base&#x3D;2):</span><br><span class="line">    return int(x, base)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>高阶函数</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2021/02/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="基本符号表示"><a href="#基本符号表示" class="headerlink" title="基本符号表示"></a>基本符号表示</h1><ol>
<li><p><code>^</code>示匹配字符串的开始位置 (例外:用在中括号中<code>[ ]</code>时,可以理解为取反,表示不匹配括号中字符串)</p>
</li>
<li><p><code>$</code>示匹配字符串的结束位置</p>
</li>
<li><p><code>.</code>匹配单个字符</p>
</li>
<li><p><code>\w</code>匹配英文字母和数字<code>\W</code>非字母和数字</p>
</li>
<li><p><code>\d</code>匹配数字<code>\D</code>非数字</p>
</li>
<li><p><code>*</code>表示匹配 零次到多次</p>
</li>
<li><p><code>+</code>表示匹配 一次到多次 (至少有一次)</p>
</li>
<li><p><code>?</code>表示匹配零次或一次 (或是非贪心模式 尽可能少的匹配)</p>
</li>
<li><p><code>|</code>表示为或者,两项中取一项</p>
</li>
<li><p><code>( )</code>小括号表示匹配括号中全部字符</p>
</li>
<li><p><code>[ ]</code>中括号表示匹配括号中一个字符 范围描述 如<code>[0-9 a-z A-Z]</code></p>
</li>
<li><p><code>&#123; &#125;</code>大括号用于限定匹配次数 如<code>&#123;n&#125;</code>表示匹配n个字符<code>&#123;n,&#125;</code>表示至少匹配n个字符 {n,m}表示至少 n,最多 m</p>
</li>
<li><p><code>\</code>转义字符 如上基本符号匹配都需要转义字符 如<code>\*</code>表示匹配<code>*</code>号</p>
</li>
</ol>
<h1 id="使用正则匹配"><a href="#使用正则匹配" class="headerlink" title="使用正则匹配"></a>使用正则匹配</h1><h2 id="匹配Regex对象"><a href="#匹配Regex对象" class="headerlink" title="匹配Regex对象"></a>匹配Regex对象</h2><p>两种表示方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;)</span><br><span class="line">mo &#x3D; Rex.search(&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex &#x3D; r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><br><span class="line">mo &#x3D; re.search(ex ,&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">print(mo.group(0))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p><code>123-456-7890</code></p>
</blockquote>
<h2 id="用-分组"><a href="#用-分组" class="headerlink" title="用( )分组"></a>用( )分组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex &#x3D; r&#39;(\d\d\d)-(\d\d\d)-(\d\d\d\d)&#39;</span><br><span class="line">mo &#x3D; re.search(ex ,&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">print(mo.group(0),&#39;\n&#39;,mo.group(1),&#39;\n&#39;,mo.group(3))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>123-456-7890<br>123<br>7890<br>group(0)代表的是整个匹配组,而group(1),group(2)…依次匹配第1,2,..个括号内的内容</p>
</blockquote>
<h2 id="查找全部"><a href="#查找全部" class="headerlink" title="查找全部"></a>查找全部</h2><ul>
<li>findall： 从字符串任意位置查找，返回一个列表</li>
<li>finditer：从字符串任意位置查找，返回一个迭代器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex1 &#x3D; r&#39;(\d\d\d)-\d\d\d-(\d\d\d\d)&#39;</span><br><span class="line">ex2 &#x3D; r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><br><span class="line">mo1 &#x3D; re.findall(ex1 ,&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">mo2 &#x3D; re.findall(ex2 ,&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">print(mo1)</span><br><span class="line">print(mo2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>[(‘123’, ‘7890’), (‘098’, ‘4321’)]<br>[‘123-456-7890’, ‘098-765-4321’]<br>输出为列表的形式,用括号分组后,会以元组表现出<code>分组内容</code></p>
</blockquote>
</li>
</ul>
<h2 id="不区分大小写"><a href="#不区分大小写" class="headerlink" title="不区分大小写"></a>不区分大小写</h2><div class="snote idea yellow"><p>re.IGNORECASE 或简写为 re.I</p></div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex &#x3D; re.compile(r&#39;qwer&#39;,re.I)</span><br><span class="line">mo &#x3D; re.findall(ex , &#39;Qwer,QWER,wert&#39;)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex &#x3D; r&#39;qwer&#39;</span><br><span class="line">mo &#x3D; re.findall(ex , &#39;Qwer,QWER,wert&#39;,re.I)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>[‘Qwer’, ‘QWER’]</p>
</blockquote>
<ul>
<li>第一种方法在 compile中加入 re.I</li>
<li>第二种是在查找的中加入re.I</li>
</ul>
<h2 id="表示全部"><a href="#表示全部" class="headerlink" title=".表示全部"></a>.表示全部</h2><div class="snote idea yellow"><p>re.DOTALL 或简写为 re.S</p></div>
一般的` . `是无法表示换行的

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;.\d\d\d-\d\d\d-\d\d\d\d&#39;)</span><br><span class="line">mo &#x3D; Rex.search(&#39;&#39;&#39;&#39;电话是</span><br><span class="line">123-456-7890&#39;&#39;&#39;)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>Traceback (most recent call last):<br>  File “e:/1.Python/测试.py”, line 5, in <module><br>    print(mo.group())<br>AttributeError: ‘NoneType’ object has no attribute ‘group’</module></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;.\d\d\d-\d\d\d-\d\d\d\d&#39;,re.S)</span><br><span class="line">mo &#x3D; Rex.search(&#39;&#39;&#39;&#39;电话是</span><br><span class="line">123-456-7890&#39;&#39;&#39;)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>123-456-7890<br>匹配了一行空行</p>
</blockquote>
<h2 id="正则中加注释"><a href="#正则中加注释" class="headerlink" title="正则中加注释"></a>正则中加注释</h2><div class="snote idea yellow"><p>re.VERBOSE 或简写为 re.X</p></div>
一般地,在正则表达式中加入注释,可能会被以为是匹配对象

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;&#39;&#39;(</span><br><span class="line">    ([a-zA-Z0-9._%+-]+)  #用户名</span><br><span class="line">    @                 #分隔号</span><br><span class="line">    [a-zA-Z0-9.-]* #邮件服务器</span><br><span class="line">    )</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">)</span><br><span class="line">mo &#x3D; Rex.search(&#39;我的邮箱是123456789@qq.com&#39;)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>Traceback (most recent call last):<br>  File “e:/1.Python/测试.py”, line 10, in <module><br>    print(mo.group())<br>AttributeError: ‘NoneType’ object has no attribute ‘group’</module></p>
</blockquote>
<p>添加之后<code>re.X</code>后,可以在正则中加入注释,不被匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;&#39;&#39;(</span><br><span class="line">    ([a-zA-Z0-9._%+-]+)  #用户名</span><br><span class="line">    @                 #分隔号</span><br><span class="line">    [a-zA-Z0-9.-]* #邮件服务器</span><br><span class="line">    )</span><br><span class="line">    &#39;&#39;&#39;,re.VERBOSE</span><br><span class="line">)</span><br><span class="line">mo &#x3D; Rex.search(&#39;我的邮箱是123456789@qq.com&#39;)</span><br><span class="line">print(mo.group())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p><a href="mailto:&#49;&#x32;&#51;&#x34;&#x35;&#x36;&#x37;&#x38;&#x39;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;">&#49;&#x32;&#51;&#x34;&#x35;&#x36;&#x37;&#x38;&#x39;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a></p>
</blockquote>
<h2 id="同时使用re-I-re-S-re-X"><a href="#同时使用re-I-re-S-re-X" class="headerlink" title="同时使用re.I ,re.S ,re.X"></a>同时使用re.I ,re.S ,re.X</h2><p>可以用|分割<br>即  re.I|re.S|re.X</p>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>sub函数 与 subn函数</p>
<h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><ol>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;Agent \w+&#39;)</span><br><span class="line">text &#x3D; &#39;Agent Alice and Agent Bob are friends&#39;</span><br><span class="line">mo &#x3D; Rex.sub(&#39;person&#39;,text)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>person and person are friends<br>即将所有的替换掉了</p>
</blockquote>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;Agent (\w)\w*&#39;)</span><br><span class="line">text &#x3D; &#39;Agent Alice and Agent Bob are friends&#39;</span><br><span class="line">mo &#x3D; Rex.sub(r&#39;person \1&#39;,text)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>person A and person B are friends<br>可以用\1,\2 …匹配()内的内容 </p>
</blockquote>
<h3 id="subn"><a href="#subn" class="headerlink" title="subn"></a>subn</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;Agent (\w)\w*&#39;)</span><br><span class="line">text &#x3D; &#39;Agent Alice and Agent Bob are friends&#39;</span><br><span class="line">mo &#x3D; Rex.subn(r&#39;person \1&#39;,text)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>(‘person A and person B are friends’, 2)<br>用法与<code>sub</code>同理,只是多了个统计替换的次数</p>
</blockquote>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1></li>
</ol>
<ul>
<li><div class="tip warning"><p>在正则表达式中记得加` r'' `</p><p></p></div>
在Python中,<code>\</code>为转义符,在正则中\d表示应为\\d


</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>这是一篇测试的文章</title>
    <url>/2021/02/03/test/</url>
    <content><![CDATA[<p>-<br><svg class="icon" aria-hidden="true"><br/>  <use xlink:href="#icon-yanfafei"/><br/></svg></p>
<h1 id="写作介绍"><a href="#写作介绍" class="headerlink" title="写作介绍"></a>写作介绍</h1><h1 id="字体介绍"><a href="#字体介绍" class="headerlink" title="字体介绍"></a>字体介绍</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*这是斜体* 或 _这也是斜体_ </span><br><span class="line">**这是粗体**</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是删除线~~</span><br></pre></td></tr></table></figure>
<p><em>这是斜体</em> 或 <em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p>
<hr>
<h1 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">This is an H1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><hr>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[百度](http:&#x2F;&#x2F;www.baidu.com&#x2F;)</span><br><span class="line">[百度](http:&#x2F;&#x2F;www.baidu.com&#x2F; &quot;我是百度&quot;)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.baidu.com/">百度</a><br><a href="http://www.baidu.com/" title="我是百度">百度</a></p>
<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 无序列表项1</span><br><span class="line">+ 无序列表项2</span><br><span class="line">- 无序列表项3</span><br></pre></td></tr></table></figure>
<ul>
<li>无序列表项1</li>
</ul>
<ul>
<li>无序列表项2</li>
</ul>
<ul>
<li>无序列表项3<br>有序列表：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 有序列表项1</span><br><span class="line">2. 有序列表项2</span><br><span class="line">3. 有序列表项3</span><br><span class="line">90. 有序列表项4</span><br><span class="line">1. 有序列表项5</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>有序列表项1</li>
<li>有序列表项2</li>
<li>有序列表项3</li>
<li>有序列表项4</li>
<li>有序列表项5</li>
</ol>
<hr>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![天空](天空.jpg)</span><br><span class="line">![](天空.jpg)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/03/test/%E5%A4%A9%E7%A9%BA.jpg" alt="天空"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/03/test/%E5%A4%A9%E7%A9%BA.jpg"></p>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 表头1|表头2|表头3|表头4</span><br><span class="line">|-| :- | :-: | -: |</span><br><span class="line">|默认左对齐|左对齐|居中对齐|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对齐|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对齐|右对齐|</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>表头1</th>
<th align="left">表头2</th>
<th align="center">表头3</th>
<th align="right">表头4</th>
</tr>
</thead>
<tbody><tr>
<td>默认左对齐</td>
<td align="left">左对齐</td>
<td align="center">居中对齐</td>
<td align="right">右对齐</td>
</tr>
<tr>
<td>默认左对齐</td>
<td align="left">左对齐</td>
<td align="center">居中对齐</td>
<td align="right">右对齐</td>
</tr>
<tr>
<td>默认左对齐</td>
<td align="left">左对齐</td>
<td align="center">居中对齐</td>
<td align="right">右对齐</td>
</tr>
</tbody></table>
<hr>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-  A 123</span><br><span class="line">    &gt; 123</span><br></pre></td></tr></table></figure>
<ul>
<li>A 123<blockquote>
<p>123</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 123</span><br><span class="line">&gt; 123</span><br></pre></td></tr></table></figure>
<blockquote>
<p>123<br>123</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-  A 123</span><br></pre></td></tr></table></figure></li>
<li> A 123</li>
</ul>
<hr>
<h1 id="代码方框"><a href="#代码方框" class="headerlink" title="代码方框"></a>代码方框</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96; 一行代码 &#96;</span><br></pre></td></tr></table></figure>
<p><code>一行代码</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">多行代码代码</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多行代码代码</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;note info&quot;&gt;这里是 info 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note primary&quot;&gt;这里是 primary 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note warning&quot;&gt;这里是 warning 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note danger&quot;&gt;这里是 danger 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note success&quot;&gt;这里是 success 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note default&quot;&gt;这里是 default 标签样式&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<div class="note info">这里是 info 标签样式</div>
<div class="note primary">这里是 primary 标签样式</div>
<div class="note warning">这里是 warning 标签样式</div>
<div class="note danger">这里是 danger 标签样式</div>
<div class="note success">这里是 success 标签样式</div>
<div class="note default">这里是 default 标签样式</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;note info no-icon&quot;&gt;这里是不带符号的 info 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note primary no-icon&quot;&gt;这里是不带符号的 primary 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note warning no-icon&quot;&gt;这里是不带符号的 warning 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note danger no-icon&quot;&gt;这里是不带符号的 danger 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note success no-icon&quot;&gt;这里是不带符号的 success 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note default no-icon&quot;&gt;这里是不带符号的 default 标签样式&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">这里是不带符号的 info 标签样式</div>
<div class="note primary no-icon">这里是不带符号的 primary 标签样式</div>
<div class="note warning no-icon">这里是不带符号的 warning 标签样式</div>
<div class="note danger no-icon">这里是不带符号的 danger 标签样式</div>
<div class="note success no-icon">这里是不带符号的 success 标签样式</div>
<div class="note default no-icon">这里是不带符号的 default 标签样式</div>

<p class="div-border green">绿色</p>
<p class="div-border red">红色</p>
<p class="div-border yellow">黄色</p>
<p class="div-border grey">灰色</p>
<p class="div-border blue">蓝色</p>
---------------
# 分割线
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---------------</span><br></pre></td></tr></table></figure>
---------------

]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
