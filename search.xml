<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JNU_毛概期末</title>
    <url>/posts/5a1a850e.html</url>
    <content><![CDATA[<h1 id="中国特色社会主义进入新时代的依据。"><a href="#中国特色社会主义进入新时代的依据。" class="headerlink" title="中国特色社会主义进入新时代的依据。"></a>中国特色社会主义进入新时代的依据。</h1><ul>
<li><p>主要矛盾变化</p>
</li>
<li><p>起点变化(改革,占到了新的历史起点)</p>
</li>
<li><p>思想变化(习近平新时代特色社会主义思想)</p>
<h1 id="新时代中国社会主要矛盾的内容。"><a href="#新时代中国社会主要矛盾的内容。" class="headerlink" title="新时代中国社会主要矛盾的内容。"></a>新时代中国社会主要矛盾的内容。</h1></li>
<li><p> (旧)人们日益增长的物质文化需要同落后的社会生产之间的矛盾</p>
</li>
<li><p>(新)人们日益增长的美好生活需要同不平衡,不充分的发展之间的矛盾</p>
<ul>
<li> 生活水平提高</li>
<li> 对美化生活向往</li>
<li> 各区域发展不平衡.<h1 id="“中国梦”的内涵。"><a href="#“中国梦”的内涵。" class="headerlink" title="“中国梦”的内涵。"></a>“中国梦”的内涵。</h1></li>
</ul>
</li>
<li><p>国家富强,民族振兴,人民幸福</p>
<ul>
<li> 国家富强 综合国力增强</li>
<li> 民族振兴 继承创造中华民族优秀传统文化</li>
<li> 人民幸福 人权保障</li>
</ul>
<p>富强.振兴-&gt;基础和保障</p>
<p>幸福-&gt;出发点 落脚点</p>
<h1 id="如何理解实现建成社会主义现代化强国“两步走”奋斗目标？"><a href="#如何理解实现建成社会主义现代化强国“两步走”奋斗目标？" class="headerlink" title="如何理解实现建成社会主义现代化强国“两步走”奋斗目标？"></a>如何理解实现建成社会主义现代化强国“两步走”奋斗目标？</h1></li>
<li><p>2035年基本实现社会主义现代化</p>
</li>
<li><p>2050年建成富强民主文明和谐美丽的社会主义现代化强国(物质文明,政治文明,精神文明,社会文明,生态文明)</p>
</li>
</ul>
<h1 id="“高质量发展”的内容要求。"><a href="#“高质量发展”的内容要求。" class="headerlink" title="“高质量发展”的内容要求。"></a>“高质量发展”的内容要求。</h1><ul>
<li>坚持习近平经济思想</li>
<li>深化供给侧结构性改革</li>
<li>建设现代化经济体系</li>
</ul>
<h1 id="新发展格局的科学内涵。"><a href="#新发展格局的科学内涵。" class="headerlink" title="新发展格局的科学内涵。"></a>新发展格局的科学内涵。</h1><ul>
<li>国内大循环为主体,国内国际双循环相促进的新发展格局</li>
</ul>
<h1 id="我国政治制度的“四梁八柱”。"><a href="#我国政治制度的“四梁八柱”。" class="headerlink" title="我国政治制度的“四梁八柱”。"></a>我国政治制度的“四梁八柱”。</h1><ul>
<li>人民代表大会制度 根本政治制度</li>
<li>共产党领导的多党合作和政治协商制度 基本政治制度</li>
<li>民族区域自治制度 基本政治制度</li>
<li>基层群众自治制度 基本政治制度</li>
</ul>
<h1 id="“文化自信是最深刻的自信”的意义。"><a href="#“文化自信是最深刻的自信”的意义。" class="headerlink" title="“文化自信是最深刻的自信”的意义。"></a>“文化自信是最深刻的自信”的意义。</h1><ul>
<li>提高文化软实力</li>
<li>社会主义文化强国</li>
<li>社会主义文化建设</li>
<li>维护意识形态安全</li>
</ul>
<h1 id="社会主义核心价值观的内涵及其时代价值。"><a href="#社会主义核心价值观的内涵及其时代价值。" class="headerlink" title="社会主义核心价值观的内涵及其时代价值。"></a>社会主义核心价值观的内涵及其时代价值。</h1><ul>
<li>国家<ul>
<li>富强 民主 文明 和谐</li>
</ul>
</li>
<li>公民<ul>
<li>爱国 敬业 诚信 友善</li>
</ul>
</li>
<li>社会<ul>
<li>自由 平等 公正 法制</li>
</ul>
</li>
</ul>
<p>建设什么样的国家,社会,培育什么样的公民.是当代中国精神的集中体现</p>
<ul>
<li>增强民族凝聚力</li>
<li>增强文化软实力</li>
<li>推进国家治理体系现代化</li>
<li>适应国际大局深刻变化</li>
</ul>
<h1 id="“共同富裕”的科学内涵。"><a href="#“共同富裕”的科学内涵。" class="headerlink" title="“共同富裕”的科学内涵。"></a>“共同富裕”的科学内涵。</h1><ul>
<li>社会主义的本质特征</li>
<li>现代化的重要特征,两步走的目标</li>
<li>党的执政基础</li>
<li>物质生活和精神生活的全面富裕</li>
<li>先富带动后富</li>
</ul>
<p>社会主义的本质规定和奋斗目标</p>
<h1 id="“绿水青山就是金山银山”的重要意义。"><a href="#“绿水青山就是金山银山”的重要意义。" class="headerlink" title="“绿水青山就是金山银山”的重要意义。"></a>“绿水青山就是金山银山”的重要意义。</h1><ul>
<li>美好生活的向往</li>
<li>建设社会主义生态文明</li>
<li>提供中国方案</li>
<li>阐释了经济和生态的关系</li>
</ul>
<h1 id="依法治国的新旧十六字方针及其重要区别。"><a href="#依法治国的新旧十六字方针及其重要区别。" class="headerlink" title="依法治国的新旧十六字方针及其重要区别。"></a>依法治国的新旧十六字方针及其重要区别。</h1><ul>
<li>(旧)有法可依 有法必依 执法必严 违法必究</li>
<li>(新)科学立法 严格执法 公正司法 全民守法</li>
</ul>
<ol>
<li>良法,立法的质量</li>
<li>对法的实施</li>
<li>公平公正</li>
<li>主体是全民</li>
</ol>
<h1 id="“五位一体”总体布局和“四个全面”战略布局。"><a href="#“五位一体”总体布局和“四个全面”战略布局。" class="headerlink" title="“五位一体”总体布局和“四个全面”战略布局。"></a>“五位一体”总体布局和“四个全面”战略布局。</h1><ul>
<li>五位一体<ol>
<li>经济建设 -&gt;高质量发展3个点</li>
<li>政治建设 -&gt; 民主政治</li>
<li>社会建设 -&gt; 民生</li>
<li>文化建设 -&gt;社会主义文化建设 社会主义核心价值观</li>
<li>生态文明建设 -&gt;绿色</li>
</ol>
</li>
</ul>
<ol>
<li>中国特色社会主义事业发展和完善</li>
<li>全面贯彻落实科学发展观的客观要求和重要体现</li>
<li>全面建成小康社会和构建社会主义和谐社会的必然要求</li>
</ol>
<ul>
<li>四个全面<ol>
<li>全面建设社会主义现代化国家</li>
<li>全面深化改革</li>
<li>全面依法治国</li>
<li>全面从严治党</li>
</ol>
</li>
</ul>
<ol>
<li>共产党几代领导集体智慧的创造性升华</li>
<li>中国特色社会主义理论的新发展</li>
</ol>
<p>什么是社会主义,如何坚持和发展中国特色社会主义</p>
<h1 id="“中国式现代化道路”和“人类文明新形态”的科学内涵。"><a href="#“中国式现代化道路”和“人类文明新形态”的科学内涵。" class="headerlink" title="“中国式现代化道路”和“人类文明新形态”的科学内涵。"></a>“中国式现代化道路”和“人类文明新形态”的科学内涵。</h1><ul>
<li>现代化道路<ol>
<li>人口规模巨大</li>
<li>共同富裕</li>
<li>物质文明和精神文明协调</li>
<li>人与自然和谐相处</li>
<li>和平发展</li>
</ol>
</li>
<li>人类文明新形态<ol>
<li>共同富裕</li>
<li>中国特色社会主义</li>
<li>人民至上</li>
<li>命运共同体</li>
</ol>
</li>
</ul>
<h1 id="如何理解“四个伟大”的理论及其关系？"><a href="#如何理解“四个伟大”的理论及其关系？" class="headerlink" title="如何理解“四个伟大”的理论及其关系？"></a>如何理解“四个伟大”的理论及其关系？</h1><ul>
<li>伟大斗争 伟大工程 伟大事业 伟大梦想<ul>
<li>理解<ul>
<li>斗争 精神状态</li>
<li>工程 主体力量</li>
<li>事业 走什么路</li>
<li>梦想 目标</li>
</ul>
</li>
<li>关系<ul>
<li>斗争 手段</li>
<li>工程 保障</li>
<li>事业 主题</li>
<li>梦想 目标</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="新发展理念的内容与意义。"><a href="#新发展理念的内容与意义。" class="headerlink" title="新发展理念的内容与意义。"></a>新发展理念的内容与意义。</h1><ul>
<li>创新 协调 绿色 开放 共享<ul>
<li>内容<ul>
<li>创新 放在核心位置</li>
<li>协调 持续健康发展的内在要求</li>
<li>绿色 人与自然和谐共生</li>
<li>开发 内外联动</li>
<li>共享 公平正义</li>
</ul>
</li>
<li>意义<ul>
<li>丰富和发展我国社会主义现代化理论</li>
<li>助力实现中华民族伟大复兴的中国梦</li>
<li>推动全球化发展中国智慧和中国方案</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="总体国家安全观的科学内涵。"><a href="#总体国家安全观的科学内涵。" class="headerlink" title="总体国家安全观的科学内涵。"></a>总体国家安全观的科学内涵。</h1><ul>
<li>关键在总体 政治 国土 社会 生态安全</li>
<li>坚持统筹发展和安全两件大事</li>
<li>人民安全,政治安全,国家利益相统一</li>
<li>坚持维护塑造国家安全</li>
<li>坚持科学统筹的根本方法</li>
<li>坚持党对国家安全工作的绝对领导</li>
</ul>
<h1 id="“人类命运共同体”理念的重要意义与价值。"><a href="#“人类命运共同体”理念的重要意义与价值。" class="headerlink" title="“人类命运共同体”理念的重要意义与价值。"></a>“人类命运共同体”理念的重要意义与价值。</h1><ul>
<li>意义<ul>
<li>对中华文化内涵的深度挖掘</li>
<li>实现中华民族伟大复兴中国梦的觉悟与自信</li>
<li>为世界发展指明正确航标</li>
</ul>
</li>
<li>价值<ul>
<li>新型国际关系构建</li>
<li>提供全球治理的中国智慧和中国方案</li>
<li>共建和谐世界</li>
</ul>
</li>
</ul>
<h1 id="“党要管党、从严治党”及其与党的自我革命之间的关系。"><a href="#“党要管党、从严治党”及其与党的自我革命之间的关系。" class="headerlink" title="“党要管党、从严治党”及其与党的自我革命之间的关系。"></a>“党要管党、从严治党”及其与党的自我革命之间的关系。</h1><ul>
<li>党要管党 从严治党  是新时代党建设的根本方针,四个全面的重要一环</li>
</ul>
<ol>
<li>从严治党是一场伟大的自我革命</li>
<li>全面从严以其丰富内涵诠释了自我革命的内在要求</li>
<li>全面从严推进自我革命不断深入</li>
<li>全面从严治党永远在路上，中国共产党的自我革命任重而道远</li>
</ol>
<h1 id="学习领会习近平总书记在中国人民大学考察时的讲话内容、5月5日习近平总书记在中共中央政治局常务委员会分析当前新冠肺炎疫情防控形势的讲话精神、5月10日习近平总书记在庆祝中国共产主义青年团成立100周年大会上的讲话"><a href="#学习领会习近平总书记在中国人民大学考察时的讲话内容、5月5日习近平总书记在中共中央政治局常务委员会分析当前新冠肺炎疫情防控形势的讲话精神、5月10日习近平总书记在庆祝中国共产主义青年团成立100周年大会上的讲话" class="headerlink" title="学习领会习近平总书记在中国人民大学考察时的讲话内容、5月5日习近平总书记在中共中央政治局常务委员会分析当前新冠肺炎疫情防控形势的讲话精神、5月10日习近平总书记在庆祝中国共产主义青年团成立100周年大会上的讲话"></a>学习领会习近平总书记在中国人民大学考察时的讲话内容、5月5日习近平总书记在中共中央政治局常务委员会分析当前新冠肺炎疫情防控形势的讲话精神、5月10日习近平总书记在庆祝中国共产主义青年团成立100周年大会上的讲话</h1>]]></content>
      <categories>
        <category>JNU</category>
        <category>毛概</category>
      </categories>
      <tags>
        <tag>JNU</tag>
        <tag>期末</tag>
        <tag>毛概</tag>
      </tags>
  </entry>
  <entry>
    <title>字符编码</title>
    <url>/posts/ebfb97d0.html</url>
    <content><![CDATA[<p><img src="/posts/ebfb97d0/%E4%BD%9C%E4%B8%9A.png" alt="作业"></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    char inPut, al, mu;</span><br><span class="line">    printf(&quot;请输入字母:\n&quot;);</span><br><span class="line">    scanf(&quot;%c&quot;, &amp;inPut);</span><br><span class="line">    if (inPut &lt; 91 &amp;&amp; inPut&gt;64)&#123;</span><br><span class="line">        al &#x3D; inPut - 64;</span><br><span class="line">        al &#x3D; (al * 2 - 1) % 26 + 1;</span><br><span class="line">        mu &#x3D; al + 64;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (inPut &lt; 123 &amp;&amp; inPut &gt;96)&#123;</span><br><span class="line">        al &#x3D; inPut - 96;</span><br><span class="line">        al &#x3D; (al * 2 - 1) % 26 + 1;</span><br><span class="line">        mu &#x3D; al + 96;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%c&quot;, mu);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>在 ASCII 的排列中 , 先将A(a)变为第一位B(b)变为第二位…<br>即A-&gt;1,B-&gt;2 ,….<br>a ,b ,c 同理<br>赋值为 al </p>
<p>那么转化之后的字母数字 al *2就得到了我们想要的结果<br>由于一个循环有26个字母,只要al*2/26,他的<em>余数</em>就是我们想要的结果<br>但是,有些情况会例外<br><strong>当其为26的倍数时,余数是0</strong><br>什么意思呢?就是我们想要得到26(Z),而结果却得到了0!!<br>有2个解决方法</p>
<ol>
<li>判断al的值,如果是0的话,将al改为26</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(al&#x3D;&#x3D;0) al&#x3D;26;</span><br><span class="line">或</span><br><span class="line">if(!al) al &#x3D; 26;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>先把al*2的值减去1再来除26取余数,结果再加1<br>(由于+1后-1,对余数不为0的影响不大)<br>例如 当al=13时,al*2%26=0,但是(al*2-1)%26+1=26,直接将过滤了0的情况</li>
</ol>
<h1 id="另类解法"><a href="#另类解法" class="headerlink" title="另类解法"></a>另类解法</h1><p>不用循环,直接以M为分界(因为M排位为13,*2之后刚好是Z,对于M后面的数,*2之后就要下个周期了)</p>
]]></content>
      <categories>
        <category>C</category>
        <category>作业</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>常用markdown用法</title>
    <url>/posts/b22eb87d.html</url>
    <content><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><ol>
<li><p>有序</p>
<ol start="2">
<li>有序</li>
</ol>
</li>
</ol>
<ul>
<li><p>无序</p>
<ul>
<li>无序</li>
</ul>
</li>
</ul>
<blockquote>
<p>引用</p>
</blockquote>
<blockquote>
<p>多行引用<br>在末尾加上两个空格</p>
</blockquote>
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
</tr>
</thead>
<tbody><tr>
<td>test</td>
<td>test</td>
</tr>
</tbody></table>
<hr>
<p><em>倾斜</em></p>
<p><strong>加粗</strong></p>
<p><strong><em>斜+粗</em></strong></p>
<p><del>删除</del></p>
<pre><code class="python">代码
</code></pre>
<p>字中<code>代码</code></p>
<p><a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">链接</a></p>
<p><img src="https://img0.baidu.com/it/u=2858396836,3387897168&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=250" alt="图片"></p>
<div class="timeline red"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p>
</div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p>
</div></div><div class="timeline-item-content"><p>這是測試頁面</p>
</div></div></div>]]></content>
  </entry>
  <entry>
    <title>主题使用文档</title>
    <url>/posts/ef8601e4.html</url>
    <content><![CDATA[<p>详细移步<a href="https://www.antmoe.com/posts/3b43914f/index.html#%E9%A2%84%E8%AE%BE%E6%96%B9%E6%A1%883%E6%B2%A1%E6%9C%89%E9%A2%84%E8%AE%BE%E5%80%BC">大佬</a></p>
<svg class="icon" aria-hidden="true">
  <use xlink:href="#icon-yanfafei"/>
</svg>

<p><a href="/other">链接</a></p>
<h1 id="写作介绍"><a href="#写作介绍" class="headerlink" title="写作介绍"></a>写作介绍</h1><h1 id="字体介绍"><a href="#字体介绍" class="headerlink" title="字体介绍"></a>字体介绍</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*这是斜体* 或 _这也是斜体_ </span><br><span class="line">**这是粗体**</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是删除线~~</span><br></pre></td></tr></table></figure>
<p><em>这是斜体</em> 或 <em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p>
<hr>
<h1 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">This is an H1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><hr>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[百度](http:&#x2F;&#x2F;www.baidu.com&#x2F;)</span><br><span class="line">[百度](http:&#x2F;&#x2F;www.baidu.com&#x2F; &quot;我是百度&quot;)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.baidu.com/">百度</a><br><a href="http://www.baidu.com/" title="我是百度">百度</a></p>
<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 无序列表项1</span><br><span class="line">+ 无序列表项2</span><br><span class="line">- 无序列表项3</span><br></pre></td></tr></table></figure>
<ul>
<li>无序列表项1</li>
</ul>
<ul>
<li>无序列表项2</li>
</ul>
<ul>
<li>无序列表项3<br>有序列表：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 有序列表项1</span><br><span class="line">2. 有序列表项2</span><br><span class="line">3. 有序列表项3</span><br><span class="line">90. 有序列表项4</span><br><span class="line">1. 有序列表项5</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>有序列表项1</li>
<li>有序列表项2</li>
<li>有序列表项3</li>
<li>有序列表项4</li>
<li>有序列表项5</li>
</ol>
<hr>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![天空](天空.jpg)</span><br><span class="line">![](天空.jpg)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/ef8601e4/%E5%A4%A9%E7%A9%BA.jpg" alt="天空"><br><img src="/posts/ef8601e4/%E5%A4%A9%E7%A9%BA.jpg"></p>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 表头1|表头2|表头3|表头4</span><br><span class="line">|-| :- | :-: | -: |</span><br><span class="line">|默认左对齐|左对齐|居中对齐|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对齐|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对齐|右对齐|</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>表头1</th>
<th align="left">表头2</th>
<th align="center">表头3</th>
<th align="right">表头4</th>
</tr>
</thead>
<tbody><tr>
<td>默认左对齐</td>
<td align="left">左对齐</td>
<td align="center">居中对齐</td>
<td align="right">右对齐</td>
</tr>
<tr>
<td>默认左对齐</td>
<td align="left">左对齐</td>
<td align="center">居中对齐</td>
<td align="right">右对齐</td>
</tr>
<tr>
<td>默认左对齐</td>
<td align="left">左对齐</td>
<td align="center">居中对齐</td>
<td align="right">右对齐</td>
</tr>
</tbody></table>
<hr>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-  A 123</span><br><span class="line">    &gt; 123</span><br></pre></td></tr></table></figure>
<ul>
<li>A 123<blockquote>
<p>123</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 123</span><br><span class="line">&gt; 123</span><br></pre></td></tr></table></figure>
<blockquote>
<p>123<br>123</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-  A 123</span><br></pre></td></tr></table></figure></li>
<li> A 123</li>
</ul>
<hr>
<h1 id="代码方框"><a href="#代码方框" class="headerlink" title="代码方框"></a>代码方框</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96; 一行代码 &#96;</span><br></pre></td></tr></table></figure>
<p><code>一行代码</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">多行代码代码</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多行代码代码</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;note info&quot;&gt;这里是 info 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note primary&quot;&gt;这里是 primary 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note warning&quot;&gt;这里是 warning 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note danger&quot;&gt;这里是 danger 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note success&quot;&gt;这里是 success 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note default&quot;&gt;这里是 default 标签样式&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<div class="note info">这里是 info 标签样式</div>
<div class="note primary">这里是 primary 标签样式</div>
<div class="note warning">这里是 warning 标签样式</div>
<div class="note danger">这里是 danger 标签样式</div>
<div class="note success">这里是 success 标签样式</div>
<div class="note default">这里是 default 标签样式</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;note info no-icon&quot;&gt;这里是不带符号的 info 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note primary no-icon&quot;&gt;这里是不带符号的 primary 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note warning no-icon&quot;&gt;这里是不带符号的 warning 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note danger no-icon&quot;&gt;这里是不带符号的 danger 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note success no-icon&quot;&gt;这里是不带符号的 success 标签样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note default no-icon&quot;&gt;这里是不带符号的 default 标签样式&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">这里是不带符号的 info 标签样式</div>
<div class="note primary no-icon">这里是不带符号的 primary 标签样式</div>
<div class="note warning no-icon">这里是不带符号的 warning 标签样式</div>
<div class="note danger no-icon">这里是不带符号的 danger 标签样式</div>
<div class="note success no-icon">这里是不带符号的 success 标签样式</div>
<div class="note default no-icon">这里是不带符号的 default 标签样式</div>

<p class="div-border green">绿色</p>
<p class="div-border red">红色</p>
<p class="div-border yellow">黄色</p>
<p class="div-border grey">灰色</p>
<p class="div-border blue">蓝色</p>

<hr>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo --博客搭建</title>
    <url>/posts/3c5747.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="snote info"><p><span class="inline-tag blue">搭建环境</span> win10 32位(虚拟机)</p></div>
<div class="snote info"><p><span class="inline-tag blue">博客搭建</span> hexo + Github</p></div>
<div class="tip success"><p>如果下载慢,可在<a class="btn-beautify button--animated outline" href="https://d.serctl.com/" target="_blank" rel="noopener" title="下载">下载</a></p><p></p></div>
<div class="snote idea yellow"><p>CMD下<kbd>Ctrl</kbd> + <kbd>C</kbd>不是复制</p></div>
<div class="snote idea yellow"><p><a class="btn-beautify button--animated outline" href="https://blog.ifycyu.ltd" target="_blank" rel="noopener" title="这是链接">方框是链接,可以点击</a></p></div>

<hr>
<h1 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h1><ol>
<li>注册,登录<a class="btn-beautify button--animated outline" href="https://github.com/" target="_blank" rel="noopener" title="Github">Github</a><emp>记住自己的 username</emp></li>
<li>右上角+号 -&gt; 点击 <a class="btn-beautify button--animated outline" href="https://github.com/new" target="_blank" rel="noopener" title="New repository">New repository</a></li>
<li>Repository name 填写<emp>第一步</emp>的 username.github.io<div class="snote idea yellow"><p>例如 我的username为123,就填写123.github.io</p></div>

</li>
</ol>
<hr>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><ol>
<li>安装 <a class="btn-beautify button--animated outline" href="http://nodejs.cn/download/" target="_blank" rel="noopener" title="Node.js">Node.js</a></li>
<li>安装 <a class="btn-beautify button--animated outline" href="https://git-scm.com/downloads" target="_blank" rel="noopener" title="Git">Git</a><blockquote>
<p>打开 <code>Git Bash</code> 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;注册的username&quot;</span><br><span class="line">git config --global user.emaim &quot;注册的邮箱&quot;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>安装 Hexo<blockquote>
<p>打开 cmd 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<div class="tip warning"><p>如果下载过慢可以先输入下面</p><p></p></div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<hr>
<h1 id="建立Hexo"><a href="#建立Hexo" class="headerlink" title="建立Hexo"></a>建立Hexo</h1><ol>
<li>新建一个文件夹,用于存放博客</li>
<li>打开文件夹<blockquote>
<ul>
<li>按住<kbd>Shift</kbd> 和鼠标右键 </li>
<li>点击<code>在此处打开命令窗口</code></li>
</ul>
</blockquote>
</li>
<li>输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
等到加载成功,访问<a class="btn-beautify button--animated outline" href="http://localhost:4000/" target="_blank" rel="noopener" title="localhost:4000">localhost:4000</a>即可打开博客</li>
</ol>
<hr>
<h1 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h1><h2 id="获取公钥"><a href="#获取公钥" class="headerlink" title="获取公钥"></a>获取公钥</h2><div class="tip important font5 fas fa-home"><p>需要将ssh-keygen设置为环境变量</p><p></p></div>

<ol>
<li><p>打开cmd 输入</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;注册Github的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p> 一连输入三个 <kbd>Enter</kbd><br>得到 <code>Your public key has been saved in /c/Users/Hexo/.ssh/id_rsa.pub.</code><br>找到该文件 打开<br>按 <kbd>Ctrl</kbd> + <kbd>A</kbd> 全选<br>按 <kbd>Ctrl</kbd> + <kbd>C</kbd> 复制</p>
</blockquote>
</li>
</ol>
<h2 id="填写公钥"><a href="#填写公钥" class="headerlink" title="填写公钥"></a>填写公钥</h2><ol start="2">
<li>打开 <a href="https://github.com/settings/keys">Github</a><blockquote>
<p>点击 New SSH Key<br>填写 Title<br>填写Key 粘贴</p>
</blockquote>
</li>
</ol>
<hr>
<h1 id="修改站点信息"><a href="#修改站点信息" class="headerlink" title="修改站点信息"></a>修改站点信息</h1><p>在根目录下(默认为blog目录下),打开 _config.yml (可用记事本打开)<br>移到最下面,修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>点击<div class="hide-block"><button type="button" class="hide-button" style="background-color: bg;color: color">例子
    </button><div class="hide-content"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如我的username为 123</span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;123&#x2F;123.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div></div></p>
<hr>
<h1 id="同步到Github"><a href="#同步到Github" class="headerlink" title="同步到Github"></a>同步到Github</h1><p>在根目录下(默认为blog目录下),运行cmd<br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<div class="note danger disabled"><p>可能需要安装框架,可以不用安装最新的版本,看要求即可</p>
</div>

<p>然后会弹出Github登录 登录即可</p>
<hr>
<h1 id="成功部署"><a href="#成功部署" class="headerlink" title="成功部署"></a>成功部署</h1><p>访问 <a href="https://username.github.io/">https://username.github.io/</a> 即可!!!</p>
<div class="tip wtgo font5 fas fa-bolt"><p>可能需要等待几分钟同步...</p><p></p></div>

<hr>
<h1 id="域名设定"><a href="#域名设定" class="headerlink" title="域名设定"></a>域名设定</h1><ol>
<li>打开cmd 输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping yourname.github.io</span><br></pre></td></tr></table></figure>
获取ip,解析到域名</li>
<li>在根目录下的<code>source</code> 新建一个<code>CNAME</code> 写入域名<div class="note info simple"><p>即先创建一个.txt的文件,再改为CNAME </p>
</div>
<div class="checkbox yellow checked">
 <input type="checkbox" checked>
 <p>一定要去掉后缀!!!!!!</p>
</div></li>
<li>同步到Github即可</li>
</ol>
<h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><p><a href="https://www.antmoe.com/posts/7198453/index.html">主题更换</a></p>
<p><a href="https://www.linuxwf.com/2020/04/08/exo-theme-butterfly-%E5%AE%89%E8%A3%9D%E6%96%87%E6%AA%94%EF%BC%88%E4%B8%89%EF%BC%89%E4%B8%BB%E9%A1%8C%E9%85%8D%E7%BD%AE">Butterfly</a></p>
<p><a href="https://www.jianshu.com/p/50a565adaf15">Butterfly配置</a></p>
<p><a href="https://blog.csdn.net/cungudafa/article/details/105938885">说说(Artitalk)</a></p>
<p><a href="https://blog.zhheo.com/p/27be0e44.html">说说(bber)</a></p>
<p><a href="https://github.com/HelloWuJiaYi/jVectorMap-Footprint">足迹</a>配合<a href="https://www.likecs.com/show-307012849.html">取消渲染食用</a></p>
<p><a href="https://blog.csdn.net/weixin_58068682/article/details/116614109">豆瓣</a></p>
<h1 id="自用插件"><a href="#自用插件" class="headerlink" title="自用插件"></a>自用插件</h1><ul>
<li>主题Butterfly</li>
<li>hexo-helper-live2d 看板娘</li>
<li>hexo-butterfly-douban 豆瓣</li>
<li>hexo-abbrlink 文章地址缩短</li>
<li>hexo-baidu-url-submit 百度seo</li>
<li>hexo-external-link 外部转跳链接</li>
<li>hexo-offline-popupoff Hexo加速</li>
<li>hexo-generator-searchdb Hexo搜索</li>
<li>busuanzi 计数访问量和运行时间</li>
<li>hexo-blog-encrypt 加密文章</li>
</ul>
]]></content>
      <categories>
        <category>博客 hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>CSV文件读写</title>
    <url>/posts/4a50a5b7.html</url>
    <content><![CDATA[<h1 id="CSV表格文件的输入输出"><a href="#CSV表格文件的输入输出" class="headerlink" title="CSV表格文件的输入输出"></a>CSV表格文件的输入输出</h1><blockquote>
<ol>
<li><font color="#0000FF">逗号分隔值(Comma-Separated Values，CSV) </font>, 其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列, 不含必须像二进制数字那样被解读的数据. CSV文件由任意数目的记录组成, 记录间以某种换行符分隔; 每条记录由字段组成, 字段间的分隔符是其它字符或字符串, 最常见的是逗号或制表符。建议使用WORDPAD或是记事本来开启，再则先另存新档后用EXCEL开启, 也是方法之一. </li>
<li>CSV文件格式的通用标准并不存在, 但是在RFC 4180中有基础性的描述. 使用的字符编码同样没有被指定. 是一种通用的、相对简单的文件格式, 被用户、商业和科学广泛应用. 最广泛的应用是在程序之间转移表格数据, 而这些程序本身是在不兼容的格式上进行操作的( 往往是私有的和/或无规范的格式). 因为大量程序都支持某种CSV变体, 至少是作为一种可选择的输入/输出格式. </li>
<li>简单讲, 是一种比较原始简单的表格/数据存储方式, 灵活性高, 可做客制化或临时存储 (例如, 加密存储某一列数据)</li>
</ol>
</blockquote>
<h1 id="文件的打开方式"><a href="#文件的打开方式" class="headerlink" title="文件的打开方式"></a>文件的打开方式</h1><table class="reference"> <tbody><tr><th style="width:10%">模式</th><th>描述</th></tr> <tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr> <tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。</td></tr> <tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr> <tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr> <tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr> <tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr> <tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr> <tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr> <tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr> <tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr> <tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr> <tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr> </tbody></table>
即
<font size="3">
<table class="reference">
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">r</th>
<th style="text-align:center">r+</th>
<th style="text-align:center">w</th>
<th style="text-align:center">w+</th>
<th style="text-align:center">a</th>
<th style="text-align:center">a+</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">读</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">写</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">覆盖</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">指针在开头</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">指针在结尾</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
</tbody>
</table>
</font>

<h1 id="CSV文件打开"><a href="#CSV文件打开" class="headerlink" title="CSV文件打开"></a>CSV文件打开</h1><div class="gallery ">
    <p>
    <div class="fancybox">
        <img src="/posts/4a50a5b7/使用Excel打开.png" alt="使用Excel打开">
        <span class="image-caption">使用Excel打开</span>
    </div><br>
    <div class="fancybox">
        <img src="/posts/4a50a5b7/使用记事本打开.png" alt="使用记事本打开">
        <span class="image-caption">使用记事本打开</span>
    </div>
    </p>
</div>

<h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h3 id="reader"><a href="#reader" class="headerlink" title="reader"></a>reader</h3><p><code>csv.reader(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line">exampleFile &#x3D; open(r&#39;E:\1.Python\csv\example.csv&#39;,&#39;r&#39;)</span><br><span class="line">exampleReader &#x3D; csv.reader(exampleFile)</span><br><span class="line">print(type(exampleReader))</span><br><span class="line">exampleData &#x3D; list(exampleReader)      # 转换成list. </span><br><span class="line">print(exampleData)</span><br><span class="line">exampleFile.close()</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p><code>&lt;class &#39;_csv.reader&#39;&gt;</code><br>[[‘Time’, ‘Food’, ‘quantity’], [‘4/5/2014 13:34’, ‘Apples’, ‘73’], [‘4/5/2014 3:41’, ‘Cherries’, ‘85’], [‘4/6/2014 12:46’, ‘Pears’, ‘14’], [‘4/8/2014 8:59’, ‘Oranges’,<br>‘52’], [‘4/10/2014 2:07’, ‘Apples’, ‘152’], [‘4/10/2014 18:10’, ‘Bananas’, ‘23’], [‘4/10/2014 2:40’, ‘Strawberries’, ‘98’]]<br>reader返回一个<code>reader</code>对象(迭代器)<br>那么,可以用<code>next(exampleReader)</code>来取 也可以用<code>for i in exampleReader</code> 来打印</p>
</blockquote>
<h3 id="DictReader"><a href="#DictReader" class="headerlink" title="DictReader"></a>DictReader</h3><p>与reader同理,只是一字典(Dict)的形式输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line">exampleFile &#x3D; open(r&#39;E:\1.Python\csv\example.csv&#39;,&#39;r&#39;)</span><br><span class="line">exampleReader &#x3D; csv.DictReader(exampleFile)</span><br><span class="line">print(type(exampleReader))</span><br><span class="line">print(next(exampleReader))  #调用next()试试</span><br><span class="line">for row in exampleReader:   #字典类型</span><br><span class="line">    print(row[&#39;Time&#39;])</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p><code>&lt;class &#39;csv.DictReader&#39;&gt;</code><br>{‘Time’: ‘4/5/2014 13:34’, ‘Food’: ‘Apples’, ‘quantity’: ‘73’}<br>4/5/2014 3:41<br>4/6/2014 12:46<br>4/8/2014 8:59<br>4/10/2014 2:07<br>4/10/2014 18:10<br>4/10/2014 2:40</p>
</blockquote>
<h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><h3 id="writer"><a href="#writer" class="headerlink" title="writer"></a>writer</h3><p><code>csv.writer(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exampleData &#x3D; [[&#39;Time&#39;, &#39;Food&#39;, &#39;quantity&#39;], [&#39;4&#x2F;5&#x2F;2014 13:34&#39;, &#39;Apples&#39;, &#39;73&#39;], [&#39;4&#x2F;5&#x2F;2014 3:41&#39;, &#39;Cherries&#39;, &#39;85&#39;], [&#39;4&#x2F;6&#x2F;2014 12:46&#39;, &#39;Pears&#39;, &#39;14&#39;], [&#39;4&#x2F;8&#x2F;2014 8:59&#39;, &#39;Oranges&#39;, </span><br><span class="line">&#39;52&#39;], [&#39;4&#x2F;10&#x2F;2014 2:07&#39;, &#39;Apples&#39;, &#39;152&#39;], [&#39;4&#x2F;10&#x2F;2014 18:10&#39;, &#39;Bananas&#39;, &#39;23&#39;], [&#39;4&#x2F;10&#x2F;2014 2:40&#39;, &#39;Strawberries&#39;, &#39;98&#39;]]</span><br><span class="line">with open(&#39;example_new.csv&#39;, &#39;w+&#39;, newline&#x3D;&#39;&#39;) as f:  # 如果不指定newline&#x3D;&#39;&#39;,有时则每写入一行将有一空行被写入</span><br><span class="line">    writer &#x3D; csv.writer(f)</span><br><span class="line">    for row in exampleData:</span><br><span class="line">        writer.writerow(row)</span><br></pre></td></tr></table></figure>
<p>先用<code>csv.writer</code>返回一个 writer 对象 可以将文件类对象上转换为带分隔符的字符串<br>然后再<code>writerow(row)</code>写入每一行 或者 用<code>writerows(rows)</code>将 迭代器rows 写入</p>
<blockquote>
<p>如果没有指定 newline=’’，则嵌入引号中的换行符将无法正确解析，并且在写入时，使用 \r\n 换行的平台会有多余的 \r 写入。由于 csv 模块会执行自己的（通用）换行符处理，因此指定 newline=’’ 应该总是安全的。</p>
</blockquote>
<h3 id="DictWriter"><a href="#DictWriter" class="headerlink" title="DictWriter"></a>DictWriter</h3><p>对象在操作上类似常规 writer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line">exampleFile &#x3D; open(r&#39;E:\1.Python\csv\example.csv&#39;,&#39;r&#39;)</span><br><span class="line">exampleReader &#x3D; csv.DictReader(exampleFile)</span><br><span class="line">with open(&#39;new.csv&#39;,&#39;w&#39;) as f:</span><br><span class="line">    fieldnames &#x3D; [&#39;Food&#39;,&#39;Time&#39;,&#39;quantity&#39;]</span><br><span class="line">    writer &#x3D; csv.DictWriter(f,fieldnames&#x3D;fieldnames)</span><br><span class="line">    writer.writerows(exampleReader)</span><br></pre></td></tr></table></figure>
<p>可以指定写入的顺序<br><code>[&#39;Food&#39;,&#39;quantity&#39;.&#39;Time&#39;] `` [&#39;Food&#39;,&#39;Time&#39;,&#39;quantity&#39;]</code></p>
<h1 id="fmtparams详见Python文档"><a href="#fmtparams详见Python文档" class="headerlink" title="fmtparams详见Python文档"></a><strong>fmtparams</strong>详见Python文档</h1><p><a class="btn-beautify button--animated outline" href="https://docs.python.org/zh-cn/3/library/csv.html#csv-fmt-params" target="_blank" rel="noopener" title="地址">地址</a></p><p></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>CSV文件读写</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JNU 抢课</title>
    <url>/posts/d0a7dd23.html</url>
    <content><![CDATA[<h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><div class="tabs" id="更新日志"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#更新日志-1">时间轴</button></li><li class="tab"><button type="button" data-href="#更新日志-2"><i class="fas fa-bomb"></i>Todo</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="更新日志-1"><div class="timeline red"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p>
</div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>06-09</p>
</div></div><div class="timeline-item-content"><p>开始写大概框架</p>
</div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>06-10</p>
</div></div><div class="timeline-item-content"><p>更新了解决验证码验证问题</p>
</div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>06-11</p>
</div></div><div class="timeline-item-content"><p>将学号,ck等信息放在json文件,下次登录直接从里面取即可</p>
</div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="更新日志-2"><p>实现抢课</p>
<p>将学号信息放在json文件中</p>
<p>区分超时和cookie过期的异常</p>
<p>第一时间异步抢课,而不是监控</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>三起三落的一天<br>（a老师挂科率大概5%，b老师挂科率33%）</p>
<ol>
<li>上午选课，好不容易卡进去，抢到a老师课了</li>
<li>结果教务处发通知，说由于名额的原因，班级学号前30%的人才能选，其他的一律会被强制改为b老师</li>
<li>一气之下写了个监控课程容量的脚本，结果被告知可能会被辅导员约谈</li>
<li>感觉气不过，凭什么我抢的课要被强制退掉，于是继续用上脚本</li>
<li>晚三节课上完，回来发现居然选上了</li>
<li>不知道会不会被退</li>
</ol>
<blockquote>
<ol>
<li>第二天直接被退了11:00,又加了验证码验证,不过30分钟后说可以抢了</li>
<li>在11:58抢到了</li>
</ol>
</blockquote>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ol>
<li>用selenium模拟登录,获取cookie和token</li>
<li>用cookie和token构建headers</li>
<li>间隔50s,进行课程容量查询</li>
<li>如果有剩余,则进行选课</li>
</ol>
<p>用中文写python,就是爽!简单明了<small>过几天有时间就写个教程吧</small></p>
<h2 id="选课"><a href="#选课" class="headerlink" title="选课"></a>选课</h2><p><kbd>F12</kbd> -&gt; 网络(network) -&gt; 正常选课 -&gt; 查看捕抓到的请求</p>
<p><img src="/posts/d0a7dd23/headers.png"></p>
<p>发现headers的cookie和token会变化,于是考虑这两个变量的获取</p>
<p><img src="/posts/d0a7dd23/headers2.png"></p>
<p>分析得到参数得到意思 <small>看英文名也可以看出一点点</small></p>
<blockquote>
<p>(这里我建议直接构建requests请求试试水,看看能不能请求成功,成功的话再把那些课程号什么的换成变量)<br><code>requests.get(url,headers,data)</code><br>由于是get,所以url链接中<code>?</code>后面的内容可以去掉(与data重复)<br>headers就是请求标头,字典的形式写出来<br>data就是负载中的数据,我建议点击<code>查看源</code>转化下格式</p>
</blockquote>
<p>试试看能不能请求成功,可以的话再把那些数据换成变量,能通用</p>
<p><small>其实如果自用的话这样就行了</small></p>
<p>过不久cookie就会过期,试了好久,结果发现用selenium来获取ck和token比较无脑…</p>
<h2 id="获取cookie和token"><a href="#获取cookie和token" class="headerlink" title="获取cookie和token"></a>获取cookie和token</h2><h3 id="初始化selenium"><a href="#初始化selenium" class="headerlink" title="初始化selenium"></a>初始化selenium</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = EdgeChromiumDriverManager().install()</span><br><span class="line">driver = webdriver.Edge(path)</span><br><span class="line">driver.get(<span class="string">&quot;https://jwxk.jnu.edu.cn/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h3><p>这部分用selenium的xpath来查找<br><img src="/posts/d0a7dd23/f12.png"></p>
<p>右键所选的元素,复制xpath路径</p>
<p><img src="/posts/d0a7dd23/%E5%8F%B3%E9%94%AE.png"></p>
<p>得到<code>//*[@id=&quot;un&quot;]</code>,用driver的find_element_by_xpath找到这个元素,填入学号</p>
<p><code>driver.find_element_by_xpath(&#39;填写xpath路径&#39;).send_keys(学号)</code></p>
<p>输入密码,点击登录同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;un&quot;]&#x27;</span>).send_keys(学号)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;pd&quot;]&#x27;</span>).send_keys(密码)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;index_login_btn&quot;]/input&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">driver.find_element_by_xpath(</span><br><span class="line">    <span class="string">&#x27;/html/body/div[4]/div[2]/div[2]/button&#x27;</span>).click()</span><br></pre></td></tr></table></figure>
<h3 id="登录成功-选择轮次"><a href="#登录成功-选择轮次" class="headerlink" title="登录成功,选择轮次"></a>登录成功,选择轮次</h3><p>这里我以为要用iframe的<code>driver.switch_to.frame(driver.find_element_by_xpath(&#39;//*[@id=&quot;frame的id&quot;]&#39;))</code>,试了半天结果不用…<br>服了…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">driver.find_element_by_xpath(</span><br><span class="line">    <span class="string">&#x27;//*[@id=&quot;courseBtn&quot;]&#x27;</span>).click()</span><br></pre></td></tr></table></figure>
<h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><p>这里稍微有点运气的成分。</p>
<p><img src="/posts/d0a7dd23/%E6%90%9C%E7%B4%A2token.png"><br>发现这两个地方都有出现token,于是立马查看他的标头,居然直接就可以访问url!于是立马用<code>driver.get()</code>获取内容的token值<br><img src="/posts/d0a7dd23/token.png"></p>
<p>这就简单了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.get(</span><br><span class="line">    <span class="string">&#x27;https://jwxk.jnu.edu.cn/xsxkapp/sys/xsxkapp/student/register.do?number=&#x27;</span>+学号)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">text = driver.find_element_by_xpath(<span class="string">&#x27;/html/body/pre&#x27;</span>).text</span><br><span class="line">print(text)</span><br><span class="line">token = json.loads(text)[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;token&#x27;</span>] <span class="comment">#获取token</span></span><br></pre></td></tr></table></figure>
<h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><p>driver有<code>get_cookies()</code>的方法,但是返回的是字典类型,所以需要拼接,我有点懒,首先想到的是用js获取cookie<br>但是发现获取的cookie不全,于是改用<code>get_cookies()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.execute_script(<span class="string">&#x27;return document.cookie&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookie = <span class="string">&#x27;&#x27;</span></span><br><span class="line">cookie = <span class="string">&#x27;Secure; Secure;&#x27;</span></span><br><span class="line">cookie_list = driver.get_cookies()</span><br><span class="line"><span class="keyword">for</span> cookie_i <span class="keyword">in</span> cookie_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> cookie_i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            cookie += cookie_i[<span class="string">&#x27;name&#x27;</span>] + <span class="string">&#x27;=&#x27;</span>+cookie_i[<span class="string">&#x27;value&#x27;</span>] + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        cookie += cookie_i[<span class="string">&#x27;value&#x27;</span>] + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">cookie += <span class="string">&#x27;Secure;&#x27;</span></span><br><span class="line"><span class="comment">## 拼接cookie</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="验证码验证"><a href="#验证码验证" class="headerlink" title="验证码验证"></a>验证码验证</h3><p>由于学校的验证码比较简单,把<code>验证码的元素</code>删掉就可以登了</p>
<p>(<kbd>F12</kbd> -&gt; 定位验证码元素 -&gt; 右键 -&gt; 删除元素)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck_</span>验证码(<span class="params">driver</span>):</span></span><br><span class="line">    js = <span class="string">&#x27;&#x27;&#x27;$(&quot;input[name=&#x27;NECaptchaValidate&#x27;]&quot;).remove();&#x27;&#x27;&#x27;</span></span><br><span class="line">    driver.execute_script(js)</span><br></pre></td></tr></table></figure>
<p><small>如果这个方法失效,那就用cv库来进行识别(希望不会用到)</small></p>
<p><strong>其他方法都大同小异,看下代码就懂啦</strong></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>1.4.0版本,过几天更新一下<small>(咕咕咕)</small></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> webdriver_manager.microsoft <span class="keyword">import</span> EdgeChromiumDriverManager</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">batchcode = <span class="string">&quot;93d8bcd46c0049b5b638c8873bb92838&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 获取<span class="title">ck_token</span>():</span></span><br><span class="line">    path = EdgeChromiumDriverManager().install()</span><br><span class="line">    driver = webdriver.Edge(path)</span><br><span class="line">    driver.get(<span class="string">&quot;https://jwxk.jnu.edu.cn/&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">## 模拟登录</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;un&quot;]&#x27;</span>).send_keys(学号)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;pd&quot;]&#x27;</span>).send_keys(密码)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;index_login_btn&quot;]/input&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    driver.find_element_by_xpath(</span><br><span class="line">        <span class="string">&#x27;/html/body/div[4]/div[2]/div[2]/button&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    driver.find_element_by_xpath(</span><br><span class="line">        <span class="string">&#x27;//*[@id=&quot;courseBtn&quot;]&#x27;</span>).click()</span><br><span class="line">    driver.get(</span><br><span class="line">        <span class="string">&#x27;https://jwxk.jnu.edu.cn/xsxkapp/sys/xsxkapp/student/register.do?number=&#x27;</span>+学号)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">## 获取并更新token</span></span><br><span class="line">    text = driver.find_element_by_xpath(<span class="string">&#x27;/html/body/pre&#x27;</span>).text</span><br><span class="line">    print(text)</span><br><span class="line">    token = json.loads(text)[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;token&#x27;</span>] <span class="comment">#获取token</span></span><br><span class="line">    <span class="comment">## 获取cookie</span></span><br><span class="line">    cookie = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    cookie = <span class="string">&#x27;Secure; Secure;&#x27;</span></span><br><span class="line">    cookie_list = driver.get_cookies()</span><br><span class="line">    <span class="keyword">for</span> cookie_i <span class="keyword">in</span> cookie_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> cookie_i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">                cookie += cookie_i[<span class="string">&#x27;name&#x27;</span>] + <span class="string">&#x27;=&#x27;</span>+cookie_i[<span class="string">&#x27;value&#x27;</span>] + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            cookie += cookie_i[<span class="string">&#x27;value&#x27;</span>] + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    cookie += <span class="string">&#x27;Secure;&#x27;</span></span><br><span class="line">    <span class="comment">## 拼接cookie</span></span><br><span class="line">    driver.quit()</span><br><span class="line">    <span class="keyword">return</span> cookie, token</span><br><span class="line"><span class="comment"># 选课</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 建立<span class="title">headers</span>(<span class="params">cookie=<span class="string">&#x27;&#x27;</span>, token=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie:</span><br><span class="line">        cookie, token = 获取ck_token()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;302&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Cookie&#x27;</span>: cookie,</span><br><span class="line">               <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;jwxk.jnu.edu.cn&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://jwxk.jnu.edu.cn&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://jwxk.jnu.edu.cn/xsxkapp/sys/xsxkapp/*default/grablessons.do?token=&#x27;</span>+token,</span><br><span class="line">               <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;98&quot;, &quot;Microsoft Edge&quot;;v=&quot;98&quot;&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">               <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 Edg/98.0.1108.56&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 选课(<span class="params">classId, headers</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://jwxk.jnu.edu.cn/xsxkapp/sys/xsxkapp/elective/volunteer.do&#x27;</span></span><br><span class="line">    param = <span class="string">&#x27;addParam=%7B%22data%22%3A%7B%22operationType%22%3A%221%22%2C%22studentCode%22%3A%22&#x27;</span>+学号+<span class="string">&#x27;%22%2C%22electiveBatchCode%22%3A%22&#x27;</span>+batchcode + \</span><br><span class="line">        <span class="string">&#x27;%22%2C%22teachingClassId%22%3A%22&#x27;</span>+classId + \</span><br><span class="line">            <span class="string">&#x27;%22%2C%22isMajor%22%3A%221%22%2C%22campus%22%3A%221%22%2C%22teachingClassType%22%3A%22QXKC%22%7D%7D&#x27;</span></span><br><span class="line">    a = requests.post(url=url, headers=headers, data=param).json()</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 查询选课人数(<span class="params">班号, headers</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://jwxk.jnu.edu.cn/xsxkapp/sys/xsxkapp/elective/publicCourse.do&#x27;</span></span><br><span class="line">    data = <span class="string">&#x27;querySetting=%7B%22data%22%3A%7B%22studentCode%22%3A%22&#x27;</span>+学号 + \</span><br><span class="line">        <span class="string">&#x27;%22%2C%22campus%22%3A%22%22%2C%22electiveBatchCode%22%3A%22&#x27;</span>+batchcode + \</span><br><span class="line">        <span class="string">&#x27;%22%2C%22isMajor%22%3A%221%22%2C%22teachingClassType%22%3A%22QXKC%22%2C%22isMajor%22%3A%221%22%2C%22queryContent%22%3A%22&#x27;</span> + \</span><br><span class="line">        班号+<span class="string">&#x27;%22%7D%2C%22pageSize%22%3A%2210%22%2C%22pageNumber%22%3A%220%22%2C%22order%22%3A%22%22%7D&#x27;</span></span><br><span class="line">    data_list = requests.post(url=url, headers=headers, data=data, allow_redirects=<span class="literal">False</span>).json()[</span><br><span class="line">        <span class="string">&#x27;dataList&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    已选人数 = data_list[<span class="string">&#x27;numberOfSelected&#x27;</span>]</span><br><span class="line">    课程名 = data_list[<span class="string">&#x27;courseName&#x27;</span>]</span><br><span class="line">    老师 = data_list[<span class="string">&#x27;teacherName&#x27;</span>]</span><br><span class="line">    课程容量 = data_list[<span class="string">&#x27;classCapacity&#x27;</span>]</span><br><span class="line">    剩下 = <span class="built_in">int</span>(课程容量)-<span class="built_in">int</span>(已选人数)</span><br><span class="line">    print(课程名+<span class="string">&#x27;\n老师:&#x27;</span>+老师+<span class="string">&#x27;\n剩下&#x27;</span>+<span class="built_in">str</span>(剩下)+<span class="string">&#x27;位置&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> 剩下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 抢课(<span class="params">cookie, token, 查询间隔</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie:</span><br><span class="line">        cookie, token = 获取ck_token()</span><br><span class="line">    headers = 建立headers(cookie, token)</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> class_id <span class="keyword">in</span> classId_list:</span><br><span class="line">                <span class="keyword">if</span> 查询选课人数(class_id, headers):  <span class="comment"># 有空位</span></span><br><span class="line">                    选课(class_id, headers)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            cookie, token = 获取ck_token()</span><br><span class="line">            headers = 建立headers(cookie, token)</span><br><span class="line">        time.sleep(查询间隔)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    学号 = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 必填</span></span><br><span class="line">    密码 = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 必填</span></span><br><span class="line">    <span class="comment">## 如果抢课的话,直接手动获取ck和token</span></span><br><span class="line">    cookie = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 选填</span></span><br><span class="line">    token = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 选填</span></span><br><span class="line">    查询间隔 = <span class="number">50</span> <span class="comment"># 防止被查</span></span><br><span class="line">    classId_list = []  <span class="comment"># 选课的班级号 班级号!班级号!班级号!</span></span><br><span class="line">    <span class="comment">#例子 classId_list = [&#x27;2222222222&#x27;,&#x27;2222222223&#x27;]</span></span><br><span class="line">    <span class="comment">## 其实就只是个监控的功能...</span></span><br><span class="line">    抢课(cookie, token, 查询间隔)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JNU</category>
        <category>抢课</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>requests</tag>
        <tag>selenium</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python进阶</title>
    <url>/posts/47f3f95c.html</url>
    <content><![CDATA[<h1 id="函数作为对象"><a href="#函数作为对象" class="headerlink" title="函数作为对象"></a>函数作为对象</h1><ol>
<li>定义一个函数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span>     </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;returns n!&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n * factorial(n-<span class="number">1</span>)  <span class="comment"># factorial:阶乘, 这里用的是递归调用</span></span><br></pre></td></tr></table></figure>
<ol>
<li>调用函数,读取他的__doc__属性<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(factorial(42))</span><br><span class="line">print(factorial.__doc__)</span><br><span class="line">print(type(factorial))</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>1405006117752879898543142606244511569936384000000000<br>returns n!<br><code>&lt;class &#39;function&#39;&gt;</code></p>
</blockquote>
</li>
</ol>
<h1 id="函数用作参数"><a href="#函数用作参数" class="headerlink" title="函数用作参数"></a>函数用作参数</h1><p>定义一个打印的方式<br>定义一个默认的打印方式,把<code>变量</code> 指向<code>print</code>函数 那么这个变量就和<code>print</code> 一样了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def print_score_dict(dict):</span><br><span class="line">    for k in dict.keys():</span><br><span class="line">        print(&#39;姓名: &#123;:s&#125; ; 成绩: &#123;&#125;&#39;.format(k,dict[k]))</span><br><span class="line">def displace_exam_score(print_function&#x3D;print):</span><br><span class="line">    exam_score &#x3D; &#123;&#39;赵一&#39;:92, &#39;陈二&#39;:83, &#39;张三&#39;:87, &#39;李四&#39;:88, &#39;王五&#39;:85&#125;</span><br><span class="line">    print_function(exam_score)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">displace_exam_score()      # 函数对象也可做缺省参数</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>{‘赵一’: 92, ‘陈二’: 83, ‘张三’: 87, ‘李四’: 88, ‘王五’: 85}</p>
</blockquote>
<p>由于有默认值,可以不用在括号内填写</p>
<p>调用自己的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">displace_exam_score(print_function&#x3D;print_score_dict)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>姓名: 赵一 ; 成绩: 92<br>姓名: 陈二 ; 成绩: 83<br>姓名: 张三 ; 成绩: 87<br>姓名: 李四 ; 成绩: 88<br>姓名: 王五 ; 成绩: 85</p>
</blockquote>
<p>以自己定义的方式打印</p>
<p>总的来说</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; print</span><br><span class="line">a(&#39;123&#39;)</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(print))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>123<br><code>&lt;class &#39;builtin_function_or_method&#39;&gt;</code><br><code>&lt;class &#39;builtin_function_or_method&#39;&gt;</code></p>
</blockquote>
<p>把 <code>a</code>定义为<code>print</code>,那么<code>a</code>就和 <code>print</code>一样了,也就有了打印的功能</p>
<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>匿名函数又称为Lamda函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; lambda x,y: x + y</span><br><span class="line">print(a(1,2))</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>3<br><code>&lt;class &#39;function&#39;&gt;</code></p>
</blockquote>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p><strong>接受函数为参数</strong>, 或者把函数作为结果返回的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fruits &#x3D; [&#39;strawberry&#39;, &#39;fig&#39;, &#39;apple&#39;, &#39;cherry&#39;, &#39;raspberry&#39;, &#39;banana&#39;]</span><br><span class="line">a &#x3D; sorted(fruits, key&#x3D;len)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>比如sorted,让<code>key</code>传入<code>len</code>这个函数</p>
<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>格式 : map(func , Iterable)<br>例如 计算 x&sup2;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">    return x * x</span><br><span class="line"></span><br><span class="line">r &#x3D; map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">print(list(r))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>[1, 4, 9, 16, 25, 36, 49, 64, 81]<br>先定义一个函数,再对每一个值进行该操作</p>
</blockquote>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p><code>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">def fn(x, y):</span><br><span class="line">    return x * 10 + y</span><br><span class="line">print(reduce(fn, [1, 3, 5, 7, 9]))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>13579</p>
</blockquote>
<ol>
<li>1&times;10 + 3 = 13</li>
<li>13&times;10 + 5 = 135<br>…</li>
</ol>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>过滤函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def is_odd(n):</span><br><span class="line">    return n % 2 &#x3D;&#x3D; 1</span><br><span class="line"></span><br><span class="line">a &#x3D; list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>[1, 5, 9, 15]</p>
</blockquote>
<h2 id="map、filter-替代"><a href="#map、filter-替代" class="headerlink" title="map、filter 替代"></a>map、filter 替代</h2><p>用列表生成器<br><code>[funtion(x) for x in range(xxxx) if xxx]</code></p>
<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="被修饰无参数"><a href="#被修饰无参数" class="headerlink" title="被修饰无参数"></a>被修饰无参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># funA 作为装饰器函数</span><br><span class="line">def funA(fn):</span><br><span class="line">    print(&quot;funA1&quot;)</span><br><span class="line">    fn() # 执行传入的fn参数</span><br><span class="line">    print(&quot;funA2&quot;)</span><br><span class="line">    return &#39;我是funA&#39;</span><br><span class="line">@funA</span><br><span class="line">def funB():</span><br><span class="line">    print(&quot;funB&quot;)</span><br><span class="line">    return &#39;我是funB&#39;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>funA1<br>funB<br>funA2<br>传入的<code>fn</code> 就是传入的函数<code>funB</code><br>funB 作为 funA() 的参数传入</p>
</blockquote>
<ul>
<li>等价于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def funA(fn):</span><br><span class="line">    print(&quot;funA1&quot;)</span><br><span class="line">    fn() # 执行传入的fn参数</span><br><span class="line">    print(&quot;funA2&quot;)</span><br><span class="line">    return &#39;我是funA&#39;</span><br><span class="line">def funB():</span><br><span class="line">    print(&quot;funB&quot;)</span><br><span class="line">    return &#39;我是funB&#39;</span><br><span class="line">funA(funB)</span><br></pre></td></tr></table></figure>
如果在最后加上<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(funB)</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>我是funA<br>返回的是funA的返回值</p>
</blockquote>
</li>
</ul>
<hr>
<p>同理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@funA</span><br><span class="line">@funB</span><br><span class="line">@funC</span><br><span class="line">def fun():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<ul>
<li>等价于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun &#x3D; funA(funB(funC(fun)))</span><br></pre></td></tr></table></figure>
从上到下,函数从外到内</li>
</ul>
<h2 id="被修饰有参数"><a href="#被修饰有参数" class="headerlink" title="被修饰有参数"></a>被修饰有参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#funA 作为装饰器函数</span><br><span class="line">def funA(fn):</span><br><span class="line">    def funC(abc):</span><br><span class="line">        print(&#39;funC&#39;, abc)</span><br><span class="line">    return funC</span><br><span class="line">@funA</span><br><span class="line">def funB(ab):</span><br><span class="line">    print(&quot;funB&quot;,ab)</span><br><span class="line">funB(&#39;123&#39;)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>funC 123</p>
</blockquote>
<p>由于funA 返回了 funC 是一个函数 , 那么funB(被修饰的函数)的传入值<code>ab</code>就变成funC的传入值<code>abc</code></p>
<ul>
<li>等价于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def funA(fn):</span><br><span class="line">    def funC(abc):</span><br><span class="line">        print(&#39;funC&#39;, abc)</span><br><span class="line">    return funC</span><br><span class="line">def funB(abc):</span><br><span class="line">    print(&quot;funB()&quot;, abc)</span><br><span class="line">funB &#x3D; funA(funB)</span><br><span class="line">funB(&#39;123&#39;)</span><br></pre></td></tr></table></figure>
就是对funA传入的函数为funB 再保存为funB</li>
</ul>
<p>让 funC = funB , funB 的参数放在funC中<br>我们虽然在调用funB,实际上是在运行funC</p>
<h2 id="传入多个参数"><a href="#传入多个参数" class="headerlink" title="传入多个参数"></a>传入多个参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def funA(fn):</span><br><span class="line">    # 定义一个嵌套函数</span><br><span class="line">    def funC(*args,**kwargs):</span><br><span class="line">        fn(*args,**kwargs)</span><br><span class="line">    return funC</span><br><span class="line">@funA</span><br><span class="line">def funB1(abc):</span><br><span class="line">    print(&quot;funB1&quot;,abc)</span><br><span class="line">@funA</span><br><span class="line">def funB2(name,abc):</span><br><span class="line">    print(name,abc)</span><br><span class="line">funB1(123)</span><br><span class="line">funB2(&quot;funB2&quot;,&quot;123&quot;)</span><br></pre></td></tr></table></figure>
<p>由于数量未知 在funC内传入<code>*args </code>和<code>**kwargs</code>作为装饰器内部嵌套函数的参数</p>
<ol>
<li>*args的用法：当传入的参数个数未知，且不需要知道参数名称时</li>
<li>**kwargs的用法：当传入的参数个数未知，但需要知道参数的名称时(比如 : 字典)</li>
</ol>
<ul>
<li>*xxx 和 **xxx<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for key in kwargs:</span><br><span class="line">    print(key,kwargs[key])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h1><p>偏函数<br>与数学上的偏函数不同 修改函数的默认值<br>比如 int </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(int(&#39;111&#39;))</span><br><span class="line">print(int(&#39;111&#39;,base&#x3D;10))</span><br><span class="line">print(int(&#39;111&#39;,base&#x3D;2))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>111<br>111<br>7</p>
</blockquote>
<p>int 默认为10进制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import functools</span><br><span class="line">int2 &#x3D; functools.partial(int, base&#x3D;2)</span><br><span class="line">print(int2(&#39;111&#39;))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>7</p>
</blockquote>
<p>就是把int的默认值修改,保存为int2</p>
<ul>
<li>等价于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def int2(x, base&#x3D;2):</span><br><span class="line">    return int(x, base)</span><br></pre></td></tr></table></figure>
<h1 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h1></li>
</ul>
<p>枚举函数</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(sequence, [start=<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>start可选,默认从0开始</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seasons = [<span class="string">&#x27;Spring&#x27;</span>, <span class="string">&#x27;Summer&#x27;</span>, <span class="string">&#x27;Fall&#x27;</span>, <span class="string">&#x27;Winter&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons, start=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<blockquote>
<p>[(1, ‘Spring’), (2, ‘Summer’), (3, ‘Fall’), (4, ‘Winter’)]</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>高阶函数</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 入门</title>
    <url>/posts/2ca5e5d6.html</url>
    <content><![CDATA[<p>vscode 中 输入!可以开始套模板</p>
<h1 id="标题写法"><a href="#标题写法" class="headerlink" title="标题写法"></a>标题写法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;一级标题&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;二级标题&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;三级标题&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4&gt;四级标题&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5&gt;五级标题&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;h6&gt;六级标题&lt;&#x2F;h6&gt;</span><br></pre></td></tr></table></figure>
<h1>一级标题</h1>
<h2>二级标题</h2>
<h3>三级标题</h3>
<h4>四级标题</h4>
<h5>五级标题</h5>
<h6>六级标题</h6>

<hr>
<h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;这是一个段落&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;在文字中,用&lt;br&#x2F;&gt;可以换行&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<p>这是一个段落</p>
<p>在文字中,用<br>可以换行</p>

<ul>
<li>区别: <blockquote>
<ol>
<li><code>&lt;p&gt;&lt;/p&gt;</code>和<code>&lt;p&gt;&lt;/p&gt;</code>之间会有一个空行</li>
<li><code>&lt;br/&gt;</code>只有一个,不是一对</li>
</ol>
</blockquote>
</li>
</ul>
<hr>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;strong&gt;加粗&lt;&#x2F;strong&gt;或&lt;b&gt;加粗&lt;&#x2F;b&gt;</span><br><span class="line">&lt;em&gt;倾斜&lt;&#x2F;em&gt;或&lt;i&gt;倾斜&lt;&#x2F;i&gt;</span><br><span class="line">&lt;del&gt;删除线&lt;&#x2F;del&gt;或&lt;s&gt;删除线&lt;&#x2F;s&gt;</span><br><span class="line">&lt;ins&gt;下划线&lt;&#x2F;ins&gt;或&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br><span class="line">&lt;big&gt;大&lt;&#x2F;big&gt; &lt;big&gt;&lt;big&gt;&lt;big&gt;&lt;big&gt;大&lt;&#x2F;big&gt;&lt;&#x2F;big&gt;&lt;&#x2F;big&gt;&lt;&#x2F;big&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>加粗</strong>或<b>加粗</b><br><em>倾斜</em>或<i>倾斜</i><br><del>删除线</del>或<s>删除线</s><br><ins>下划线</ins>或<u>下划线</u><br><big>大</big> <big><big><big><big>大</big></big></big></big></p>
<hr>
<h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><table>
<thead>
<tr>
<th align="center">特殊符号</th>
<th align="center">描述</th>
<th align="left">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">空格</td>
<td align="left"><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于号</td>
<td align="left"><code>&amp;lt;</code></td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于号</td>
<td align="left"><code>&amp;gt;</code></td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">和号</td>
<td align="left"><code>&amp;amp;</code></td>
</tr>
<tr>
<td align="center">￥</td>
<td align="center">人民币</td>
<td align="left"><code>yen;</code></td>
</tr>
<tr>
<td align="center">&copy;</td>
<td align="center">版权</td>
<td align="left"><code>&amp;copy;</code></td>
</tr>
<tr>
<td align="center">&reg;</td>
<td align="center">注册商标</td>
<td align="left"><code>&amp;reg;</code></td>
</tr>
<tr>
<td align="center">&deg;</td>
<td align="center">摄氏度</td>
<td align="left"><code>&amp;deg;</code></td>
</tr>
<tr>
<td align="center">&plusmn;</td>
<td align="center">正负号</td>
<td align="left"><code>&amp;plusmn;</code></td>
</tr>
<tr>
<td align="center">&times;</td>
<td align="center">乘号</td>
<td align="left"><code>&amp;times;</code></td>
</tr>
<tr>
<td align="center">&divide;</td>
<td align="center">除号</td>
<td align="left"><code>&amp;divide;</code></td>
</tr>
<tr>
<td align="center">&sup2;</td>
<td align="center">平方</td>
<td align="left"><code>&amp;sup2;</code></td>
</tr>
<tr>
<td align="center">&sup3;</td>
<td align="center">立方</td>
<td align="left"><code>&amp;sup3;</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;一行&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;又一行&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span&gt;一行&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span&gt;还是在这一行&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>
<div>一行</div>
<div>又一行</div>
<span>一行</span>
<span>还是在这一行</span>

<hr>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;天空.jpg&quot; alt&#x3D;&quot;图片加载不了显示的内容&quot; title&#x3D;&quot;标题&quot; width&#x3D;&quot;150&quot; height&#x3D;&quot;150&quot; border&#x3D;&quot;10&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<img src="/posts/2ca5e5d6/没有图片.jpg" alt="图片加载不了显示的内容" title="标题" width="150" height="150" border="10">

<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">名称</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">src</td>
<td>中可以放url或路径</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">alt</td>
<td>表示 图片加载不了的话显示的内容</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">title</td>
<td>标题</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">width</td>
<td>宽</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">height</td>
<td>高</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">border</td>
<td>边框大小</td>
</tr>
</tbody></table>
<hr>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot; target&#x3D;&quot;_self&quot;&gt;百度&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.baidu.com" target="_self">百度</a></p>
<ol>
<li>href 放入链接</li>
<li>target 打开方式<blockquote>
<ul>
<li>在本身页面 _self</li>
<li>新的页面 _blank</li>
<li>默认为_self</li>
</ul>
</blockquote>
</li>
<li><code>&lt;a&gt;</code>和<code>&lt;/a&gt;</code>之间的为内容</li>
<li>内部链接不用加入http</li>
<li>可用# 代替为空标签</li>
<li>锚点链接<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#目标位置&quot;&gt;转跳&lt;&#x2F;a&gt;</span><br><span class="line">&lt;h1 id&#x3D;&quot;目标位置&quot;&gt;目标&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt; &lt;th&gt;第一列&lt;&#x2F;th&gt; &lt;th&gt;第二列&lt;&#x2F;th&gt; &lt;th&gt;第三列&lt;&#x2F;th&gt; &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;(1,1)&lt;&#x2F;td&gt; &lt;td&gt;(1,2)&lt;&#x2F;td&gt; &lt;td&gt;(1,3)&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;(2,1)&lt;&#x2F;td&gt; &lt;td&gt;(2,2)&lt;&#x2F;td&gt; &lt;td&gt;(2,3)&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;(3,1)&lt;&#x2F;td&gt; &lt;td&gt;(3,2)&lt;&#x2F;td&gt; &lt;td&gt;(3,3)&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>
<table align="center">
    <tr> <th>第一列</th> <th>第二列</th> <th>第三列</th> </tr>
    <tr> <td>(1,1)</td> <td>(1,2)</td> <td>(1,3)</td> </tr>
    <tr> <td>(2,1)</td> <td>(2,2)</td> <td>(2,3)</td> </tr>
    <tr> <td>(3,1)</td> <td>(3,2)</td> <td>(3,3)</td> </tr>

</table>
<div class="note info simple"><p><big><big><big><br>tr : table row<br>td : table data<br>th : table head<br></big></big></big></p>
</div>

<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;2&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
    <li>1</li>
    <li>2</li>
</ul>

<h2 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;2&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>
<ol>
    <li>1</li>
    <li>2</li>
</ol>

<blockquote>
<p><code>&lt;ul&gt;&lt;/ul&gt;</code>之间和<code>&lt;ol&gt;&lt;/ol&gt;</code>之间里面只能放 <code>&lt;li&gt;&lt;/li&gt;</code></p>
</blockquote>
<h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;title&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;data&lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dt&gt;title&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;data&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>
<dl>
    <dt>title</dt>
    <dd>data</dd>
    <dt>title</dt>
    <dd>data</dd>
</dl>

<blockquote>
<p><code>&lt;dl&gt;&lt;/dl&gt;</code>之间只能放<code>&lt;dt&gt;&lt;/dt&gt;</code> <code>&lt;dd&gt;&lt;/dd&gt;</code> </p>
</blockquote>
<hr>
<h1 id="表格-1"><a href="#表格-1" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;url&quot; method&#x3D;&quot;post&#x2F;get&quot; name&#x3D;&quot;表单名&quot;&gt;...........&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>………..</p>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&#39;usn&#39; value&#x3D;&quot;用户名&quot; maxlength&#x3D;&quot;3&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;psd&quot; &gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;dxo&quot;&gt;单选1.&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&#39;dan&#39; id&#x3D;&quot;dxo&quot;&gt; &lt;label for&#x3D;&quot;dx2&quot;&gt;单选2.&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&#39;dan&#39; id&#x3D;&quot;dx2&quot;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">复选1.&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot; name&#x3D;&#39;duo1&#39;&gt;复选2.&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&#39;duo2&#39;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;这是一个按钮&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; value&#x3D;&quot;上传图片&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&gt; &lt;input type&#x3D;&#39;submit&#39;&gt;</span><br></pre></td></tr></table></figure>
<pre><code>    &lt;input type=&quot;text&quot; name=&#39;usn&#39; value=&quot;用户名&quot; maxlength=&quot;3&quot; /&gt;&lt;br/&gt;
    &lt;input type=&quot;password&quot; name=&quot;psd&quot; &gt;&lt;br/&gt;
    &lt;label for=&quot;dxo&quot;&gt;单选1.&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&#39;dan&#39; id=&quot;dxo&quot;&gt; &lt;label for=&quot;dx2&quot;&gt;单选2.&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&#39;dan&#39; id=&quot;dx2&quot;&gt;&lt;br/&gt;
    复选1.&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; name=&#39;duo1&#39;&gt;复选2.&lt;input type=&quot;checkbox&quot; name=&#39;duo2&#39;&gt;&lt;br/&gt;
    &lt;input type=&quot;button&quot; value=&quot;这是一个按钮&quot; /&gt;&lt;br/&gt;
    &lt;input type=&quot;file&quot; value=&quot;上传图片&quot; /&gt;&lt;br/&gt;
    &lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt; &lt;input type=&#39;submit&#39;&gt;
</code></pre>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;option&gt;第一&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;第二&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;第三&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option selected&#x3D;&quot;selected&quot;&gt;第四&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>
<pre><code>&lt;select&gt;
    &lt;option&gt;第一&lt;/option&gt;
    &lt;option&gt;第二&lt;/option&gt;
    &lt;option&gt;第三&lt;/option&gt;
    &lt;option selected=&quot;selected&quot;&gt;第四&lt;/option&gt;
&lt;/select&gt;
</code></pre>
<h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;textarea&gt;123&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure>
<p><textarea>123</textarea></p>
<p>将上面的封装到表格中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;url&quot; method&#x3D;&quot;post&#x2F;get&quot; name&#x3D;&quot;表单名&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&#39;usn&#39; value&#x3D;&quot;用户名&quot; maxlength&#x3D;&quot;3&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;psd&quot; &gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;dxo&quot;&gt;单选1.&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&#39;dan&#39; id&#x3D;&quot;dxo&quot;&gt; &lt;label for&#x3D;&quot;dx2&quot;&gt;单选2.&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&#39;dan&#39; id&#x3D;&quot;dx2&quot;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    复选1.&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot; name&#x3D;&#39;duo1&#39;&gt;复选2.&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&#39;duo2&#39;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;这是一个按钮&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; value&#x3D;&quot;上传图片&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&gt; &lt;input type&#x3D;&#39;submit&#39;&gt;</span><br><span class="line"></span><br><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;option&gt;第一&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;第二&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;第三&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option selected&#x3D;&quot;selected&quot;&gt;第四&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;textarea&gt;123&lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<form action="url" method="post/get" name="表单名">
        <input type="text" name="usn" value="用户名" maxlength="3"><br>
        <input type="password" name="psd"><br>
        <label for="dxo">单选1.</label><input type="radio" name="dan" id="dxo"> <label for="dx2">单选2.</label><input type="radio" name="dan" id="dx2"><br>
        复选1.<input type="checkbox" checked="checked" name="duo1">复选2.<input type="checkbox" name="duo2"><br>
       <select>
            <option>第一</option>
            <option>第二</option>
            <option>第三</option>
            <option selected="selected">第四</option>
        </select><br>
        <textarea>123</textarea><br>
        <input type="button" value="这是一个按钮"><br>
        <input type="file" value="上传图片"><br>
        <input type="reset" value="重置"> 
        <input type="submit">
</form>

<p>&nbsp;</p>
<blockquote>
<div class="tip info"><p>action填url
method填方式
name填表格名
</p></div></blockquote>
<p>

<blockquote>
<p><code>&lt;input type=&quot;xxx&quot;&gt;</code>是框架<br><big><strong>name</strong></big>: 发送数据的名字<br><big><strong>value</strong></big>: 默认值<br><big><strong>checked / selected</strong></big>:默认选中默认选中</p>
</blockquote>
<div class="snote idea yellow"><p>单选的话，要有相同的 name才会被认为是同一个</p></div>
<div class="tip wtgo font5 fas fa-bolt"><p>在checkbox和radio中加入id  在的对应的文字加入&lt;label for='idname'&gt;即可以通过文字来点击按钮</p><p></p></div>
</p>]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序 基础</title>
    <url>/posts/f278d0da.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong><strong><strong><strong><strong><strong>这篇博客的目的是为了方便查阅 </strong></strong></strong></strong></strong></strong></p>
<h1 id="全局配置-app-json"><a href="#全局配置-app-json" class="headerlink" title="全局配置 app.json"></a>全局配置 app.json</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html" target="_blank" rel="noopener" title="打开">app.json</a></p>
<ol>
<li>在微信开发者工具下,在”pages”下添加页面会自动创建目录</li>
<li>pages 字段⸺⽤于描述当前⼩程序所有⻚⾯路径，这是为了让微信客⼾端知道当前你的⼩程序<br>⻚⾯定义在哪个⽬录。</li>
<li>window 字段⸺定义⼩程序所有⻚⾯的顶部背景颜⾊，⽂字颜⾊定义等。</li>
</ol>
<h1 id="导航栏-tabBar"><a href="#导航栏-tabBar" class="headerlink" title="导航栏 tabBar"></a>导航栏 tabBar</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar" target="_blank" rel="noopener" title="打开">tabBar</a></p>
<p><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/tabbar.ce1b3c5b.png"></p>
<h1 id="页面配置-page-json"><a href="#页面配置-page-json" class="headerlink" title="页面配置 page.json"></a>页面配置 page.json</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener" title="打开">page.json</a></p>
<p>⻚⾯的配置只能设置<code>app.json</code>中部分<code>window</code>配置项的内容，⻚⾯中配置项会<code>覆盖 `` app.json</code><br>的<code>window</code>中相同的配置项。</p>
<h1 id="索引-sitemap"><a href="#索引-sitemap" class="headerlink" title="索引 sitemap"></a>索引 sitemap</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html" target="_blank" rel="noopener" title="打开">sitemap</a></p>
<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/data.html#%E5%86%85%E5%AE%B9" target="_blank" rel="noopener" title="打开">数据绑定</a></p>
<h2 id="简单绑定"><a href="#简单绑定" class="headerlink" title="简单绑定"></a>简单绑定</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view&gt; &#123;&#123; message &#125;&#125; &lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello MINA!&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view id&#x3D;&quot;item-&#123;&#123;id&#125;&#125;&quot;&gt; &lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    id: <span class="number">0</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="布尔值-bool"><a href="#布尔值-bool" class="headerlink" title="布尔值 bool"></a>布尔值 bool</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;checkbox checked&#x3D;&quot;&#123;&#123;false&#125;&#125;&quot;&gt; &lt;&#x2F;checkbox&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>布尔值 “true“ <code>一定要加&#123;&#123;&#125;&#125;</code> <code>需要在双引号之内</code><br><em><strong>特别注意：不要直接写 <code>checked="false"</code>，其计算结果是一个字符串，转成 boolean 类型后代表真值。</strong></em></p>
</blockquote>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><h3 id="算数运算-…"><a href="#算数运算-…" class="headerlink" title="算数运算 …"></a>算数运算 …</h3><hr>
<h1 id="列表渲染-wx-for"><a href="#列表渲染-wx-for" class="headerlink" title="列表渲染 wx:for"></a>列表渲染 wx:for</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html" target="_blank" rel="noopener" title="打开">列表渲染</a></p>
<p>wx:for<br>在组件上使用 <code>wx:for</code>控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。</p>
<p>默认数组的当前项的下标变量名默认为<code>index</code>，数组当前项的变量名默认为<code>item</code></p>
<p>使用<code>wx:for-item</code>可以指定数组当前元素的变量名 相当于 <code>value</code></p>
<p>使用<code>wx:for-index</code>可以指定数组当前下标的变量名 相当于 <code>key</code></p>
<h1 id="条件渲染-wx-if"><a href="#条件渲染-wx-if" class="headerlink" title="条件渲染 wx:if"></a>条件渲染 wx:if</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html" target="_blank" rel="noopener" title="打开"> 条件渲染</a><br>频繁切换 ⽤ hidden</p>
<h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><ol>
<li>input<br><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html" target="_blank" rel="noopener" title="打开"> input</a></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input bindinput&#x3D;&quot;handleInput&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">// 绑定的事件</span></span><br><span class="line">  handleInput: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;值被改变了&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>传数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input bindinput&#x3D;&quot;handleInput&quot; data-item&#x3D;&quot;100&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>通过log获取值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> handleInput: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// &#123;item:100&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(e.currentTarget.dataset)</span><br><span class="line">   <span class="comment">//找到 item的位置</span></span><br><span class="line">     </span><br><span class="line">   <span class="comment">// 输入框的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(e.detail.value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> item = e.currentTarget.dataset.item;</span><br><span class="line">  <span class="comment">//赋值</span></span><br><span class="line">  <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">     num:<span class="built_in">this</span>.data.num+item</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">//给data里的num赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html" target="_blank" rel="noopener" title="打开">wxss</a></p>
<p>导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &quot;common.wxss&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>rpx : 可以根据屏幕宽度进⾏⾃适应。规定屏幕宽为 750rpx</li>
</ul>
<h1 id="使用less"><a href="#使用less" class="headerlink" title="使用less"></a>使用less</h1><h1 id="常⻅组件"><a href="#常⻅组件" class="headerlink" title="常⻅组件"></a>常⻅组件</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html" target="_blank" rel="noopener" title="打开">常⻅组件</a></p>
<h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/" target="_blank" rel="noopener" title="打开">自定义组件</a></p>
<h1 id="⼩程序⽣命周期"><a href="#⼩程序⽣命周期" class="headerlink" title="⼩程序⽣命周期"></a>⼩程序⽣命周期</h1><p>分为应⽤⽣命周期和⻚⾯⽣命周期</p>
<h2 id="应⽤⽣命周期"><a href="#应⽤⽣命周期" class="headerlink" title="应⽤⽣命周期"></a>应⽤⽣命周期</h2><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html" target="_blank" rel="noopener" title="打开">应⽤⽣命周期</a></p>
<h2 id="⻚⾯⽣命周期"><a href="#⻚⾯⽣命周期" class="headerlink" title="⻚⾯⽣命周期"></a>⻚⾯⽣命周期</h2><p><a class="btn-beautify button--animated outline" href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html" target="_blank" rel="noopener" title="打开">⻚⾯⽣命周期</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a class="btn-beautify button--animated outline" href="https://www.bilibili.com/video/BV1WJ41197sD" target="_blank" rel="noopener" title="下载">B站视频</a><br><a class="btn-beautify button--animated outline" href="https://gitee.com/xiaoqiang001/small_program/blob/master/01-%E6%96%87%E6%A1%A3/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80.pdf
" target="_blank" rel="noopener" title="下载">笔记</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 多任务异步</title>
    <url>/posts/1eb74de0.html</url>
    <content><![CDATA[<h1 id="模拟堵塞环境"><a href="#模拟堵塞环境" class="headerlink" title="模拟堵塞环境"></a>模拟堵塞环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">app &#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;qqq&#39;)</span><br><span class="line">def index_qqq():</span><br><span class="line">    sleep(2)</span><br><span class="line">    return &#39;qqq&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;www&#39;)</span><br><span class="line">def index_www():</span><br><span class="line">    sleep(2)</span><br><span class="line">    return &#39;www&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;eee&#39;)</span><br><span class="line">def index_eee():</span><br><span class="line">    sleep(2)</span><br><span class="line">    return &#39;eee&#39;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    app.run(threaded&#x3D;True)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>堵塞2秒后加载</p>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="普通的爬取"><a href="#普通的爬取" class="headerlink" title="普通的爬取"></a>普通的爬取</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls &#x3D; [&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;qqq&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;www&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;eee&#39;]</span><br><span class="line">start &#x3D; time.time()</span><br><span class="line"></span><br><span class="line">for url in urls:</span><br><span class="line">    page &#x3D; requests.get(url)</span><br><span class="line">    print(page.text)</span><br><span class="line">print(f&#39;总共花费&#123;time.time() - start&#125;s&#39;)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/1eb74de0/%E6%99%AE%E9%80%9A%E7%88%AC%E5%8F%96.png" alt="普通爬取"><br>总共用时6秒 有点慢</p>
<h2 id="线程池异步"><a href="#线程池异步" class="headerlink" title="线程池异步"></a>线程池异步</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from multiprocessing.dummy import Pool</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">urls &#x3D; [&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;qqq&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;www&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;eee&#39;]</span><br><span class="line">pool &#x3D; Pool(3)</span><br><span class="line">start &#x3D; time.time()</span><br><span class="line">def get_request(url):</span><br><span class="line">    return requests.get(url).text</span><br><span class="line">response &#x3D; pool.map(get_request,urls)</span><br><span class="line">print(response)</span><br><span class="line"># 模拟解析</span><br><span class="line">def get_len(response):</span><br><span class="line">    return len(response)</span><br><span class="line">re_len &#x3D; pool.map(get_len,response)</span><br><span class="line">print(re_len)</span><br><span class="line">print(f&#39;总共花费&#123;time.time() - start&#125;s&#39;)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/1eb74de0/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png" alt="线程池"><br>快了许多<br><code>pool = Pool(3)</code> 新建3线程<br><code>pool.map()</code> 对每个线程进行处理<br>map的格式 <code>map(函数,对象)</code></p>
<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import aiohttp</span><br><span class="line">from lxml import etree</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">now &#x3D; lambda :time.time()</span><br><span class="line"></span><br><span class="line">def callback(task):</span><br><span class="line">    page_text &#x3D; task.result()</span><br><span class="line">    tree &#x3D; etree.HTML(page_text)</span><br><span class="line">    text &#x3D; tree.xpath(&#39;&#x2F;&#x2F;p&#x2F;text()&#39;)</span><br><span class="line">    print(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def res(url):</span><br><span class="line">    async with aiohttp.ClientSession() as s:</span><br><span class="line">        async with await s.get(url) as resopnse:</span><br><span class="line">            page_text &#x3D; await resopnse.text()</span><br><span class="line">            return page_text</span><br><span class="line">#with 前加 async 在 阻塞前加 await</span><br><span class="line">    return f&#39;&#123;url&#125;请求结束&#39;</span><br><span class="line">start &#x3D; now()</span><br><span class="line"></span><br><span class="line"># 协程对象</span><br><span class="line">urls &#x3D; [&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;qqq&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;www&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;eee&#39;]</span><br><span class="line">tasks &#x3D; []</span><br><span class="line">for url in urls:# 每个url要进行的操作</span><br><span class="line">    # 协程对象</span><br><span class="line">    coroutine &#x3D; res(url)</span><br><span class="line">    # 封装成任务对象</span><br><span class="line">    task &#x3D; asyncio.ensure_future(coroutine)</span><br><span class="line">    # 回调</span><br><span class="line">    task.add_done_callback(callback)</span><br><span class="line">    tasks.append(task)</span><br><span class="line"># 创建一个事件loop</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line"># 添加回调</span><br><span class="line"></span><br><span class="line"># 将任务对象加入到事件循环loop </span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">print(f&quot;Time: &#123;now() - start&#125; s&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/1eb74de0/%E5%8D%8F%E7%A8%8B%E5%BC%82%E6%AD%A5.png" alt="协程异步"><br>同样的,也是2s</p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ol>
<li><p><code>now = lambda :time.time()</code> 用匿名函数获取时间</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async def res(url):</span><br><span class="line">    async with aiohttp.ClientSession() as s:</span><br><span class="line">        async with await s.get(url) as resopnse:</span><br><span class="line">            page_text &#x3D; await resopnse.text()</span><br><span class="line">            return page_text</span><br></pre></td></tr></table></figure>
<blockquote>
<p>定义特殊函数<br>引入 aiohttp (操作与requests类似)<br>将得到的response解析</p>
<div class="tip warning"><p>在每个with前面加async <br>
在每个堵塞操作前加 await </p><p></p></div>
</blockquote>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for url in urls:# 每个url要进行的操作</span><br><span class="line">    # 协程对象</span><br><span class="line">    coroutine &#x3D; res(url)</span><br><span class="line">    # 封装成任务对象</span><br><span class="line">    task &#x3D; asyncio.ensure_future(coroutine)</span><br><span class="line">    # 回调</span><br><span class="line">    task.add_done_callback(callback)</span><br><span class="line">    tasks.append(task)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对每个url -&gt; 协程包装 -&gt; 封装成任务对象<br>绑定回调<br>添加到一个列表</p>
</blockquote>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建一个事件loop</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line"># 将任务对象加入到事件循环loop </span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注册循环 开始</p>
<div class="tip warning"><p>asyncio.wait(tasks)一定不要忘记 </p><p></p></div></blockquote>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def callback(task):</span><br><span class="line">    page_text &#x3D; task.result()</span><br><span class="line">    tree &#x3D; etree.HTML(page_text)</span><br><span class="line">    text &#x3D; tree.xpath(&#39;&#x2F;&#x2F;p&#x2F;text()&#39;)</span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>回调的操作</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
        <category>多任务异步</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy (一) 框架</title>
    <url>/posts/82055e09.html</url>
    <content><![CDATA[<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><p>在目标的文件夹下按按住<kbd>Shift</kbd> 和鼠标右键<br>点击<code>在此处打开命令窗口</code><br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject 文件</span><br><span class="line">cd 文件</span><br><span class="line">scrapy genspider 名字 域名</span><br></pre></td></tr></table></figure>
<p><img src="/posts/82055e09/cmd.png"><br>即出现了<br><img src="/posts/82055e09/%E5%88%86%E7%BA%A7.png"></p>
<h1 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a>items.py</h1><p>在<code>items.py</code>下编辑要爬取的内容</p>
<h1 id="settings-py-编辑设置"><a href="#settings-py-编辑设置" class="headerlink" title="settings.py 编辑设置"></a>settings.py 编辑设置</h1><p>在<code>settings.py</code>下编辑</p>
<ol>
<li><p>BOT_NAME：项目名</p>
</li>
<li><p>USER_AGENT：就是 UA  即 浏览器标识(也可以放在<code>DEFAULT_REQUEST_HEADERS</code>里面)</p>
</li>
<li><p>ROBOTSTXT_OBEY：机器人协议，默认是true，需要改为false，否则很多东西爬不了</p>
</li>
<li><p>CONCURRENT_REQUESTS：最大并发数，就是同时允许开启多少个爬虫线程</p>
</li>
<li><p>DOWNLOAD_DELAY：下载延迟时间，单位是秒，控制爬虫爬取的频率，默认是3秒</p>
</li>
<li><p>COOKIES_ENABLED：是否保存COOKIES，默认关闭，开机可以记录爬取过程中的COOKIE</p>
</li>
<li><p>DEFAULT_REQUEST_HEADERS：默认请求头</p>
</li>
<li><p>ITEM_PIPELINES：项目管道，300为优先级，越低越爬取的优先度越高</p>
</li>
</ol>
<h1 id="名字-py-爬虫主文件"><a href="#名字-py-爬虫主文件" class="headerlink" title="名字.py 爬虫主文件"></a>名字.py 爬虫主文件</h1><p>在spiders下的<code>名字.py</code></p>
<p>name: 名字<br>allowed_domains: 域名<br>start_urls: 网址</p>
<h1 id="开始爬虫"><a href="#开始爬虫" class="headerlink" title="开始爬虫"></a>开始爬虫</h1><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><h3 id="保存在文件"><a href="#保存在文件" class="headerlink" title="保存在文件"></a>保存在文件</h3><ol>
<li>scrapy crawl 名字 -o xx.csv</li>
<li>scrapy crawl 名字 -o xx.json</li>
</ol>
<h3 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h3><ol start="3">
<li>scrapy crawl 名字</li>
</ol>
<h2 id="以-py的形式"><a href="#以-py的形式" class="headerlink" title="以.py的形式"></a>以.py的形式</h2><p>在<code>spiders</code>新建<code>run.py</code><br>写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from scrapy import cmdline</span><br><span class="line">cmdline.execute(&#39;上面的三种形式&#39;.split())</span><br></pre></td></tr></table></figure>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from scrapy import cmdline</span><br><span class="line">cmdline.execute(&#39;scrapy crawl 名字&#39;.split())</span><br></pre></td></tr></table></figure>
<p>运行这个就可以了</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="爬取豆瓣电影"><a href="#爬取豆瓣电影" class="headerlink" title="爬取豆瓣电影"></a>爬取豆瓣电影</h2><p><a class="btn-beautify button--animated outline" href="https://movie.douban.com/explore#!type=movie&tag=%E7%83%AD%E9%97%A8&sort=recommend&page_limit=20&page_start=0" target="_blank" rel="noopener" title="爬取的地址">爬取的地址</a></p><p> </p>
<h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject movies</span><br><span class="line">cd movies</span><br><span class="line">scrapy genspider mv movie.douban.com</span><br><span class="line">![](cmd.png)</span><br></pre></td></tr></table></figure>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在<code>setting.py</code>修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROBOTSTXT_OBEY &#x3D; False</span><br><span class="line"># 取消机器人协议</span><br><span class="line">DOWNLOAD_DELAY &#x3D; 1</span><br><span class="line"># 请求间隔为1秒</span><br><span class="line">DEFAULT_REQUEST_HEADERS &#x3D; &#123;</span><br><span class="line">   &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">   &#39;Accept-Language&#39;: &#39;en&#39;,</span><br><span class="line">   &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.150 Safari&#x2F;537.36 Edg&#x2F;88.0.705.63&#39;</span><br><span class="line">&#125;</span><br><span class="line"># 设置请求头</span><br></pre></td></tr></table></figure>
<h3 id="设置items"><a href="#设置items" class="headerlink" title="设置items"></a>设置items</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">class MoviesItem(scrapy.Item):</span><br><span class="line">    name &#x3D; scrapy.Field()</span><br><span class="line">    score &#x3D; scrapy.Field()</span><br><span class="line">    url &#x3D; scrapy.Field()</span><br><span class="line">    cover &#x3D; scrapy.Field()</span><br></pre></td></tr></table></figure>
<p>配置爬取的内容<br>爬取<code>name</code>  <code>score</code> <code>url</code>  <code>cover</code></p>
<h3 id="编辑主程序"><a href="#编辑主程序" class="headerlink" title="编辑主程序"></a>编辑主程序</h3><h4 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h4><p>在<code>spiders</code> 下的<code>名字.py</code> 编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">from ..items import MoviesItem</span><br><span class="line"># 从父级的 items 引入 MoviesItem 类</span><br><span class="line"></span><br><span class="line">class MvSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;mv&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;movie.douban.com&#39;]</span><br><span class="line">    start_urls &#x3D; [&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;j&#x2F;search_subjects?type&#x3D;movie&amp;tag&#x3D;%E7%83%AD%E9%97%A8&amp;sort&#x3D;recommend&amp;page_limit&#x3D;20&amp;page_start&#x3D;0&#39;]</span><br><span class="line">    start &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        true &#x3D; 0</span><br><span class="line">        false &#x3D; 0</span><br><span class="line">        # 由于爬取的时候会返回 true和false 而这两个词未定义会报错 我就给他们赋值了(因情况而异,大部分不需要)</span><br><span class="line">        items &#x3D; MoviesItem() # 引入类</span><br><span class="line">        movies &#x3D; eval(response.text)[&#39;subjects&#39;] # 获取响应</span><br><span class="line">        for movie in movies: # 记录(类似列表)</span><br><span class="line">            items[&#39;name&#39;] &#x3D; movie[&#39;title&#39;]</span><br><span class="line">            items[&#39;score&#39;] &#x3D; movie[&#39;rate&#39;]</span><br><span class="line">            items[&#39;url&#39;] &#x3D; movie[&#39;url&#39;]</span><br><span class="line">            items[&#39;cover&#39;] &#x3D; movie[&#39;cover&#39;]</span><br><span class="line">            yield items        </span><br><span class="line">        if self.start &lt;200: # 多次爬取</span><br><span class="line">            self.start +&#x3D; 20</span><br><span class="line">            url &#x3D; f&#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;j&#x2F;search_subjects?type&#x3D;movie&amp;tag&#x3D;%E7%83%AD%E9%97%A8&amp;sort&#x3D;recommend&amp;page_limit&#x3D;20&amp;page_start&#x3D;&#123;str(self.start)&#125;&#39;</span><br><span class="line">            yield scrapy.Request(url&#x3D;url)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/82055e09/%E7%94%B5%E5%BD%B1%E5%93%8D%E5%BA%94.png"><br>这是以字符串的的形式,先用eval()去掉  ‘ ‘ ,变成字典类型<br>再获取其中的<code>&#39;subject&#39;</code>的值,保存为列表的形式<br>对于每个<code>&#39;subject&#39;</code>,再获取我们要的值<br>用<code>yield</code>挂起</p>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">from ..items import MoviesItem</span><br><span class="line"></span><br><span class="line">class MvSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;mv&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;movie.douban.com&#39;]</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;j&#x2F;search_subjects?type&#x3D;movie&amp;tag&#x3D;%E7%83%AD%E9%97%A8&amp;sort&#x3D;recommend&amp;page_limit&#x3D;20&amp;page_start&#x3D;&#123;&#125;&#39;</span><br><span class="line">    start &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def start_requests(self):</span><br><span class="line">        for i in range(0,2001,20):</span><br><span class="line">            url &#x3D; self.url.format(i)</span><br><span class="line">            yield scrapy.Request(</span><br><span class="line">            url&#x3D;url,</span><br><span class="line">            callback&#x3D;self.parse</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        true &#x3D; 0</span><br><span class="line">        false &#x3D; 0</span><br><span class="line">        items &#x3D; MoviesItem()</span><br><span class="line">        movies &#x3D; eval(response.text)[&#39;subjects&#39;]</span><br><span class="line">        for movie in movies:</span><br><span class="line">            items[&#39;name&#39;] &#x3D; movie[&#39;title&#39;]</span><br><span class="line">            items[&#39;score&#39;] &#x3D; movie[&#39;rate&#39;]</span><br><span class="line">            items[&#39;url&#39;] &#x3D; movie[&#39;url&#39;]</span><br><span class="line">            items[&#39;cover&#39;] &#x3D; movie[&#39;cover&#39;]</span><br><span class="line">            yield items </span><br></pre></td></tr></table></figure>
<p>增加个<code>start_requests(self)</code> 函数 实现异步</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在<code>spiders</code>新建<code>run.py</code><br>写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from scrapy import cmdline</span><br><span class="line">cmdline.execute(&#39;scrapy crawl 名字&#39;.split())</span><br></pre></td></tr></table></figure>
<p>运行这个就可以了<br>或者在cmd下运行<br><code>scrapy crawl 名字</code><br><img src="/posts/82055e09/%E7%94%B5%E5%BD%B1%E6%88%90%E5%8A%9F.png"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy (二) middlewares</title>
    <url>/posts/7e4bc8b5.html</url>
    <content><![CDATA[<h1 id="修改-UA"><a href="#修改-UA" class="headerlink" title="修改 UA"></a>修改 UA</h1><p>在middlewares.py下添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UAMiddleware(object):</span><br><span class="line">    def process_request(self, request, spider):</span><br><span class="line">        ua &#x3D; random.choice(settings[&#39;USER_AGENT_LIST&#39;])</span><br><span class="line">        request.headers[&#39;User-Agent&#39;] &#x3D; ua</span><br></pre></td></tr></table></figure>
<p>定义一个UA类 获取settings里面的UA列表 把ua放入请求头里面</p>
<p>由于引入<code>random</code>和<code>settings</code>所以要<code>import</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">from scrapy.utils.project import get_project_settings</span><br><span class="line">settings &#x3D; get_project_settings()</span><br></pre></td></tr></table></figure>
<h1 id="改-settings"><a href="#改-settings" class="headerlink" title="改 settings"></a>改 settings</h1><p>在settings修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES &#x3D; &#123;</span><br><span class="line">  &#39;UA.middlewares.UAMiddleware&#39;: 543,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 UA 的目录下的 middlewares.py 的 UAMiddleware  优先级别设置为 543</p>
<p>同时,放入 UA 供选择</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USER_AGENT_LIST &#x3D; [</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;45.0.2454.101 Safari&#x2F;537.36&quot;,</span><br><span class="line">&quot;JUC (Linux; U; 2.3.7; zh-cn; MB200; 320*480) UCWEB7.9.3.103&#x2F;139&#x2F;999&quot;,</span><br><span class="line">&#39;MQQBrowser&#x2F;26 Mozilla&#x2F;5.0 (Linux; U;*roid 2.3.7; zh-cn; MB200 Build&#x2F;GRJ22; CyanogenMod-7) AppleWebKit&#x2F;533.1 (KHTML, like Gecko) Version&#x2F;4.0 Mobile Safari&#x2F;533.1&#39;,</span><br><span class="line">&#39;Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1) Gecko&#x2F;20070803 Firefox&#x2F;1.5.0.12&#39;,</span><br><span class="line">&#39;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&#39;,</span><br><span class="line">&#39;Mozilla&#x2F;5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit&#x2F;533.17.9 (KHTML, like Gecko) Version&#x2F;5.0.2 Mobile&#x2F;8J2 Safari&#x2F;6533.18.5&#39;,</span><br><span class="line">&quot;Dalvik&#x2F;1.6.0 (Linux; U; Android 4.2.1; 2013022 MIUI&#x2F;JHACNBL30.0)&quot;,</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Linux; U; Android 4.4.2; zh-cn; HUAWEI MT7-TL00 Build&#x2F;HuaweiMT7-TL00) AppleWebKit&#x2F;533.1 (KHTML, like Gecko) Version&#x2F;4.0 Mobile Safari&#x2F;533.1&quot;,</span><br><span class="line">&quot;AndroidDownloadManager&quot;,</span><br><span class="line">&quot;Apache-HttpClient&#x2F;UNAVAILABLE (java 1.4)&quot;,</span><br><span class="line">&quot;Dalvik&#x2F;1.6.0 (Linux; U; Android 4.3; SM-N7508V Build&#x2F;JLS36C)&quot;,</span><br><span class="line">&quot;Android50-AndroidPhone-8000-76-0-Statistics-wifi&quot;,</span><br><span class="line">&quot;Dalvik&#x2F;1.6.0 (Linux; U; Android 4.4.4; MI 3 MIUI&#x2F;V7.2.1.0.KXCCNDA)&quot;,</span><br><span class="line">&quot;Dalvik&#x2F;1.6.0 (Linux; U; Android 4.4.2; Lenovo A3800-d Build&#x2F;LenovoA3800-d)&quot;,</span><br><span class="line">&quot;Lite 1.0 ( http:&#x2F;&#x2F;litesuits.com )&quot;,</span><br><span class="line">&quot;Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727)&quot;,</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Windows NT 6.1) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;38.0.2125.122 Safari&#x2F;537.36 SE 2.X MetaSr 1.0&quot;,</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Linux; U; Android 4.1.1; zh-cn; HTC T528t Build&#x2F;JRO03H) AppleWebKit&#x2F;534.30 (KHTML, like Gecko) Version&#x2F;4.0 Mobile Safari&#x2F;534.30; 360browser(securitypay,securityinstalled); 360(android,uppayplugin); 360 Aphone Browser (2.0.4)&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="获取UA"><a href="#获取UA" class="headerlink" title="获取UA"></a>获取UA</h1><p><a class="btn-beautify button--animated outline" href="http://exercise.kingname.info/exercise_middleware_ua/1" target="_blank" rel="noopener" title="http://exercise.kingname.info/exercise_middleware_ua/1">http://exercise.kingname.info/exercise_middleware_ua/1</a><br>修改最后面的 /1 就可以修改页面</p>
<p>主程序下写</p>
<h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">class UaSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;ua&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;exercise.kingname.info&#39;]</span><br><span class="line">    start_urls &#x3D; [&#39;http:&#x2F;&#x2F;exercise.kingname.info&#x2F;exercise_middleware_ua&#x2F;1&#39;]</span><br><span class="line">    st &#x3D; 1</span><br><span class="line">    def parse(self, response):</span><br><span class="line">        re &#x3D; response.text</span><br><span class="line">        print(re)</span><br><span class="line">        yield re</span><br><span class="line">        if self.st &lt; 50:</span><br><span class="line">            self.st +&#x3D; 1</span><br><span class="line">            url &#x3D; f&#39;http:&#x2F;&#x2F;exercise.kingname.info&#x2F;exercise_middleware_ua&#x2F;&#123;str(self.st)&#125;&#39;</span><br><span class="line">            yield scrapy.Request(url &#x3D; url)</span><br></pre></td></tr></table></figure>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">class UaSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;ua&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;exercise.kingname.info&#39;]</span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;exercise.kingname.info&#x2F;exercise_middleware_ua&#x2F;&#123;&#125;&#39;</span><br><span class="line">    st &#x3D; 1</span><br><span class="line">    def start_requests(self):</span><br><span class="line">        for i in range(1,50):</span><br><span class="line">            url &#x3D; self.url.format(i)</span><br><span class="line">            yield scrapy.Request(url &#x3D; url)</span><br><span class="line">    def parse(self, response):</span><br><span class="line">        re &#x3D; response.text</span><br><span class="line">        print(re)</span><br><span class="line">        yield re</span><br></pre></td></tr></table></figure>
<p>最后执行即可</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>XPath</title>
    <url>/posts/4463883a.html</url>
    <content><![CDATA[<h1 id="XPath的符号表示"><a href="#XPath的符号表示" class="headerlink" title="XPath的符号表示"></a>XPath的符号表示</h1><div><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从当前节点选取直接子节点(下一级)</td></tr><tr><td>//</td><td>从当前节点选取子孙节点(下级)</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr></tbody></table></div>

<h1 id="XPath快速定位"><a href="#XPath快速定位" class="headerlink" title="XPath快速定位"></a>XPath快速定位</h1><p>按<code>F12</code> -&gt; <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd> -&gt; 定位元素 -&gt; -&gt; 右键点击元素 -&gt; 复制XPath<br><img src="/posts/4463883a/%E6%B5%8F%E8%A7%88%E5%99%A8xpath.png"></p>
<h1 id="XPath常用函数"><a href="#XPath常用函数" class="headerlink" title="XPath常用函数"></a>XPath常用函数</h1><p>1.contains()：匹配属性值中包含(部分)某些字符串的节点<br>形式如 : //li[contains(@id,”xxx”)]<br>2.text()：获取标签里的内容，作为字符串输出<br>形式如 : //li[contains(@id,”xxx”)]/text()</p>
<h1 id="爬取猫眼"><a href="#爬取猫眼" class="headerlink" title="爬取猫眼"></a>爬取猫眼</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;maoyan.com&#x2F;board&#39;</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Cookie&#39;: &#39;uuid_n_v&#x3D;v1; uuid&#x3D;CE8F01006C1A11EBB1AE3B87C7DEAC0D4CE0991FF0534C30B00482914D74394D; _csrf&#x3D;56c5a92f32b7fd0839d8aea3d8fb63efdb760413d3a66e64f20c85a7b69626d5; Hm_lvt_703e94591e87be68cc8da0da7cbd0be2&#x3D;1613014796; _lxsdk_cuid&#x3D;1778f2c88e8c8-018bd17ae4d2da-78667f69-13c680-1778f2c88e857; _lxsdk&#x3D;CE8F01006C1A11EBB1AE3B87C7DEAC0D4CE0991FF0534C30B00482914D74394D; Hm_lpvt_703e94591e87be68cc8da0da7cbd0be2&#x3D;1613015805; __mta&#x3D;55391636.1613014796550.1613015755811.1613015805268.3; _lxsdk_s&#x3D;1778f2c88e9-1db-289-172%7C%7C9&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.150 Safari&#x2F;537.36 Edg&#x2F;88.0.705.63&#39;</span><br><span class="line">&#125;</span><br><span class="line">text &#x3D; requests.get(url &#x3D; url,headers&#x3D; headers).text</span><br><span class="line">tree &#x3D; etree.HTML(text)</span><br><span class="line">contents1 &#x3D; tree.xpath(&#39;&#x2F;&#x2F;p[@class&#x3D;&quot;name&quot;]&#x2F;a&#x2F;@title&#39;)</span><br><span class="line">print(contents1)</span><br><span class="line">contents2 &#x3D; tree.xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div&#x2F;div&#x2F;dl&#x2F;dd&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;p[1]&#x2F;a&#x2F;@title&#39;)</span><br><span class="line">print(contents2)</span><br><span class="line">contents3 &#x3D; tree.xpath(&#39;&#x2F;&#x2F;p&#x2F;&#x2F;a&#x2F;@title&#39;)</span><br><span class="line">print(contents3)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>[‘心灵奇旅’, ‘拆弹专家2’, ‘送你一朵小红花’, ‘紧急救援’, ‘崖上的波妞’, ‘许愿神龙’, ‘海底小纵队：火焰之环’, ‘赛尔号大电影7：疯狂机器城’, ‘温暖的抱抱’, ‘武汉日夜’]<br>[‘心灵奇旅’, ‘拆弹专家2’, ‘送你一朵小红花’, ‘紧急救援’, ‘崖上的波妞’, ‘许愿神龙’, ‘海底小纵队：火焰之环’, ‘赛尔号大电影7：疯狂机器城’, ‘温暖的抱抱’, ‘武汉日夜’]<br>[‘心灵奇旅’, ‘拆弹专家2’, ‘送你一朵小红花’, ‘紧急救援’, ‘崖上的波妞’, ‘许愿神龙’, ‘海底小纵队：火焰之环’, ‘赛尔号大电影7：疯狂机器城’, ‘温暖的抱抱’, ‘武汉日夜’]  </p>
</blockquote>
<p>三个方式的XPath都是爬取到电影名字(一列表的形式)</p>
<h2 id="法一-属性值作为条件"><a href="#法一-属性值作为条件" class="headerlink" title="法一 属性值作为条件"></a>法一 属性值作为条件</h2><p><img src="/posts/4463883a/%E6%B3%95%E4%B8%80.png"><br>在 class=’name’ 下属的 a 中 就可以<br>用<code>(&#39;//p[@class=&quot;name&quot;]/a/@title&#39;)</code> 引出 标题<br>或者将<code>@title</code> 换成<code>text()</code></p>
<h2 id="法二-对比法"><a href="#法二-对比法" class="headerlink" title="法二 对比法"></a>法二 对比法</h2><p>复制两个标题的XPath</p>
<p><code>//*[@id=&quot;app&quot;]/div/div/div/dl/dd[1]/div/div/div[1]/p[1]/a</code><br><code>//*[@id=&quot;app&quot;]/div/div/div/dl/dd[2]/div/div/div[1]/p[1]/a</code><br>发现只有<code>dd[1]</code> 和<code>dd[2]</code>的区别<br>于是把[]去掉<br><code>//*[@id=&quot;app&quot;]/div/div/div/dl/dd/div/div/div[1]/p[1]/a/@title</code></p>
<h2 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h2><p>看出在p下的a 有点猜测的意味,不推荐</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>XPath</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/posts/2f57a694.html</url>
    <content><![CDATA[<h1 id="基本符号表示"><a href="#基本符号表示" class="headerlink" title="基本符号表示"></a>基本符号表示</h1><ol>
<li><p><code>^</code>示匹配字符串的开始位置 (例外:用在中括号中<code>[ ]</code>时,可以理解为取反,表示不匹配括号中字符串)</p>
</li>
<li><p><code>$</code>示匹配字符串的结束位置</p>
</li>
<li><p><code>.</code>匹配单个字符</p>
</li>
<li><p><code>\w</code>匹配英文字母和数字<code>\W</code>非字母和数字</p>
</li>
<li><p><code>\d</code>匹配数字<code>\D</code>非数字</p>
</li>
<li><p><code>*</code>表示匹配 零次到多次</p>
</li>
<li><p><code>+</code>表示匹配 一次到多次 (至少有一次)</p>
</li>
<li><p><code>?</code>表示匹配零次或一次 (或是非贪心模式 尽可能少的匹配)</p>
</li>
<li><p><code>|</code>表示为或者,两项中取一项</p>
</li>
<li><p><code>( )</code>小括号表示匹配括号中全部字符</p>
</li>
<li><p><code>[ ]</code>中括号表示匹配括号中一个字符 范围描述 如<code>[0-9 a-z A-Z]</code></p>
</li>
<li><p><code>&#123; &#125;</code>大括号用于限定匹配次数 如<code>&#123;n&#125;</code>表示匹配n个字符<code>&#123;n,&#125;</code>表示至少匹配n个字符 {n,m}表示至少 n,最多 m</p>
</li>
<li><p><code>\</code>转义字符 如上基本符号匹配都需要转义字符 如<code>\*</code>表示匹配<code>*</code>号</p>
</li>
</ol>
<h1 id="使用正则匹配"><a href="#使用正则匹配" class="headerlink" title="使用正则匹配"></a>使用正则匹配</h1><h2 id="匹配Regex对象"><a href="#匹配Regex对象" class="headerlink" title="匹配Regex对象"></a>匹配Regex对象</h2><p>两种表示方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;)</span><br><span class="line">mo &#x3D; Rex.search(&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex &#x3D; r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><br><span class="line">mo &#x3D; re.search(ex ,&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">print(mo.group(0))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p><code>123-456-7890</code></p>
</blockquote>
<h2 id="用-分组"><a href="#用-分组" class="headerlink" title="用( )分组"></a>用( )分组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex &#x3D; r&#39;(\d\d\d)-(\d\d\d)-(\d\d\d\d)&#39;</span><br><span class="line">mo &#x3D; re.search(ex ,&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">print(mo.group(0),&#39;\n&#39;,mo.group(1),&#39;\n&#39;,mo.group(3))</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>123-456-7890<br>123<br>7890<br>group(0)代表的是整个匹配组,而group(1),group(2)…依次匹配第1,2,..个括号内的内容</p>
</blockquote>
<h2 id="查找全部"><a href="#查找全部" class="headerlink" title="查找全部"></a>查找全部</h2><ul>
<li>findall： 从字符串任意位置查找，返回一个列表</li>
<li>finditer：从字符串任意位置查找，返回一个迭代器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex1 &#x3D; r&#39;(\d\d\d)-\d\d\d-(\d\d\d\d)&#39;</span><br><span class="line">ex2 &#x3D; r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><br><span class="line">mo1 &#x3D; re.findall(ex1 ,&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">mo2 &#x3D; re.findall(ex2 ,&#39;电话是123-456-7890和098-765-4321哦哦哦&#39;)</span><br><span class="line">print(mo1)</span><br><span class="line">print(mo2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>[(‘123’, ‘7890’), (‘098’, ‘4321’)]<br>[‘123-456-7890’, ‘098-765-4321’]<br>输出为列表的形式,用括号分组后,会以元组表现出<code>分组内容</code></p>
</blockquote>
</li>
</ul>
<h2 id="不区分大小写"><a href="#不区分大小写" class="headerlink" title="不区分大小写"></a>不区分大小写</h2><div class="snote idea yellow"><p>re.IGNORECASE 或简写为 re.I</p></div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex &#x3D; re.compile(r&#39;qwer&#39;,re.I)</span><br><span class="line">mo &#x3D; re.findall(ex , &#39;Qwer,QWER,wert&#39;)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">ex &#x3D; r&#39;qwer&#39;</span><br><span class="line">mo &#x3D; re.findall(ex , &#39;Qwer,QWER,wert&#39;,re.I)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>[‘Qwer’, ‘QWER’]</p>
</blockquote>
<ul>
<li>第一种方法在 compile中加入 re.I</li>
<li>第二种是在查找的中加入re.I</li>
</ul>
<h2 id="表示全部"><a href="#表示全部" class="headerlink" title=".表示全部"></a>.表示全部</h2><div class="snote idea yellow"><p>re.DOTALL 或简写为 re.S</p></div>
一般的` . `是无法表示换行的

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;.\d\d\d-\d\d\d-\d\d\d\d&#39;)</span><br><span class="line">mo &#x3D; Rex.search(&#39;&#39;&#39;&#39;电话是</span><br><span class="line">123-456-7890&#39;&#39;&#39;)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>Traceback (most recent call last):<br>  File “e:/1.Python/测试.py”, line 5, in <module><br>    print(mo.group())<br>AttributeError: ‘NoneType’ object has no attribute ‘group’</module></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;.\d\d\d-\d\d\d-\d\d\d\d&#39;,re.S)</span><br><span class="line">mo &#x3D; Rex.search(&#39;&#39;&#39;&#39;电话是</span><br><span class="line">123-456-7890&#39;&#39;&#39;)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>123-456-7890<br>匹配了一行空行</p>
</blockquote>
<h2 id="正则中加注释"><a href="#正则中加注释" class="headerlink" title="正则中加注释"></a>正则中加注释</h2><div class="snote idea yellow"><p>re.VERBOSE 或简写为 re.X</p></div>
一般地,在正则表达式中加入注释,可能会被以为是匹配对象

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;&#39;&#39;(</span><br><span class="line">    ([a-zA-Z0-9._%+-]+)  #用户名</span><br><span class="line">    @                 #分隔号</span><br><span class="line">    [a-zA-Z0-9.-]* #邮件服务器</span><br><span class="line">    )</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">)</span><br><span class="line">mo &#x3D; Rex.search(&#39;我的邮箱是123456789@qq.com&#39;)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>Traceback (most recent call last):<br>  File “e:/1.Python/测试.py”, line 10, in <module><br>    print(mo.group())<br>AttributeError: ‘NoneType’ object has no attribute ‘group’</module></p>
</blockquote>
<p>添加之后<code>re.X</code>后,可以在正则中加入注释,不被匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;&#39;&#39;(</span><br><span class="line">    ([a-zA-Z0-9._%+-]+)  #用户名</span><br><span class="line">    @                 #分隔号</span><br><span class="line">    [a-zA-Z0-9.-]* #邮件服务器</span><br><span class="line">    )</span><br><span class="line">    &#39;&#39;&#39;,re.VERBOSE</span><br><span class="line">)</span><br><span class="line">mo &#x3D; Rex.search(&#39;我的邮箱是123456789@qq.com&#39;)</span><br><span class="line">print(mo.group())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p><a href="mailto:&#49;&#x32;&#51;&#52;&#x35;&#54;&#55;&#x38;&#57;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#49;&#x32;&#51;&#52;&#x35;&#54;&#55;&#x38;&#57;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a></p>
</blockquote>
<h2 id="同时使用re-I-re-S-re-X"><a href="#同时使用re-I-re-S-re-X" class="headerlink" title="同时使用re.I ,re.S ,re.X"></a>同时使用re.I ,re.S ,re.X</h2><p>可以用|分割<br>即  re.I|re.S|re.X</p>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>sub函数 与 subn函数</p>
<h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><ol>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;Agent \w+&#39;)</span><br><span class="line">text &#x3D; &#39;Agent Alice and Agent Bob are friends&#39;</span><br><span class="line">mo &#x3D; Rex.sub(&#39;person&#39;,text)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>person and person are friends<br>即将所有的替换掉了</p>
</blockquote>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;Agent (\w)\w*&#39;)</span><br><span class="line">text &#x3D; &#39;Agent Alice and Agent Bob are friends&#39;</span><br><span class="line">mo &#x3D; Rex.sub(r&#39;person \1&#39;,text)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>person A and person B are friends<br>可以用\1,\2 …匹配()内的内容 </p>
</blockquote>
<h3 id="subn"><a href="#subn" class="headerlink" title="subn"></a>subn</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">Rex &#x3D; re.compile(r&#39;Agent (\w)\w*&#39;)</span><br><span class="line">text &#x3D; &#39;Agent Alice and Agent Bob are friends&#39;</span><br><span class="line">mo &#x3D; Rex.subn(r&#39;person \1&#39;,text)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>
输出<blockquote>
<p>(‘person A and person B are friends’, 2)<br>用法与<code>sub</code>同理,只是多了个统计替换的次数</p>
</blockquote>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1></li>
</ol>
<ul>
<li><div class="tip warning"><p>在正则表达式中记得加` r'' `</p><p></p></div>
在Python中,<code>\</code>为转义符,在正则中\d表示应为\\d


</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JNU_算法期末</title>
    <url>/posts/8c2f6b20.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>只要我还没睡觉,这就还是算第二天..</p>
<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-2-1-时间复杂度"><a href="#1-2-1-时间复杂度" class="headerlink" title="1.2.1 时间复杂度"></a>1.2.1 时间复杂度</h2><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="3-3-3-求第k小的元素"><a href="#3-3-3-求第k小的元素" class="headerlink" title="3.3.3 求第k小的元素"></a>3.3.3 求第k小的元素</h2><p>思路:按照快排的思想 第k小对应a[k-1]的值</p>
<p>对a[s…t]</p>
<ol>
<li>s&gt;=t,说明a中元素个数&lt;=1,如果s=t,k-1=s.这一个数就是第k小的数</li>
<li>s&lt;t,划分为a[s…i-1]和a[i+1…t],以i为基准划分<ol>
<li>k-1==i,a[i]为所求的值</li>
<li>k-1&lt;i,第k小元素在a[s…i-1]里,继续递归</li>
<li>k-1&gt;i,第k小元素在a[i+1…t]里,继续递归</li>
</ol>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">QucikSelect</span>(<span class="params"><span class="built_in">int</span> a[],<span class="built_in">int</span> s,<span class="built_in">int</span> t,<span class="built_in">int</span> k</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> i=s,j=t;</span><br><span class="line">    <span class="built_in">int</span> tmp;</span><br><span class="line">    <span class="keyword">if</span>(s&lt;t)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = a[s];<span class="comment">//选择第一个作为基准</span></span><br><span class="line">        <span class="keyword">while</span>(i!=j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;i&amp;&amp;a[j]&gt;=tmp)</span><br><span class="line">                j--;</span><br><span class="line">            a[i]=a[j];</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]&lt;=tmp)</span><br><span class="line">                i++;</span><br><span class="line">            a[j]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a[i]=tmp;<span class="comment">//类似快排的思想</span></span><br><span class="line">        <span class="keyword">if</span>(k<span class="number">-1</span>==i) <span class="keyword">return</span> a[i];<span class="comment">//对应2.1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k<span class="number">-1</span>&lt;i) <span class="keyword">return</span> QuickSelect(a,s,i<span class="number">-1</span>,k);<span class="comment">//对应2.2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> QuickSelect(a,i+<span class="number">1</span>,t,k);<span class="comment">//对应2.3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s==t&amp;&amp; s==k<span class="number">-1</span>)   <span class="comment">//对应1</span></span><br><span class="line">        <span class="keyword">return</span> a[k<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-3-4-两个等长有序序列中位数"><a href="#3-3-4-两个等长有序序列中位数" class="headerlink" title="3.3.4 两个等长有序序列中位数"></a>3.3.4 两个等长有序序列中位数</h2><p>两个中位数比较,中位数较大的数组选小部分的,中位数较小的选大部分的</p>
<ol>
<li>奇数,取剩下的</li>
<li>偶数:较大的数连同其剩下的,较小的数取剩下的(最后一次比较也是取较大数)</li>
</ol>
<p>a = (11,13,<strong>15</strong>,17,19)                         b=(2,4,<strong>6</strong>,8,20)</p>
<p>15&gt;6</p>
<p>a=(<strong>11</strong>,13)                                          b=(<strong>8</strong>,20)</p>
<p>11&gt;8</p>
<p>a=(11)                                               b=(20)</p>
<p>11&lt;20</p>
<p>20</p>
<h2 id="3-4-1-最大连续子序列和问题"><a href="#3-4-1-最大连续子序列和问题" class="headerlink" title="3.4.1 最大连续子序列和问题"></a>3.4.1 最大连续子序列和问题</h2><p>分治法求解,取中间位置 mid 有三种情况:</p>
<ol>
<li>子序列在a[0…mid]</li>
<li>子序列在a[mid+1…n-1]</li>
<li>子序列在跨过mid的左右两边</li>
</ol>
<p>a = {-2,11,-4,13,-5,-2} mid = (0+5)/2=2</p>
<p> 分为 a[0…2] a[3…5]</p>
<p>左:11 右:13 中 20 max = 20</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">max3</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b,<span class="keyword">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) a=b;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;c) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">maxSubSum</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">long</span> maxLeftSum,maxRightSum;</span><br><span class="line">    <span class="keyword">long</span> maxLeftBorderSum,leftBorderSum;</span><br><span class="line">    <span class="keyword">long</span> maxRightBorderSum,rightBorderSum;</span><br><span class="line">    <span class="keyword">if</span>(left==right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[left]&gt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> a[left];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid =(left+right)/<span class="number">2</span>;</span><br><span class="line">    maxLeftSum = maxSubSum(a,left,mid);<span class="comment">//mid左边</span></span><br><span class="line">    maxRightSum = maxSubSum(a,mid+<span class="number">1</span>,right);<span class="comment">//mid右边</span></span><br><span class="line">    <span class="comment">//跨过mid</span></span><br><span class="line">    maxLeftBorderSum=<span class="number">0</span>,leftBorderSum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=mid;i&gt;=left;i--)<span class="comment">//从第mid个数开始,向左求最大子序列和</span></span><br><span class="line">    &#123;</span><br><span class="line">        leftBorderSum+=a[i];</span><br><span class="line">        <span class="keyword">if</span>(leftBorderSum&gt;maxLeftBorderSum)</span><br><span class="line">            maxLeftBorderSum = leftBorderSum;</span><br><span class="line">    &#125;</span><br><span class="line">    maxRightBorderSum=<span class="number">0</span>,rightBorder=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=mid+<span class="number">1</span>;j&lt;=right;j++)<span class="comment">//从第mid+1个数开始,向右求最大子序列</span></span><br><span class="line">    &#123;</span><br><span class="line">        rightBorderSum +=a[j];</span><br><span class="line">        <span class="keyword">if</span>(rightBorderSum&gt;maxRightBorderSum)</span><br><span class="line">            maxRightBorderSum=rightBorderSum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max3(maxLeftSum,maxRightSum,maxLeftBorderSum+maxRightBorderSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="4-2-4-最大连续子序列和"><a href="#4-2-4-最大连续子序列和" class="headerlink" title="4.2.4 最大连续子序列和"></a>4.2.4 最大连续子序列和</h2><p>​    (-2,                    11,                        -4,                13,                    -5,                        -2)</p>
<p>穷举法:算出每一个连续子序列的和,取最大值</p>
<p>三次循环</p>
<table>
<thead>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td>-2</td>
<td>9</td>
<td>5</td>
<td>18</td>
<td>13</td>
<td>11</td>
</tr>
<tr>
<td></td>
<td>11</td>
<td>7</td>
<td><strong><em>20</em></strong></td>
<td>15</td>
<td>13</td>
</tr>
<tr>
<td></td>
<td></td>
<td>-4</td>
<td>9</td>
<td>4</td>
<td>2</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>13</td>
<td>8</td>
<td>6</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>-5</td>
<td>-7</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>-2</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum1</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">int</span> maxSum,thisSum;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=i;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            thisSum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(k=i;k&lt;=j;k++)</span><br><span class="line">                thisSum+=a[k];</span><br><span class="line">            <span class="keyword">if</span>(thisSum&gt;maxSum)</span><br><span class="line">                maxSum=thisSum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>两次循环(每一行的数字(第一个除外)可以由上一个数字加上a[j]计算)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum2</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> maxSum=<span class="number">0</span>,thisSum;</span><br><span class="line">    fot(i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        thisSum=<span class="number">0</span>;</span><br><span class="line">        fot(j=i;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            thisSum+=a[j]</span><br><span class="line">                <span class="keyword">if</span>(thisSum&gt;maxSum)</span><br><span class="line">                    maxSum=thisSum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一次循环</p>
<p>循环如果相加值小于零,直接替换成0(加上负数肯定比较小)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum3</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,maxSum=<span class="number">0</span>,thisSum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        thisSum+=a[i];</span><br><span class="line">        <span class="keyword">if</span>(thisSum&lt;<span class="number">0</span>)</span><br><span class="line">            thisSum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(maxSum&lt;thisSum)</span><br><span class="line">            maxSum=thisSum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-2-5-求解幂集问题"><a href="#4-2-5-求解幂集问题" class="headerlink" title="4.2.5 求解幂集问题"></a>4.2.5 求解幂集问题</h2><ol>
<li><p>穷举法:</p>
<p>a[0..2] = {1,2,3}</p>
<p>可以转化为二进制(1表示选中,0表示不选中)</p>
<p>000 001 010 011 … 111</p>
<p>对应为{},{3},{2},{2,3}…{1,2,3}</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">void inc(int b[],int n)二进制加法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//0改成1,1改成0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i])<span class="comment">//1改成0,表示要进1位,继续循环</span></span><br><span class="line">            b[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            b[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//0改成1,没有进位,退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PSet</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k;</span><br><span class="line">    <span class="keyword">int</span> pw = (<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pw;i++)<span class="comment">//幂集有2^n个,因此要2^n次循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">            <span class="keyword">if</span>(b[k])</span><br><span class="line">                <span class="built_in">printf</span>()</span><br><span class="line">        inc(b,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li><p>增量穷举法</p>
<ol>
<li>{}</li>
<li>添加1-&gt;{1}</li>
<li>上面添加2-&gt;{2},{1,2}</li>
<li>上面添加3-&gt;{3},{1,3},{2,3},{1,2,3}</li>
<li>所有元素合起来就是所求解</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PSet</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ps1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator it;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line">    ps.push_back(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//从1到n循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        ps1=ps;<span class="comment">//ps1放上一次循环的内容</span></span><br><span class="line">        <span class="keyword">for</span>(it=ps1.begin();it!=ps1.end();++it)</span><br><span class="line">            (*it).push_back(i);<span class="comment">//往ps1添加</span></span><br><span class="line">        <span class="keyword">for</span>(it=ps1.begin();it!=ps1.end();++it)</span><br><span class="line">            ps.push_back(*it);<span class="comment">//将ps1的元素添加到ps中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-6-0-1背包"><a href="#4-2-6-0-1背包" class="headerlink" title="4.2.6 0/1背包"></a>4.2.6 0/1背包</h2><p>采用求幂集的方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PSet</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Knap</span><span class="params">(<span class="keyword">int</span> w[],<span class="keyword">int</span> v[],<span class="keyword">int</span> W)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sumw,sumv;</span><br><span class="line">    <span class="keyword">int</span> maxi,maxsumw=<span class="number">0</span>,maxsumv=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator it;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator sit;</span><br><span class="line">    <span class="keyword">for</span>(it=ps.begin();it!-ps.end();++it)</span><br><span class="line">    &#123;</span><br><span class="line">        sumw=sumv=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(sit=(*it).begin();sit!=(*it).end();++sit)<span class="comment">//由幂集选中选择哪个元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            sumw+=w[*sit<span class="number">-1</span>];</span><br><span class="line">            sumv+=v[*sit<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sumw&lt;=W)<span class="comment">//能装入背包中</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sumv&gt;maxsumv)</span><br><span class="line">            &#123;</span><br><span class="line">                maxsumw=sumw;</span><br><span class="line">                maxsumv=sumv;</span><br><span class="line">                maxi=count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ..;<span class="comment">//不能装入背包</span></span><br><span class="line">        count ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ol>
<h2 id="4-2-7-全排列"><a href="#4-2-7-全排列" class="headerlink" title="4.2.7 全排列"></a>4.2.7 全排列</h2><ol>
<li>{1}</li>
<li>插入2-&gt; {2,1} {1,2}</li>
<li>插入3-&gt;{3,2,1},{2,3,1},{2,1,3},    {3,1,2},{1,3,2},{1,2,3}</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s,<span class="keyword">int</span> i,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;ps1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        s1=s;</span><br><span class="line">        it=s1.begin()+j;</span><br><span class="line">        s1.insert(it,i);</span><br><span class="line">        ps1.push_back(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Perm</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;ps1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator it;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;s,s1;</span><br><span class="line">    s.push_back(<span class="number">1</span>);</span><br><span class="line">    ps.push_back(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps1.clear();</span><br><span class="line">        <span class="keyword">for</span>(it=ps.begin();it!=ps.end();++it)</span><br><span class="line">        &#123;</span><br><span class="line">            Insert(*it,i,ps1);</span><br><span class="line">        &#125;</span><br><span class="line">        ps=ps1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="求解任务分配问题"><a href="#求解任务分配问题" class="headerlink" title="求解任务分配问题"></a>求解任务分配问题</h2><p>按照全排列的思想,排列出每一种可能性,然后得出结果</p>
<p>将任务全排列</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Perm</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> &amp; mini ,<span class="keyword">int</span> &amp; minc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Perm(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ps.size();i++)<span class="comment">//每一种方案</span></span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ps[i].size();j++)<span class="comment">//每一种方案的选择(j表示第j个人)</span></span><br><span class="line">        	cost+=c[j][ps[i][j]<span class="number">-1</span>]<span class="comment">//ps[i][j]表示任务,由于从0开始,所以要-1</span></span><br><span class="line">       <span class="keyword">if</span>(cost&lt;minc)</span><br><span class="line">       &#123;</span><br><span class="line">           minc=cost;</span><br><span class="line">           mini=i;</span><br><span class="line">       &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h2 id="5-1-回溯法"><a href="#5-1-回溯法" class="headerlink" title="5.1 回溯法"></a>5.1 回溯法</h2><h3 id="5-1-1-解空间"><a href="#5-1-1-解空间" class="headerlink" title="5.1.1 解空间"></a>5.1.1 解空间</h3><p>满足约束条件-&gt;可行解</p>
<p>最大或最小值-&gt;最优解</p>
<p>排列树,解空间树</p>
<h3 id="5-1-2-回溯法"><a href="#5-1-2-回溯法" class="headerlink" title="5.1.2 回溯法"></a>5.1.2 回溯法</h3><p>活结点-&gt;自身已生成但孩子结点没有全部生成</p>
<p>扩展结点-&gt;正在产生孩子结点的结点</p>
<p>死结点-&gt;所有子节点均已产生</p>
<p>剪枝函数 1. 用用约束函数在扩展结点处剪除不满足约束条件的路径 2. 用限界函数剪去得不到问题解或最优解的路径</p>
<p>回溯法步骤:</p>
<ol>
<li>问题的解空间树至少包含问题的一个解或最优解</li>
<li>确定结点的扩展搜索规则</li>
<li>以DFS搜索解空间树,用剪枝函数避免无效搜索.DFS可以用回溯或迭代(非递归)回溯</li>
</ol>
<h3 id="5-1-3-回溯法框架"><a href="#5-1-3-回溯法框架" class="headerlink" title="5.1.3 回溯法框架"></a>5.1.3 回溯法框架</h3><h3 id="5-1-4-回溯法和DFS的异同"><a href="#5-1-4-回溯法和DFS的异同" class="headerlink" title="5.1.4 回溯法和DFS的异同"></a>5.1.4 回溯法和DFS的异同</h3><ol>
<li>访问次序 <ol>
<li>DFS目的是遍历,无序的,重要的是是否有访问过</li>
<li>回溯法目的是求解过程,本质是有序的</li>
</ol>
</li>
<li>访问次数不同<ol>
<li>DFS 对访问过的顶点不再访问,仅访问一次</li>
<li>回溯法可能再次访问</li>
</ol>
</li>
<li>剪枝不同<ol>
<li>DFS 不包含剪枝</li>
<li>很多回溯法用剪枝剪除不必要的分支</li>
</ol>
</li>
</ol>
<h3 id="5-1-5-回溯法时间分析"><a href="#5-1-5-回溯法时间分析" class="headerlink" title="5.1.5 回溯法时间分析"></a>5.1.5 回溯法时间分析</h3><p>假设解空间树共有m层,第1层有m<sub>0</sub>个满足约束条件的结点,每个结点有m<sub>1</sub>个满足约束条件,则第二层有m<sub>0</sub>m<sub>1</sub>个满足约束条件的结点….<em>T</em>(<em>n</em>) = m<sub>0</sub>+m<sub>0</sub>m<sub>1</sub>+…+m<sub>0</sub>m<sub>1</sub>…m<sub>n-1</sub></p>
<p><strong><em>通常</em></strong>子集问题：</p>
<p><strong>时间复杂度</strong>： <img src="https://www.zhihu.com/equation?tex=O(2%5En)" alt="[公式]"> 。因为每一个元素的状态无外乎<strong>取与不取</strong>，一共<img src="https://www.zhihu.com/equation?tex=2%5En" alt="[公式]"> 种状态，，最终时间复杂度为 <img src="https://www.zhihu.com/equation?tex=O(2%5En)" alt="[公式]"> 。</p>
<p>排列问题分析：</p>
<p><strong>时间复杂度：</strong>： <img src="https://www.zhihu.com/equation?tex=O(+n!)" alt="[公式]"> 。因为一共<img src="https://www.zhihu.com/equation?tex=n!" alt="[公式]"> 种排列，最终时间复杂度为 <img src="https://www.zhihu.com/equation?tex=O(+n!)" alt="[公式]"> 。</p>
<h2 id="5-2-0-1背包"><a href="#5-2-0-1背包" class="headerlink" title="5.2 0/1背包"></a>5.2 0/1背包</h2><p>(左子树选,右子树不选)</p>
<h3 id="重量和恰好为-W"><a href="#重量和恰好为-W" class="headerlink" title="重量和恰好为 W"></a>重量和恰好为 <em>W</em></h3><p>左剪枝:当tw+w[ <em>i</em> ]超过<em>W</em>(背包满了)不再装</p>
<p>右剪枝: 当当前物品不选择时,即使选了后面所有物品,也无法达到<em>W</em> </p>
<h3 id="不超过W"><a href="#不超过W" class="headerlink" title="不超过W"></a>不超过<em>W</em></h3><p>左剪枝方式不变</p>
<p>右剪枝:设置上界函数:bound(<em>i</em>) = tv+<em>r</em>  (沿该方向物品价值上限),r表示剩余物品总价值</p>
<p>bound(<em>i</em>)&lt;=maxv,说明右边全选了还不能比maxv大,剪枝</p>
<h2 id="5-5-n后问题"><a href="#5-5-n后问题" class="headerlink" title="5.5 n后问题"></a>5.5 n后问题</h2><p>每个皇后都要试探n列,共有n个皇后,解空间是子集树,每个结点有n棵子树,其时间复杂度就是 <img src="https://www.zhihu.com/equation?tex=O(n%5En)" alt="[公式]"> 。或 因为 N 行N 列，皇后的排列方式共有 <img src="https://www.zhihu.com/equation?tex=n%5En" alt="[公式]"> 种。</p>
<h2 id="5-8-活动安排问题"><a href="#5-8-活动安排问题" class="headerlink" title="5.8 活动安排问题"></a>5.8 活动安排问题</h2><p>相当于找某个排列,使得调度中兼容活动个数最大,对应解空间为排列树</p>
<p>解空间是一棵排列数,与全排列的时间复杂度相同,即复杂度为 <img src="https://www.zhihu.com/equation?tex=O(+n!)" alt="[公式]"></p>
<h2 id="排列树和子集树的区别"><a href="#排列树和子集树的区别" class="headerlink" title="排列树和子集树的区别"></a>排列树和子集树的区别</h2><p>子集树-&gt;选or不选</p>
<p>排列数-&gt;交换swap()</p>
<h1 id="第六章-分支限界法"><a href="#第六章-分支限界法" class="headerlink" title="第六章 分支限界法"></a>第六章 分支限界法</h1><h2 id="6-2-0-1-背包"><a href="#6-2-0-1-背包" class="headerlink" title="6.2 0/1 背包"></a>6.2 0/1 背包</h2><h3 id="6-2-1-队列式分支限界法"><a href="#6-2-1-队列式分支限界法" class="headerlink" title="6.2.1 队列式分支限界法"></a>6.2.1 队列式分支限界法</h3><p>求最大值问题,对<strong>单位重量价值</strong>递减排列</p>
<p>考虑上界:</p>
<ol>
<li>剩下所有物品都能装入,上界<img src="https://www.zhihu.com/equation?tex=e.v+%5CSigma_%7Bj=i+1%7D%5Env%5Bj%5D&preview=true" alt="公式"></li>
<li>不能放入,最多放到第k个,那么上界为<img src="https://www.zhihu.com/equation?tex=e.v+%5CSigma_%7Bj=i+1%7D%5Env%5Bj%5D&preview=true" alt="公式">+(k+1能放入的重量)*(k+1的单位重量)</li>
</ol>
<ol>
<li>先检查左边结点是否符合条件,符合条件才进行左孩子的建立,进行入队(左边考虑的是不超重)</li>
<li>右孩子先建立结点,计算上界,再考虑是否入队(右边考虑的是重量别太小)</li>
</ol>
<h3 id="6-2-2-优先队列分支限界法"><a href="#6-2-2-优先队列分支限界法" class="headerlink" title="6.2.2 优先队列分支限界法"></a>6.2.2 优先队列分支限界法</h3><p>指定条件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> NodeType &amp;s) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ub&lt;s.ub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重载运算符<code>&lt;</code> 按照ub值越大越优先出队</p>
<h3 id="Todo-写个比较"><a href="#Todo-写个比较" class="headerlink" title="Todo 写个比较"></a>Todo 写个比较</h3><h1 id="第七章-贪心算法"><a href="#第七章-贪心算法" class="headerlink" title="第七章 贪心算法"></a>第七章 贪心算法</h1><h2 id="7-1-2-贪心算法性质"><a href="#7-1-2-贪心算法性质" class="headerlink" title="7.1.2 贪心算法性质"></a>7.1.2 贪心算法性质</h2><p><strong>贪心选择性质</strong>:整体最优解可以通过一系列的局部最优选择来达到.即贪心法只在当前状态下做出最好的选择,然后再求解出这个选择后产生的相应子问题的解</p>
<p>即证明每一步的贪心选择最终导致整体的最优解-&gt;数学归纳法</p>
<p><strong>最优子结构性质</strong>:一个问题的最优解包含其子问题的最优解-&gt;反证法证明</p>
<h2 id="7-2-求解活动安排问题"><a href="#7-2-求解活动安排问题" class="headerlink" title="7.2 求解活动安排问题"></a>7.2 求解活动安排问题</h2><p>​    对于本问题，所有活动按结束时间递增排序，就是要证明：若*<strong>X**<em>是活动安排问题</em></strong>A*<strong>的最优解，**<em>X</em></strong>=<strong><em>X’</em></strong>∪{1}，则*<strong>X’**<em>是</em></strong>A’<strong><em>={</em></strong>i*<strong>∈**<em>A</em></strong>：*<strong>e<sub>i</sub>**<em>≥</em></strong>b<sub>1</sub>***}的活动安排问题的最优解。</p>
<p>​    当做出了对活动*<strong>1**<em>的贪心选择后，原问题就变成了在活动</em></strong>2*<strong>、**<em>…</em></strong>、*<strong>n**<em>中找与活动</em></strong>1*<strong>兼容的那些活动的子问题。亦即，如果**<em>X</em></strong>为原问题的一个最优解，则*<strong>X’**<em>=</em></strong>X*<strong>-{1}也是活动选择问题**<em>A’</em></strong>={<strong><em>i</em></strong>∈*<strong>A*** |*</strong>b<sub>i</sub><strong><em>≥</em></strong>e<sub>1</sub>***}的一个最优解。</p>
<p>首先证明总存在一个以活动**<em>1**</em>开始的最优解。</p>
<p>  如果第一个选中的活动为*<strong>k**<em>（</em></strong>k*<strong>≠**<em>1</em></strong>），可以构造另一个最优解*<strong>Y**<em>，</em></strong>Y*<strong>中的活动是兼容的，**<em>Y</em></strong>与**<em>X**</em>的活动数相同。</p>
<p>  那么用活动*<strong>1**<em>取代活动</em></strong>k*<strong>得到**<em>Y’</em></strong>，因为*<strong>e<sub>1</sub>**<em>≤</em></strong>e<sub>k</sub><strong><em>，所以</em></strong>Y’<strong><em>中的活动是兼容的，即</em></strong>Y’<strong><em>也是最优的，这就说明总存在一个以活动</em></strong>1***开始的最优解。</p>
<p>反证法：如果能找到一个*<strong>A’**<em>的含有比</em></strong>X’<strong><em>更多活动的解</em></strong>Y’<strong><em>，则将活动</em></strong>1*<strong>加入**<em>Y’</em></strong>后就得到*<strong>A**<em>的一个包含比</em></strong>X*<strong>更多活动的解**<em>Y</em></strong>，这就与**<em>X**</em>是最优解的假设相矛盾</p>
<p>  因此，在每一次贪心选择后，留下的是一个与原问题具有相同形式的最优化问题，即最优子结构性质。</p>
<p>思路:</p>
<pre><code> 1. 排序
 2. X最优,证明取第一个最优
      1. 取k≠1,构造一个另外的最优解Y
      2. 用1替换k,得到Y&#39;也是最优的
 3. 在剩下的问题中找与1**兼容**的子问题的最优解
 4. ( 第k个成立&#123;1,2,3...k&#125; U B,活动剩下S&#39;)
 5. B有S&#39;中的第一个活动,设为k+1 即 &#123;1,2,3...k&#125; U B = &#123;1,2,3...k+1&#125; U (B - (k+1) )
</code></pre>
<h2 id="7-3-背包问题"><a href="#7-3-背包问题" class="headerlink" title="7.3 背包问题"></a>7.3 背包问题</h2><p>排序</p>
<p>设Y最优</p>
<p>反证法即证明V(x)-V(y)&gt;=0</p>
<p>V<sub>i</sub>X<sub>i</sub>=W<sub>i</sub>*(V<sub>i</sub>/W<sub>i</sub>)X<sub>i</sub></p>
<p>找到一个X<sub>i</sub>不为整数的值minj 分类讨论,得出**V<sub>i</sub>/W<sub>i</sub> **关系,X<sub>i</sub> - Y<sub>i</sub>关系</p>
<ol>
<li>i&lt;minj,X<sub>i</sub>=1  </li>
<li>i&gt;minj,X<sub>i</sub>=0</li>
<li>i=minj,X<sub>i</sub>取部分</li>
</ol>
<p>将V(x)-V(y)&gt;=0展开计算</p>
<h1 id="第八章-动态规划"><a href="#第八章-动态规划" class="headerlink" title="第八章 动态规划"></a>第八章 动态规划</h1><h2 id="8-2-整数拆分"><a href="#8-2-整数拆分" class="headerlink" title="8.2 整数拆分"></a>8.2 整数拆分</h2><p>问题 正整数m无序拆分成<strong>最大数</strong>为k的拆分方案个数</p>
<p>n=5,k=5</p>
<ol>
<li>5=5</li>
<li>5=4+1</li>
<li>5=3+2</li>
<li>5=3+1+1</li>
<li>5=2+2+1</li>
<li>5=2+1+1+1</li>
<li>5=1+1+1+1+1</li>
</ol>
<p>分析:</p>
<ol>
<li>n=1或k=1,f(n,k)=1    n=1只有1=1; k=1,只有n=1+1+…+1</li>
<li>n&lt;k,f(n,k)=f(n,n)    最大数为k,然而正整数最大为n=n,k的限制无意义</li>
<li>n=k,f(n,n)=1+f(n,n-1)    先拆成n=n,一种方案,加上f(n,n-1)</li>
<li>n&gt;k,f(n,k)=f(n,k-1) + f(n-k,k)<ol>
<li>f(n,k-1)    拆分之后不含k,即最大拆分为k-1 (最大的情况为 n=(k-1)+…)</li>
<li>f(n-k,k)    拆分之后右边含k,先拆个k出来 ,对剩下的继续拆分(n=k+….)</li>
</ol>
</li>
</ol>
<h2 id="8-5-最长公共子序列"><a href="#8-5-最长公共子序列" class="headerlink" title="8.5 最长公共子序列"></a>8.5 最长公共子序列</h2><p><img src="https://www.zhihu.com/equation?tex=A=(a_0,a_1,...,a_%7Bm-1%7D)&preview=true">  <img src="https://www.zhihu.com/equation?tex=B=(b_0,b_1,...,b_%7Bn-1%7D)&preview=true">  <img src="https://www.zhihu.com/equation?tex=Z=(z_0,z_1,...,z_%7Bk-1%7D)&preview=true">为A和B的最长子集</p>
<ol>
<li>$a_{m-1}$ = $b_{n-1}$ 则 $z_{n-1}$ =$a_{m-1}$ = $b_{n-1}$ 那么($z_{0}$,$z_{1}$,…,$z_{k-2}$)是($a_{0}$,$a_{1}$,…,$a_{m-2}$)和($b_{0}$,$b_{1}$,…,$b_{n-2}$)的一个最长公共子集</li>
<li>$a_{m-1} \not= b_{n-1}$<ol>
<li>$z_{k-1} \not=a_{m-1}$ ($z_{0}$,$z_{1}$,…,$z_{k-1}$)是($a_{0}$,$a_{1}$,…,$a_{m-2}$)和($b_{0}$,$b_{1}$,…,$b_{n-1}$)的一个最长公共子集</li>
<li>$z_{k-1} \not=b_{n-1}$ ($z_{0}$,$z_{1}$,…,$z_{k-1}$)是($a_{0}$,$a_{1}$,…,$a_{m-1}$)和($b_{0}$,$b_{1}$,…,$b_{n-2}$)的一个最长公共子集</li>
</ol>
</li>
</ol>
<ol>
<li><p>$dp[i][j] $= 0，     i=0或j=0,边界情况</p>
</li>
<li><p>$dp[i][j] = dp[i-1][j-1] +1$，   $a[i-1]=b[j-1]$</p>
</li>
<li><p>$dp[i][j] = MAX(dp[i][j-1],dp[i-1][j])$，   $a[i-1]\not=b[j-1]$</p>
</li>
</ol>
<p>时间复杂度:$O(mn)$</p>
<h2 id="8-8-0-1-背包"><a href="#8-8-0-1-背包" class="headerlink" title="8.8 0/1 背包"></a>8.8 0/1 背包</h2><p>$dp[i][r]$ i表示第i个物品,r表示剩下容量</p>
<p>$dp[i][0] = 0$    边界条件 (剩下容量0)</p>
<p>$dp[0][r] = 0$   边界条件 (没有物品)</p>
<p>$dp[i][r] = dp[i-1][r]$  r&lt;w[i] 无法放下物品</p>
<p>$dp[i][r] = max(dp[i-1][r],dp[i-1][r-w[i]]+v[i]) $  不选或者选 第i个物品</p>
<p>时间复杂度$O(nW)$</p>
<p>Todo 表</p>
<h2 id="8-12-滚动数组"><a href="#8-12-滚动数组" class="headerlink" title="8.12 滚动数组"></a>8.12 滚动数组</h2><h3 id="8-12-1-滚动数组"><a href="#8-12-1-滚动数组" class="headerlink" title="8.12.1 滚动数组"></a>8.12.1 滚动数组</h3><p>每次操作仅保留若干个有用信息,新的元素不断循环刷新</p>
<p>一般用%来实现滚动</p>
<p>降低空间复杂度</p>
<h3 id="8-12-2-滚动数组解决-0-1背包问题"><a href="#8-12-2-滚动数组解决-0-1背包问题" class="headerlink" title="8.12.2 滚动数组解决 0/1背包问题"></a>8.12.2 滚动数组解决 0/1背包问题</h3><p>$dp[i][<em>]$只与 $dp[i-1][</em>]$ 有关</p>
<h1 id="第十一章-计算复杂性理论"><a href="#第十一章-计算复杂性理论" class="headerlink" title="第十一章 计算复杂性理论"></a>第十一章 计算复杂性理论</h1><h2 id="11-1-1-求解问题分类"><a href="#11-1-1-求解问题分类" class="headerlink" title="11.1.1 求解问题分类"></a>11.1.1 求解问题分类</h2><p>多项式时间-&gt;易解</p>
<p>指数时间-&gt;难解</p>
<p>时间复杂度分3类</p>
<ol>
<li>存在多项式</li>
<li>肯定不存在多项式</li>
<li>尚未找到,不能证明不存在</li>
</ol>
<h2 id="11-2-P类和NP类问题"><a href="#11-2-P类和NP类问题" class="headerlink" title="11.2 P类和NP类问题"></a>11.2 P类和NP类问题</h2><p>已经找到的多项式时间界的计算机的计算机算法问题-&gt;P类问题</p>
<p>用确定性图灵机以多项式时间界可解的问题 -&gt;P类问题</p>
<p>用非确定性图灵机以多项式时间界可解的问题 -&gt;NP类问题</p>
<p>确定性图灵机是非确定性图灵机的特殊情况  $P\subseteq NP$</p>
<p>P-&gt;能在多项式时间求解</p>
<p>NP-&gt;给定正确</p>
<p>NP问题的代表问题之一是旅行商旅行（TSP）问题。</p>
<p>　　目前发现的NP问题还有很多，如布尔表达式的可满足性问题、图的顶点覆盖问题和背包问题等等</p>
<h2 id="11-3-NPC问题"><a href="#11-3-NPC问题" class="headerlink" title="11.3 NPC问题"></a>11.3 NPC问题</h2><p>NPC（NP-completeness）的概念表明找到某个问题的有效算法至少和找NP中所有问题的有效算法一样难。</p>
<p>这里的有效性的含义是指为求解问题设计的算法的时间为多项式级的。</p>
<p>布尔表达式的可满足性问题是一个NPC问题</p>
<p>归纳起来，NP问题包含P问题和NPC问题，目前属于多项式时间界求解的问题都属P问题，NPC问题是属于NP问题中最难的问题，目前尚不能确定能否用多项式时间界算法来求解。<br>　　但已证明，如果NPC问题中有一个问题能用多项式时间界算法求解，则所有NPC问题都可用多项式时间界算法求解。</p>
]]></content>
      <categories>
        <category>JNU</category>
        <category>期末</category>
      </categories>
      <tags>
        <tag>JNU</tag>
        <tag>期末</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 -01</title>
    <url>/posts/6094bbc2.html</url>
    <content><![CDATA[<h1 id="ASCII编码表"><a href="#ASCII编码表" class="headerlink" title="ASCII编码表"></a>ASCII编码表</h1><div class="hide-block"><button type="button" class="hide-button" style="background-color: bg;color: color">显示
    </button><div class="hide-content"><table>
<caption>
ASCII 编码一览表（淡黄色背景为控制字符，白色背景为可显示字符）</caption>
<tbody>
<tr>
<th>
二进制</th>
<th>
十进制</th>
<th>
十六进制</th>
<th>
字符/缩写</th>
<th>
解释</th>
</tr>
<tr class="bg-ctrl">
<td>
00000000</td>
<td>
0</td>
<td>
00</td>
<td>
NUL (NULL)</td>
<td>
空字符</td>
</tr>
<tr class="bg-ctrl">
<td>
00000001</td>
<td>
1</td>
<td>
01</td>
<td>
SOH (Start Of Headling)</td>
<td>
标题开始</td>
</tr>
<tr class="bg-ctrl">
<td>
00000010</td>
<td>
2</td>
<td>
02</td>
<td>
STX (Start Of Text)</td>
<td>
正文开始</td>
</tr>
<tr class="bg-ctrl">
<td>
00000011</td>
<td>
3</td>
<td>
03</td>
<td>
ETX (End Of Text)</td>
<td>
正文结束</td>
</tr>
<tr class="bg-ctrl">
<td>
00000100</td>
<td>
4</td>
<td>
04</td>
<td>
EOT (End Of Transmission)</td>
<td>
传输结束</td>
</tr>
<tr class="bg-ctrl">
<td>
00000101</td>
<td>
5</td>
<td>
05</td>
<td>
ENQ (Enquiry)</td>
<td>
请求</td>
</tr>
<tr class="bg-ctrl">
<td>
00000110</td>
<td>
6</td>
<td>
06</td>
<td>
ACK (Acknowledge)</td>
<td>
回应/响应/收到通知</td>
</tr>
<tr class="bg-ctrl">
<td>
00000111</td>
<td>
7</td>
<td>
07</td>
<td>
BEL (Bell)</td>
<td>
响铃</td>
</tr>
<tr class="bg-ctrl">
<td>
00001000</td>
<td>
8</td>
<td>
08</td>
<td>
BS (Backspace)</td>
<td>
退格</td>
</tr>
<tr class="bg-ctrl">
<td>
00001001</td>
<td>
9</td>
<td>
09</td>
<td>
HT (Horizontal Tab)</td>
<td>
水平制表符</td>
</tr>
<tr class="bg-ctrl">
<td>
00001010</td>
<td>
10</td>
<td>
0A</td>
<td>
LF/NL(Line Feed/New Line)</td>
<td>
换行键</td>
</tr>
<tr class="bg-ctrl">
<td>
00001011</td>
<td>
11</td>
<td>
0B</td>
<td>
VT (Vertical Tab)</td>
<td>
垂直制表符</td>
</tr>
<tr class="bg-ctrl">
<td>
00001100</td>
<td>
12</td>
<td>
0C</td>
<td>
FF/NP (Form Feed/New Page)</td>
<td>
换页键</td>
</tr>
<tr class="bg-ctrl">
<td>
00001101</td>
<td>
13</td>
<td>
0D</td>
<td>
CR (Carriage Return)</td>
<td>
回车键</td>
</tr>
<tr class="bg-ctrl">
<td>
00001110</td>
<td>
14</td>
<td>
0E</td>
<td>
SO (Shift Out)</td>
<td>
不用切换</td>
</tr>
<tr class="bg-ctrl">
<td>
00001111</td>
<td>
15</td>
<td>
0F</td>
<td>
SI (Shift In)</td>
<td>
启用切换</td>
</tr>
<tr class="bg-ctrl">
<td>
00010000</td>
<td>
16</td>
<td>
10</td>
<td>
DLE (Data Link Escape)</td>
<td>
数据链路转义</td>
</tr>
<tr class="bg-ctrl">
<td>
00010001</td>
<td>
17</td>
<td>
11</td>
<td>
DC1/XON<br>
(Device Control 1/Transmission On)</td>
<td>
设备控制1/传输开始</td>
</tr>
<tr class="bg-ctrl">
<td>
00010010</td>
<td>
18</td>
<td>
12</td>
<td>
DC2 (Device Control 2)</td>
<td>
设备控制2</td>
</tr>
<tr class="bg-ctrl">
<td>
00010011</td>
<td>
19</td>
<td>
13</td>
<td>
DC3/XOFF<br>
(Device Control 3/Transmission Off)</td>
<td>
设备控制3/传输中断</td>
</tr>
<tr class="bg-ctrl">
<td>
00010100</td>
<td>
20</td>
<td>
14</td>
<td>
DC4 (Device Control 4)</td>
<td>
设备控制4</td>
</tr>
<tr class="bg-ctrl">
<td>
00010101</td>
<td>
21</td>
<td>
15</td>
<td>
NAK (Negative Acknowledge)</td>
<td>
无响应/非正常响应/拒绝接收</td>
</tr>
<tr class="bg-ctrl">
<td>
00010110</td>
<td>
22</td>
<td>
16</td>
<td>
SYN (Synchronous Idle)</td>
<td>
同步空闲</td>
</tr>
<tr class="bg-ctrl">
<td>
00010111</td>
<td>
23</td>
<td>
17</td>
<td>
ETB (End of Transmission Block)</td>
<td>
传输块结束/块传输终止</td>
</tr>
<tr class="bg-ctrl">
<td>
00011000</td>
<td>
24</td>
<td>
18</td>
<td>
CAN (Cancel)</td>
<td>
取消</td>
</tr>
<tr class="bg-ctrl">
<td>
00011001</td>
<td>
25</td>
<td>
19</td>
<td>
EM (End of Medium)</td>
<td>
已到介质末端/介质存储已满/介质中断</td>
</tr>
<tr class="bg-ctrl">
<td>
00011010</td>
<td>
26</td>
<td>
1A</td>
<td>
SUB (Substitute)</td>
<td>
替补/替换</td>
</tr>
<tr class="bg-ctrl">
<td>
00011011</td>
<td>
27</td>
<td>
1B</td>
<td>
ESC (Escape)</td>
<td>
逃离/取消</td>
</tr>
<tr class="bg-ctrl">
<td>
00011100</td>
<td>
28</td>
<td>
1C</td>
<td>
FS (File Separator)</td>
<td>
文件分割符</td>
</tr>
<tr class="bg-ctrl">
<td>
00011101</td>
<td>
29</td>
<td>
1D</td>
<td>
GS (Group Separator)</td>
<td>
组分隔符/分组符</td>
</tr>
<tr class="bg-ctrl">
<td>
00011110</td>
<td>
30</td>
<td>
1E</td>
<td>
RS (Record Separator)</td>
<td>
记录分离符</td>
</tr>
<tr class="bg-ctrl">
<td>
00011111</td>
<td>
31</td>
<td>
1F</td>
<td>
US (Unit Separator)</td>
<td>
单元分隔符</td>
</tr>
<tr>
<td>
00100000</td>
<td>
32</td>
<td>
20</td>
<td>
(Space)</td>
<td>
空格</td>
</tr>
<tr>
<td>
00100001</td>
<td>
33</td>
<td>
21</td>
<td>
!</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00100010</td>
<td>
34</td>
<td>
22</td>
<td>
"</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00100011</td>
<td>
35</td>
<td>
23</td>
<td>
#</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00100100</td>
<td>
36</td>
<td>
24</td>
<td>
$</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00100101</td>
<td>
37</td>
<td>
25</td>
<td>
%</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00100110</td>
<td>
38</td>
<td>
26</td>
<td>
&amp;</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00100111</td>
<td>
39</td>
<td>
27</td>
<td>
'</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00101000</td>
<td>
40</td>
<td>
28</td>
<td>
(</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00101001</td>
<td>
41</td>
<td>
29</td>
<td>
)</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00101010</td>
<td>
42</td>
<td>
2A</td>
<td>
*</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00101011</td>
<td>
43</td>
<td>
2B</td>
<td>
+</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00101100</td>
<td>
44</td>
<td>
2C</td>
<td>
,</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00101101</td>
<td>
45</td>
<td>
2D</td>
<td>
-</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00101110</td>
<td>
46</td>
<td>
2E</td>
<td>
.</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00101111</td>
<td>
47</td>
<td>
2F</td>
<td>
/</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00110000</td>
<td>
48</td>
<td>
30</td>
<td>
0</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00110001</td>
<td>
49</td>
<td>
31</td>
<td>
1</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00110010</td>
<td>
50</td>
<td>
32</td>
<td>
2</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00110011</td>
<td>
51</td>
<td>
33</td>
<td>
3</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00110100</td>
<td>
52</td>
<td>
34</td>
<td>
4</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00110101</td>
<td>
53</td>
<td>
35</td>
<td>
5</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00110110</td>
<td>
54</td>
<td>
36</td>
<td>
6</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00110111</td>
<td>
55</td>
<td>
37</td>
<td>
7</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00111000</td>
<td>
56</td>
<td>
38</td>
<td>
8</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00111001</td>
<td>
57</td>
<td>
39</td>
<td>
9</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00111010</td>
<td>
58</td>
<td>
3A</td>
<td>
:</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00111011</td>
<td>
59</td>
<td>
3B</td>
<td>
;</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00111100</td>
<td>
60</td>
<td>
3C</td>
<td>
&lt;</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00111101</td>
<td>
61</td>
<td>
3D</td>
<td>
=</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00111110</td>
<td>
62</td>
<td>
3E</td>
<td>
&gt;</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
00111111</td>
<td>
63</td>
<td>
3F</td>
<td>
?</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01000000</td>
<td>
64</td>
<td>
40</td>
<td>
@</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01000001</td>
<td>
65</td>
<td>
41</td>
<td>
A</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01000010</td>
<td>
66</td>
<td>
42</td>
<td>
B</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01000011</td>
<td>
67</td>
<td>
43</td>
<td>
C</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01000100</td>
<td>
68</td>
<td>
44</td>
<td>
D</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01000101</td>
<td>
69</td>
<td>
45</td>
<td>
E</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01000110</td>
<td>
70</td>
<td>
46</td>
<td>
F</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01000111</td>
<td>
71</td>
<td>
47</td>
<td>
G</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01001000</td>
<td>
72</td>
<td>
48</td>
<td>
H</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01001001</td>
<td>
73</td>
<td>
49</td>
<td>
I</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01001010</td>
<td>
74</td>
<td>
4A</td>
<td>
J</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01001011</td>
<td>
75</td>
<td>
4B</td>
<td>
K</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01001100</td>
<td>
76</td>
<td>
4C</td>
<td>
L</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01001101</td>
<td>
77</td>
<td>
4D</td>
<td>
M</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01001110</td>
<td>
78</td>
<td>
4E</td>
<td>
N</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01001111</td>
<td>
79</td>
<td>
4F</td>
<td>
O</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01010000</td>
<td>
80</td>
<td>
50</td>
<td>
P</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01010001</td>
<td>
81</td>
<td>
51</td>
<td>
Q</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01010010</td>
<td>
82</td>
<td>
52</td>
<td>
R</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01010011</td>
<td>
83</td>
<td>
53</td>
<td>
S</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01010100</td>
<td>
84</td>
<td>
54</td>
<td>
T</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01010101</td>
<td>
85</td>
<td>
55</td>
<td>
U</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01010110</td>
<td>
86</td>
<td>
56</td>
<td>
V</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01010111</td>
<td>
87</td>
<td>
57</td>
<td>
W</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01011000</td>
<td>
88</td>
<td>
58</td>
<td>
X</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01011001</td>
<td>
89</td>
<td>
59</td>
<td>
Y</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01011010</td>
<td>
90</td>
<td>
5A</td>
<td>
Z</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01011011</td>
<td>
91</td>
<td>
5B</td>
<td>
[</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01011100</td>
<td>
92</td>
<td>
5C</td>
<td>
\</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01011101</td>
<td>
93</td>
<td>
5D</td>
<td>
]</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01011110</td>
<td>
94</td>
<td>
5E</td>
<td>
^</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01011111</td>
<td>
95</td>
<td>
5F</td>
<td>
_</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01100000</td>
<td>
96</td>
<td>
60</td>
<td>
`</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01100001</td>
<td>
97</td>
<td>
61</td>
<td>
a</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01100010</td>
<td>
98</td>
<td>
62</td>
<td>
b</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01100011</td>
<td>
99</td>
<td>
63</td>
<td>
c</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01100100</td>
<td>
100</td>
<td>
64</td>
<td>
d</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01100101</td>
<td>
101</td>
<td>
65</td>
<td>
e</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01100110</td>
<td>
102</td>
<td>
66</td>
<td>
f</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01100111</td>
<td>
103</td>
<td>
67</td>
<td>
g</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01101000</td>
<td>
104</td>
<td>
68</td>
<td>
h</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01101001</td>
<td>
105</td>
<td>
69</td>
<td>
i</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01101010</td>
<td>
106</td>
<td>
6A</td>
<td>
j</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01101011</td>
<td>
107</td>
<td>
6B</td>
<td>
k</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01101100</td>
<td>
108</td>
<td>
6C</td>
<td>
l</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01101101</td>
<td>
109</td>
<td>
6D</td>
<td>
m</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01101110</td>
<td>
110</td>
<td>
6E</td>
<td>
n</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01101111</td>
<td>
111</td>
<td>
6F</td>
<td>
o</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01110000</td>
<td>
112</td>
<td>
70</td>
<td>
p</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01110001</td>
<td>
113</td>
<td>
71</td>
<td>
q</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01110010</td>
<td>
114</td>
<td>
72</td>
<td>
r</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01110011</td>
<td>
115</td>
<td>
73</td>
<td>
s</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01110100</td>
<td>
116</td>
<td>
74</td>
<td>
t</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01110101</td>
<td>
117</td>
<td>
75</td>
<td>
u</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01110110</td>
<td>
118</td>
<td>
76</td>
<td>
v</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01110111</td>
<td>
119</td>
<td>
77</td>
<td>
w</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01111000</td>
<td>
120</td>
<td>
78</td>
<td>
x</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01111001</td>
<td>
121</td>
<td>
79</td>
<td>
y</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01111010</td>
<td>
122</td>
<td>
7A</td>
<td>
z</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01111011</td>
<td>
123</td>
<td>
7B</td>
<td>
{</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01111100</td>
<td>
124</td>
<td>
7C</td>
<td>
|</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01111101</td>
<td>
125</td>
<td>
7D</td>
<td>
}</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
01111110</td>
<td>
126</td>
<td>
7E</td>
<td>
~</td>
<td>
&nbsp;</td>
</tr>
<tr class="bg-ctrl">
<td>
01111111</td>
<td>
127</td>
<td>
7F</td>
<td>
DEL (Delete)</td>
<td>
删除</td>
</tr>
</tbody>
</table>
</div></div>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="int-整数"><a href="#int-整数" class="headerlink" title="int 整数"></a>int 整数</h2><p>int =&gt; 4字节<br>unsigned int =&gt; 4字节<br>short int =&gt; 2字节<br>long int =&gt; 8字节</p>
<p>可以用sizeof(int)来获取字节数</p>
<p>定义的话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">short a &#x3D; 10;</span><br><span class="line">long b &#x3D; 100;</span><br><span class="line">int c &#x3D; 12;</span><br><span class="line">unsigned a &#x3D;1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以把int直接省略</p>
</blockquote>
<p>输出<br><code>%hd</code> =&gt; short int<br><code>%d</code> =&gt; int<br><code>%ld</code> =&gt; long int</p>
<h3 id="关于-unsigned"><a href="#关于-unsigned" class="headerlink" title="关于 unsigned"></a>关于 unsigned</h3><p>数据是按照二进制的方式存储<br><img src="http://hi.csdn.net/attachment/201008/11/0_1281513416szmm.gif" alt><br><img src="/posts/6094bbc2/c%E8%AF%AD%E8%A8%80.gif"><br>如果是signed(默认)的话,第一位0表示的是+号,第一位1表示的是-号<br>因此 当溢出的时候符号会改变<br>如果是unsigned的话,只能表示从0开始的数!</p>
<h2 id="float-浮点数"><a href="#float-浮点数" class="headerlink" title="float 浮点数"></a>float 浮点数</h2><p>指数的表示 1.2E5 = 1.2e5 = 1.2×10<sup>5</sup></p>
<p>float =&gt; 4字节<br>double =&gt; 8字节</p>
<p>输出</p>
<ul>
<li>%f 以十进制形式输出 float 类型</li>
<li>%lf 以十进制形式输出 double 类型</li>
<li>%e 以指数形式输出 float 类型，输出结果中的 e 小写</li>
<li>%E 以指数形式输出 float 类型，输出结果中的 E 大写</li>
<li>%le 以指数形式输出 double 类型，输出结果中的 e 小写</li>
<li>%lE 以指数形式输出 double 类型，输出结果中的 E 大写</li>
</ul>
<blockquote>
<p>注意<br>%f 和 %lf 默认保留6位小数 不足6位用0补齐,超过6位四舍五入<br>%n.mf 表示 域宽为 n,保留小数点后m位</p>
</blockquote>
<ul>
<li>%g 最多保留6位有效数字(不会补0)</li>
<li>%g 和 %lg 分别用来输出 float 类型和 double 类型，并且当以指数形式输出时，e小写。</li>
<li>%G 和 %lG 也分别用来输出 float 类型和 double 类型，只是当以指数形式输出时，E大写。</li>
</ul>
<blockquote>
</blockquote>
<p>%n.mg 表示 域宽为 n,保留m位有效数字</p>
<h2 id="int-与-float-转换"><a href="#int-与-float-转换" class="headerlink" title="int 与 float 转换"></a>int 与 float 转换</h2><p>如果将int转换为 float 会自动在末尾补0<br>如果将float转换为int,会自动去掉小数点后面的数(<strong><strong><strong>不是</strong></strong></strong>四舍五入)</p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p><code>\数字</code> 表示 八进制形式的编码值<br><code>\x数字</code>表示 十六进制形式的编码值</p>
<p>比如 a 的ASCII码 八进制为141 十六进制为61<br>那么可以表示为 \141 和 \x61</p>
<p>常见的表示</p>
<details class="toggle" style="border: 1px solid #66ccff"><summary class="toggle-button" style="background-color: #66ccff;color: #ffffff">显示</summary><div class="toggle-content"><table>
<tbody>
<tr>
<th>
转义字符</th>
<th>
意义</th>
<th>
ASCII码值（十进制）</th>
</tr>
<tr>
<td>
\a</td>
<td>
响铃(BEL)</td>
<td>
007</td>
</tr>
<tr>
<td>
\b</td>
<td>
退格(BS) ，将当前位置移到前一列</td>
<td>
008</td>
</tr>
<tr>
<td>
\f</td>
<td>
换页(FF)，将当前位置移到下页开头</td>
<td>
012</td>
</tr>
<tr>
<td>
\n</td>
<td>
换行(LF) ，将当前位置移到下一行开头</td>
<td>
010</td>
</tr>
<tr>
<td>
\r</td>
<td>
回车(CR) ，将当前位置移到本行开头</td>
<td>
013</td>
</tr>
<tr>
<td>
\t</td>
<td>
水平制表(HT)&nbsp;</td>
<td>
009</td>
</tr>
<tr>
<td>
\v</td>
<td>
垂直制表(VT)</td>
<td>
011</td>
</tr>
<tr>
<td>
\'</td>
<td>
单引号</td>
<td>
039</td>
</tr>
<tr>
<td>
\"</td>
<td>
双引号</td>
<td>
034</td>
</tr>
<tr>
<td>
\\</td>
<td>
反斜杠</td>
<td>
092</td>
</tr>
</tbody>
</table>
</div></details>

<h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><details class="toggle" style="border: 1px solid #66ccff"><summary class="toggle-button" style="background-color: #66ccff;color: #ffffff">数学运算</summary><div class="toggle-content"><table>
<tbody>
<tr>
<th>
&nbsp;</th>
<th>
加法</th>
<th>
减法</th>
<th>
乘法</th>
<th>
除法</th>
<th>
求余数（取余）</th>
</tr>
<tr>
<th>
数学</th>
<td>
+</td>
<td>
-</td>
<td>
×</td>
<td>
÷</td>
<td>
无</td>
</tr>
<tr>
<th>
C语言</th>
<td>
+</td>
<td>
-</td>
<td>
*</td>
<td>
/</td>
<td>
%</td>
</tr>
</tbody>
</table>
</div></details>

<blockquote>
<p>3/4 的结果为0 因为 0.75取整是0<br>如果 float a = 3/4 ,结果是 0.000000(先运算,再赋值)<br>3%-2=1 ;   -3%-2=-1</p>
</blockquote>
<p>a = a+1 =&gt; a += 1<br>其他同理</p>
<h2 id="自加-和自减–"><a href="#自加-和自减–" class="headerlink" title="自加++ 和自减–"></a>自加++ 和自减–</h2><p>a = a+1 =&gt; a++<br>a = a-1 =&gt; a–</p>
<h3 id="a-和-a的区别"><a href="#a-和-a的区别" class="headerlink" title="a++ 和 ++a的区别"></a>a++ 和 ++a的区别</h3><p>比如 a = 10</p>
<ol>
<li><p>a1 = a++</p>
<blockquote>
<p>a1 = 10,a = 11 </p>
</blockquote>
</li>
<li><p>a1 = ++a</p>
<blockquote>
<p>a1 = 11 ,a = 11</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>即 a++ 就是先将a的结果赋值给a1 然后再计算a+1<br>++a 就是先a+1,然后将结果赋值给a1</p>
</blockquote>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><details class="toggle" style="border: 1px solid #66ccff"><summary class="toggle-button" style="background-color: #66ccff;color: #ffffff">优先级</summary><div class="toggle-content"><table>
<tbody>
<tr>
<th>
<p>
优先级</p>
</th>
<th>
<p>
运算符</p>
</th>
<th>
<p>
名称或含义</p>
</th>
<th>
<p>
使用形式</p>
</th>
<th>
<p>
结合方向</p>
</th>
<th>
<p>
说明</p>
</th>
</tr>
<tr>
<td rowspan="4">
<p>
1</p>
</td>
<td>
<p>
[]</p>
</td>
<td>
<p>
数组下标</p>
</td>
<td>
<p>
数组名[常量表达式]</p>
</td>
<td rowspan="4">
<p>
左到右</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
()</p>
</td>
<td>
<p>
圆括号</p>
</td>
<td>
<p>
(表达式)<br>
函数名(形参表)</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
.</p>
</td>
<td>
<p>
成员选择（对象）</p>
</td>
<td>
<p>
对象.成员名</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
-&gt;</p>
</td>
<td>
<p>
成员选择（指针）</p>
</td>
<td>
<p>
对象指针-&gt;成员名</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td rowspan="9">
<p>
2</p>
</td>
<td>
<p>
-</p>
</td>
<td>
<p>
负号运算符</p>
</td>
<td>
<p>
-表达式</p>
</td>
<td rowspan="9">
<p>
右到左</p>
</td>
<td>
<p>
单目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
(类型)</p>
</td>
<td>
<p>
强制类型转换</p>
</td>
<td>
<p>
(数据类型)表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
++</p>
</td>
<td>
<p>
自增运算符</p>
</td>
<td>
<p>
++变量名<br>
变量名++</p>
</td>
<td>
<p>
单目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
--</p>
</td>
<td>
<p>
自减运算符</p>
</td>
<td>
<p>
--变量名<br>
变量名--</p>
</td>
<td>
<p>
单目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
*</p>
</td>
<td>
<p>
取值运算符</p>
</td>
<td>
<p>
*指针变量</p>
</td>
<td>
<p>
单目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
&amp;</p>
</td>
<td>
<p>
取地址运算符</p>
</td>
<td>
<p>
&amp;变量名</p>
</td>
<td>
<p>
单目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
!</p>
</td>
<td>
<p>
逻辑非运算符</p>
</td>
<td>
<p>
!表达式</p>
</td>
<td>
<p>
单目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
~</p>
</td>
<td>
<p>
按位取反运算符</p>
</td>
<td>
<p>
~表达式</p>
</td>
<td>
<p>
单目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
sizeof</p>
</td>
<td>
<p>
长度运算符</p>
</td>
<td>
<p>
sizeof(表达式)</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td rowspan="3">
<p>
3</p>
</td>
<td>
<p>
/</p>
</td>
<td>
<p>
除</p>
</td>
<td>
<p>
表达式 / 表达式</p>
</td>
<td rowspan="3">
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
*</p>
</td>
<td>
<p>
乘</p>
</td>
<td>
<p>
表达式*表达式</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
%</p>
</td>
<td>
<p>
余数（取模）</p>
</td>
<td>
<p>
整型表达式%整型表达式</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td rowspan="2">
<p>
4</p>
</td>
<td>
<p>
+</p>
</td>
<td>
<p>
加</p>
</td>
<td>
<p>
表达式+表达式</p>
</td>
<td rowspan="2">
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
-</p>
</td>
<td>
<p>
减</p>
</td>
<td>
<p>
表达式-表达式</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td rowspan="2">
<p>
5</p>
</td>
<td>
<p>
&lt;&lt;</p>
</td>
<td>
<p>
左移</p>
</td>
<td>
<p>
变量&lt;&lt;表达式</p>
</td>
<td rowspan="2">
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
&gt;&gt;</p>
</td>
<td>
<p>
右移</p>
</td>
<td>
<p>
变量&gt;&gt;表达式</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td rowspan="4">
<p>
6</p>
</td>
<td>
<p>
&gt;</p>
</td>
<td>
<p>
大于</p>
</td>
<td>
<p>
表达式&gt;表达式</p>
</td>
<td rowspan="4">
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
&gt;=</p>
</td>
<td>
<p>
大于等于</p>
</td>
<td>
<p>
表达式&gt;=表达式</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
&lt;</p>
</td>
<td>
<p>
小于</p>
</td>
<td>
<p>
表达式&lt;表达式</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
&lt;=</p>
</td>
<td>
<p>
小于等于</p>
</td>
<td>
<p>
表达式&lt;=表达式</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td rowspan="2">
<p>
7</p>
</td>
<td>
<p>
==</p>
</td>
<td>
<p>
等于</p>
</td>
<td>
<p>
表达式==表达式</p>
</td>
<td rowspan="2">
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
!=</p>
</td>
<td>
<p>
不等于</p>
</td>
<td>
<p>
表达式!= 表达式</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
8</p>
</td>
<td>
<p>
&amp;</p>
</td>
<td>
<p>
按位与</p>
</td>
<td>
<p>
表达式&amp;表达式</p>
</td>
<td>
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
9</p>
</td>
<td>
<p>
^</p>
</td>
<td>
<p>
按位异或</p>
</td>
<td>
<p>
表达式^表达式</p>
</td>
<td>
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
10</p>
</td>
<td>
<p>
|</p>
</td>
<td>
<p>
按位或</p>
</td>
<td>
<p>
表达式|表达式</p>
</td>
<td>
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
11</p>
</td>
<td>
<p>
&amp;&amp;</p>
</td>
<td>
<p>
逻辑与</p>
</td>
<td>
<p>
表达式&amp;&amp;表达式</p>
</td>
<td>
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
12</p>
</td>
<td>
<p>
||</p>
</td>
<td>
<p>
逻辑或</p>
</td>
<td>
<p>
表达式||表达式</p>
</td>
<td>
<p>
左到右</p>
</td>
<td>
<p>
双目运算符</p>
</td>
</tr>
<tr>
<td>
<p>
13</p>
</td>
<td>
<p>
?:</p>
</td>
<td>
<p>
条件运算符</p>
</td>
<td>
<p>
表达式1? 表达式2: 表达式3</p>
</td>
<td>
<p>
右到左</p>
</td>
<td>
<p>
三目运算符</p>
</td>
</tr>
<tr>
<td rowspan="11">
<p>
14</p>
</td>
<td>
<p>
=</p>
</td>
<td>
<p>
赋值运算符</p>
</td>
<td>
<p>
变量=表达式</p>
</td>
<td rowspan="11">
<p>
右到左</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
/=</p>
</td>
<td>
<p>
除后赋值</p>
</td>
<td>
<p>
变量/=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
*=</p>
</td>
<td>
<p>
乘后赋值</p>
</td>
<td>
<p>
变量*=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
%=</p>
</td>
<td>
<p>
取模后赋值</p>
</td>
<td>
<p>
变量%=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
+=</p>
</td>
<td>
<p>
加后赋值</p>
</td>
<td>
<p>
变量+=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
-=</p>
</td>
<td>
<p>
减后赋值</p>
</td>
<td>
<p>
变量-=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
&lt;&lt;=</p>
</td>
<td>
<p>
左移后赋值</p>
</td>
<td>
<p>
变量&lt;&lt;=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
&gt;&gt;=</p>
</td>
<td>
<p>
右移后赋值</p>
</td>
<td>
<p>
变量&gt;&gt;=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
&amp;=</p>
</td>
<td>
<p>
按位与后赋值</p>
</td>
<td>
<p>
变量&amp;=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
^=</p>
</td>
<td>
<p>
按位异或后赋值</p>
</td>
<td>
<p>
变量^=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
|=</p>
</td>
<td>
<p>
按位或后赋值</p>
</td>
<td>
<p>
变量|=表达式</p>
</td>
<td>
&nbsp;</td>
</tr>
<tr>
<td>
<p>
15</p>
</td>
<td>
<p>
,</p>
</td>
<td>
<p>
逗号运算符</p>
</td>
<td>
<p>
表达式,表达式,…</p>
</td>
<td>
<p>
左到右</p>
</td>
<td>
<p>
&nbsp;</p>
</td>
</tr>
</tbody>
</table>
</div></details>


<h2 id="类型的转换"><a href="#类型的转换" class="headerlink" title="类型的转换"></a>类型的转换</h2><h3 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h3><p>比如 int a = 2.0 ,会自动将a赋值为2</p>
<h3 id="强转换"><a href="#强转换" class="headerlink" title="强转换"></a>强转换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a &#x3D; 3;</span><br><span class="line">float c;</span><br><span class="line">c &#x3D; (float) a&#x2F;4 ;</span><br><span class="line">printf(&quot;%f&quot;,c);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>直接将a转换为浮点数的形式</p>
<h2 id="转换的临时性"><a href="#转换的临时性" class="headerlink" title="转换的临时性"></a>转换的临时性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float a &#x3D; 1.9;</span><br><span class="line">int b &#x3D; (int) a;</span><br><span class="line">printf(&quot;%f&quot;,a) ;</span><br></pre></td></tr></table></figure>
<p>a的值还是1.900000,而b的值是1</p>
]]></content>
      <categories>
        <category>C</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Kaggle 手写数字识别</title>
    <url>/posts/4897d10b.html</url>
    <content><![CDATA[<div class="tip success"><p>指路<a class="btn-beautify button--animated outline" href="https://www.kaggle.com/competitions/digit-recognizer/overview" target="_blank" rel="noopener" title="Digit Recognizer">Digit Recognizer</a></p><p></p></div>

<p><a href="https://www.kaggle.com/competitions/digit-recognizer/overview">Digit Recognizer</a></p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol>
<li><p>左上 <code>+</code> 号</p>
</li>
<li><p><code>New Notebook</code></p>
</li>
</ol>
<h2 id="创建notebook"><a href="#创建notebook" class="headerlink" title="创建notebook"></a>创建notebook</h2><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><ol>
<li><p>右上 <strong><code>Add data</code></strong></p>
</li>
<li><p><strong><code>Competition Data</code></strong></p>
</li>
<li><p>搜索 <strong><code>digit-recognizer</code></strong></p>
</li>
</ol>
<h1 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line">root = <span class="string">&#x27;/kaggle/input/digit-recognizer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> dirname, _, filenames <span class="keyword">in</span> os.walk(<span class="string">&#x27;/kaggle/input&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(os.path.join(dirname, filename))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>/kaggle/input/digit-recognizer/sample_submission.csv<br>/kaggle/input/digit-recognizer/train.csv<br>/kaggle/input/digit-recognizer/test.csv</p>
</blockquote>
<h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data = pd.read_csv(os.path.join(root, <span class="string">&#x27;train.csv&#x27;</span>))</span><br><span class="line">test_data = pd.read_csv(os.path.join(root, <span class="string">&#x27;test.csv&#x27;</span>))</span><br><span class="line">print(<span class="string">&quot;train data:\n&quot;</span>,train_data.head())</span><br><span class="line">print(<span class="string">&quot;test data:\n&quot;</span>,test_data.head())</span><br></pre></td></tr></table></figure>
<pre>train data:
    label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \
0      1       0       0       0       0       0       0       0       0
1      0       0       0       0       0       0       0       0       0
2      1       0       0       0       0       0       0       0       0
3      4       0       0       0       0       0       0       0       0
4      0       0       0       0       0       0       0       0       0

   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \
0       0  ...         0         0         0         0         0         0
1       0  ...         0         0         0         0         0         0
2       0  ...         0         0         0         0         0         0
3       0  ...         0         0         0         0         0         0
4       0  ...         0         0         0         0         0         0

   pixel780  pixel781  pixel782  pixel783  
0         0         0         0         0  
1         0         0         0         0  
2         0         0         0         0  
3         0         0         0         0  
4         0         0         0         0  

[5 rows x 785 columns]
test data:
    pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \
0       0       0       0       0       0       0       0       0       0
1       0       0       0       0       0       0       0       0       0
2       0       0       0       0       0       0       0       0       0
3       0       0       0       0       0       0       0       0       0
4       0       0       0       0       0       0       0       0       0

   pixel9  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \
0       0  ...         0         0         0         0         0         0
1       0  ...         0         0         0         0         0         0
2       0  ...         0         0         0         0         0         0
3       0  ...         0         0         0         0         0         0
4       0  ...         0         0         0         0         0         0

   pixel780  pixel781  pixel782  pixel783  
0         0         0         0         0  
1         0         0         0         0  
2         0         0         0         0  
3         0         0         0         0  
4         0         0         0         0  

[5 rows x 784 columns]
</pre>

<h2 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>
<pre>label       0
pixel0      0
pixel1      0
pixel2      0
pixel3      0
           ..
pixel779    0
pixel780    0
pixel781    0
pixel782    0
pixel783    0
Length: 785, dtype: int64</pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.info()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>&lt;class ‘pandas.core.frame.DataFrame’&gt;<br>RangeIndex: 42000 entries, 0 to 41999<br>Columns: 785 entries, label to pixel783<br>dtypes: int64(785)<br>memory usage: 251.5 MB  </p>
</blockquote>
<p>资料没有缺失项 数据类型int64 42000行(42000个数字) 785列(784个特征+1个标签)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.columns</span><br></pre></td></tr></table></figure>
<pre>Index(['label', 'pixel0', 'pixel1', 'pixel2', 'pixel3', 'pixel4', 'pixel5',
       'pixel6', 'pixel7', 'pixel8',
       ...
       'pixel774', 'pixel775', 'pixel776', 'pixel777', 'pixel778', 'pixel779',
       'pixel780', 'pixel781', 'pixel782', 'pixel783'],
      dtype='object', length=785)</pre>

<p>784个特征值 1个标签</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.shape</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(42000, 785)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.describe() </span><br></pre></td></tr></table></figure>
<table>
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>label</th>
      <th>pixel0</th>
      <th>pixel1</th>
      <th>pixel2</th>
      <th>pixel3</th>
      <th>pixel4</th>
      <th>pixel5</th>
      <th>pixel6</th>
      <th>pixel7</th>
      <th>pixel8</th>
      <th>...</th>
      <th>pixel774</th>
      <th>pixel775</th>
      <th>pixel776</th>
      <th>pixel777</th>
      <th>pixel778</th>
      <th>pixel779</th>
      <th>pixel780</th>
      <th>pixel781</th>
      <th>pixel782</th>
      <th>pixel783</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>42000.000000</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>...</td>
      <td>42000.000000</td>
      <td>42000.000000</td>
      <td>42000.000000</td>
      <td>42000.00000</td>
      <td>42000.000000</td>
      <td>42000.000000</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
      <td>42000.0</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>4.456643</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>0.219286</td>
      <td>0.117095</td>
      <td>0.059024</td>
      <td>0.02019</td>
      <td>0.017238</td>
      <td>0.002857</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>std</th>
      <td>2.887730</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>6.312890</td>
      <td>4.633819</td>
      <td>3.274488</td>
      <td>1.75987</td>
      <td>1.894498</td>
      <td>0.414264</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.00000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>2.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.00000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>4.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.00000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>7.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.00000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>max</th>
      <td>9.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>254.000000</td>
      <td>254.000000</td>
      <td>253.000000</td>
      <td>253.00000</td>
      <td>254.000000</td>
      <td>62.000000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>8 rows × 785 columns</p>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sort(train_data[<span class="string">&#x27;label&#x27;</span>].unique())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</p>
</blockquote>
<p><code>.unique</code> 显示不重复的元素</p>
<p><code>.sort</code> 排序</p>
<p>可知标签为0~9的数</p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ul>
<li>由于数据没有缺失 所以不用数据处理</li>
</ul>
<p>介绍处理数据的几种方法</p>
<ol>
<li><p>缺失数据占比高</p>
<ul>
<li>直接去掉</li>
</ul>
</li>
<li><p>比例较高</p>
<ol>
<li>连续丢失:用平均数</li>
<li>离散丢失:用众数</li>
</ol>
</li>
</ol>
<ul>
<li>预处理</li>
</ul>
<ol>
<li><p>去掉不重要的特征项</p>
<blockquote>
<p>这里由于图片无法去除、缺失像素点,故不需要</p>
</blockquote>
</li>
<li><p>归一化 让数据落在0~1之间</p>
<blockquote>
<p>图片在0~255之间,可以除以255将数据集中[0,1]</p>
</blockquote>
</li>
<li><p>将标签编码化(整型比字符串时间复杂度低)</p>
<blockquote>
<p>可以使用onehot编码(这里不需要)</p>
</blockquote>
</li>
</ol>
<h1 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data_feature = train_data.drop(<span class="string">&#x27;label&#x27;</span>,axis=<span class="number">1</span>)  <span class="comment">#去掉label</span></span><br><span class="line">train_data_label = train_data[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">train_data_feature = train_data_feature/<span class="number">255</span> <span class="comment">#将值映射到[0,1]</span></span><br></pre></td></tr></table></figure>
<p>asix 1表示横轴,方向从左到右 0表示纵轴,方向从上到下</p>
<p>当asix=1时,如果求平均,那么是从左往右求平均.如果是drop,那么是横向发生变化,即 <strong><em>列的数量减少</em></strong> (每一个横向drop某种特征)</p>
<h2 id="支持向量机-Support-Vector-Machines-SVM"><a href="#支持向量机-Support-Vector-Machines-SVM" class="headerlink" title="支持向量机 Support Vector Machines SVM"></a>支持向量机 Support Vector Machines SVM</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line">train_feature, test_feature, train_label, test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">svm_model = svm.SVC()</span><br><span class="line">svm_model.fit(train_feature, train_label)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;SVM train:&quot;</span>,svm_model.score(train_feature, train_label))</span><br><span class="line">svm_model_acc = svm_model.score(test_feature, test_label)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;SVM test:&quot;</span>,svm_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SVM train: 0.9891369047619047<br>SVM test: 0.9744047619047619</p>
</blockquote>
<p>将训练集用<code>train_test_split</code>分成训练集和测试集两部分,进行训练(主要是看下这个函数)</p>
<p><code>test_size</code>为测试集所占的比例</p>
<h2 id="K近邻算法-KNeighborsClassifier-KNN"><a href="#K近邻算法-KNeighborsClassifier-KNN" class="headerlink" title="K近邻算法 KNeighborsClassifier KNN"></a>K近邻算法 KNeighborsClassifier KNN</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">train_feature, test_feature, train_label, test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">KNeighbors_model = KNeighborsClassifier(n_neighbors=<span class="number">2</span>)</span><br><span class="line">KNeighbors_model.fit(train_feature, train_label)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;KNN train：&quot;</span>,KNeighbors_model.score(train_feature, train_label))</span><br><span class="line">KNeighbors_model_acc = KNeighbors_model.score(test_feature, test_label)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;KNN test：&quot;</span>,KNeighbors_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>KNN train： 0.9819642857142857<br>KNN test： 0.9632142857142857</p>
</blockquote>
<p><code>n_neighbors</code> 取邻近的k个数</p>
<h2 id="决策树-DecisionTree-DT"><a href="#决策树-DecisionTree-DT" class="headerlink" title="决策树 DecisionTree DT"></a>决策树 DecisionTree DT</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line">train_feature, test_feature, train_label, test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">DecisionTree_model = tree.DecisionTreeClassifier()</span><br><span class="line">DecisionTree_model.fit(train_feature, train_label)</span><br><span class="line">print(<span class="string">&quot;决策树 train：&quot;</span>,DecisionTree_model.score(train_feature, train_label))</span><br><span class="line">DecisionTree_model_acc = DecisionTree_model.score(test_feature, test_label)</span><br><span class="line">print(<span class="string">&quot;决策树 test：&quot;</span>,DecisionTree_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>决策树 train： 1.0<br>决策树 test： 0.8577380952380952</p>
</blockquote>
<h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line">train_feature, test_feature, train_label, test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">RandomForest_model = RandomForestClassifier(n_estimators=<span class="number">10</span>)</span><br><span class="line">RandomForest_model.fit(train_feature, train_label)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;随机森林 train：&quot;</span>,RandomForest_model.score(train_feature, train_label))</span><br><span class="line">RandomForest_model_model_acc = RandomForest_model.score(test_feature, test_label)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;随机森林 test：&quot;</span>,RandomForest_model_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>随机森林 train： 0.9991369047619048<br>随机森林 test： 0.9363095238095238</p>
</blockquote>
<h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line">train_feature, test_feature, train_label, test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">MLP_model = MLPClassifier(solver=<span class="string">&#x27;lbfgs&#x27;</span>, </span><br><span class="line">                                   alpha=<span class="number">1e-5</span>,</span><br><span class="line">                                   hidden_layer_sizes=(<span class="number">10</span>, <span class="number">10</span>), </span><br><span class="line">                                   )</span><br><span class="line">MLP_model.fit(train_feature, train_label)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;神经网络 train：&quot;</span>,MLP_model.score(train_feature, train_label))</span><br><span class="line">MLP_model_acc = MLP_model.score(test_feature, test_label)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;神经网络 test：&quot;</span>,MLP_model_acc)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>神经网络 train： 0.9277083333333334<br>神经网络 test： 0.9075</p>
</blockquote>
<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;Model&#x27;</span>: [<span class="string">&#x27;SVM&#x27;</span>, </span><br><span class="line">              <span class="string">&#x27;KNN&#x27;</span>, </span><br><span class="line">              <span class="string">&#x27;DT&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;FR&#x27;</span>, </span><br><span class="line">              <span class="string">&#x27;NN&#x27;</span></span><br><span class="line">             ],</span><br><span class="line">    <span class="string">&#x27;Score&#x27;</span>: [svm_model_acc,</span><br><span class="line">              KNeighbors_model_acc,</span><br><span class="line">              DecisionTree_model_acc,</span><br><span class="line">              RandomForest_model_model_acc,</span><br><span class="line">              MLP_model_acc</span><br><span class="line">              ]</span><br><span class="line">                       &#125;)</span><br><span class="line">models.sort_values(by=<span class="string">&#x27;Score&#x27;</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Model</th>
      <th>Score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>SVM</td>
      <td>0.974405</td>
    </tr>
    <tr>
      <th>1</th>
      <td>KNN</td>
      <td>0.966071</td>
    </tr>
    <tr>
      <th>3</th>
      <td>FR</td>
      <td>0.936310</td>
    </tr>
    <tr>
      <th>4</th>
      <td>NN</td>
      <td>0.907500</td>
    </tr>
    <tr>
      <th>2</th>
      <td>DT</td>
      <td>0.857738</td>
    </tr>
  </tbody>
</table>

<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>最好的是svm,因此使用svm模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data_feature = test_data</span><br><span class="line">test_data_label = svm_model.predict(test_data_feature)</span><br></pre></td></tr></table></figure>
<p>用svm模型预测标签</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sample_submission = pd.read_csv(os.path.join(root,<span class="string">&quot;sample_submission.csv&quot;</span>))</span><br><span class="line">sample_submission.head()</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ImageId</th>
      <th>Label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
查看样本的数据长什么样

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = pd.DataFrame(&#123;<span class="string">&#x27;ImageId&#x27;</span>: sample_submission[<span class="string">&quot;ImageId&quot;</span>],<span class="string">&#x27;Label&#x27;</span>:test_data_label&#125;)</span><br><span class="line">output.head()</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ImageId</th>
      <th>Label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>5</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
查看预测,不知道为什么都是5,感觉有问题

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output.to_csv(<span class="string">&#x27;Submission.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>保存为.csv文件</p>
<p><em>提交了之后,发现评分只有0.08992,发现数据确实都是5</em></p>
<h3 id="KNN预测"><a href="#KNN预测" class="headerlink" title="KNN预测"></a>KNN预测</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data_label = KNeighbors_model.predict(test_data_feature)</span><br><span class="line">output = pd.DataFrame(&#123;<span class="string">&#x27;ImageId&#x27;</span>: sample_submission[<span class="string">&quot;ImageId&quot;</span>],<span class="string">&#x27;Label&#x27;</span>:test_data_label&#125;)</span><br><span class="line">output.head()</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ImageId</th>
      <th>Label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>8</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output.to_csv(<span class="string">&#x27;Submission.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>下面对每个模型提交之后的评分</p>
<p>SVM 评分 <code>0.08992</code></p>
<p>KNN 评分 <code>0.62760</code></p>
<p>随机森林 评分 <code>0.90860</code></p>
<p>神经网络 评分 <code>0.74482</code></p>
<p>决策树 评分 <code>0.72117</code></p>
<h1 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h1><ol>
<li>右上 点击 |&lt;</li>
<li>Output</li>
<li>/kaggle/working</li>
<li>点击 Submission.csv右边的三个点</li>
<li>Download</li>
<li>回到题目 点击右侧的<code>Submit Predictions</code></li>
<li>上传</li>
</ol>
<blockquote>
<p>参考</p>
<ol>
<li><a href="https://www.kaggle.com/code/orangecatman/scikit-learn-william">手把手教學使用(Scikit-Learn)中文教學_手寫辨識資料集_William</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Kaggle</category>
        <category>sklearn</category>
      </categories>
      <tags>
        <tag>Kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title>Kaggle 泰坦尼克号</title>
    <url>/posts/231e5270.html</url>
    <content><![CDATA[<div class="tip success"><p>指路<a class="btn-beautify button--animated outline" href="https://www.kaggle.com/competitions/titanic/data" target="_blank" rel="noopener" title="Titanic - Machine Learning from Disaster">Titanic - Machine Learning from Disaster</a></p><p></p></div>

<p><a href="https://www.kaggle.com/competitions/titanic/data">Titanic - Machine Learning from Disaster</a></p>
<h1 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> dirname, _, filenames <span class="keyword">in</span> os.walk(<span class="string">&#x27;/kaggle/input&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(os.path.join(dirname, filename))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root =<span class="string">&#x27;/kaggle/input/titanic/&#x27;</span></span><br><span class="line">train_data = pd.read_csv(os.path.join(root,<span class="string">&#x27;train.csv&#x27;</span>))</span><br><span class="line">test_data = pd.read_csv(os.path.join(root,<span class="string">&#x27;test.csv&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.info()</span><br></pre></td></tr></table></figure>
<pre>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 891 entries, 0 to 890
Data columns (total 12 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   PassengerId  891 non-null    int64  
 1   Survived     891 non-null    int64  
 2   Pclass       891 non-null    int64  
 3   Name         891 non-null    object
 4   Sex          891 non-null    object
 5   Age          714 non-null    float64
 6   SibSp        891 non-null    int64  
 7   Parch        891 non-null    int64  
 8   Ticket       891 non-null    object
 9   Fare         891 non-null    float64
 10  Cabin        204 non-null    object
 11  Embarked     889 non-null    object
dtypes: float64(2), int64(5), object(5)
memory usage: 83.7+ KB
</pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>
<pre>PassengerId      0
Survived         0
Pclass           0
Name             0
Sex              0
Age            177
SibSp            0
Parch            0
Ticket           0
Fare             0
Cabin          687
Embarked         2
dtype: int64</pre>

<p>可以得到 Age(float64)缺少177项,Cabin(object)缺少687项,Embarked(object)缺少2项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.describe()</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>714.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>446.000000</td>
      <td>0.383838</td>
      <td>2.308642</td>
      <td>29.699118</td>
      <td>0.523008</td>
      <td>0.381594</td>
      <td>32.204208</td>
    </tr>
    <tr>
      <th>std</th>
      <td>257.353842</td>
      <td>0.486592</td>
      <td>0.836071</td>
      <td>14.526497</td>
      <td>1.102743</td>
      <td>0.806057</td>
      <td>49.693429</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
      <td>0.000000</td>
      <td>1.000000</td>
      <td>0.420000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>223.500000</td>
      <td>0.000000</td>
      <td>2.000000</td>
      <td>20.125000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>7.910400</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>446.000000</td>
      <td>0.000000</td>
      <td>3.000000</td>
      <td>28.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>14.454200</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>668.500000</td>
      <td>1.000000</td>
      <td>3.000000</td>
      <td>38.000000</td>
      <td>1.000000</td>
      <td>0.000000</td>
      <td>31.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>891.000000</td>
      <td>1.000000</td>
      <td>3.000000</td>
      <td>80.000000</td>
      <td>8.000000</td>
      <td>6.000000</td>
      <td>512.329200</td>
    </tr>
  </tbody>
</table>

<p>下面将Embarked的缺失值用众数替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;查看Embarked的元素\n&quot;</span>,train_data[<span class="string">&quot;Embarked&quot;</span>].unique())</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;查看Embarked的描述\n&quot;</span>,train_data[<span class="string">&quot;Embarked&quot;</span>].describe())</span><br></pre></td></tr></table></figure>
<pre>查看Embarked的元素
 ['S' 'C' 'Q' nan]
查看Embarked的描述
 count     889
unique      3
top         S
freq      644
Name: Embarked, dtype: object
</pre>
<p>得到众数为’s’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data[<span class="string">&#x27;Embarked&#x27;</span>] = train_data[<span class="string">&#x27;Embarked&#x27;</span>].fillna(<span class="string">&#x27;S&#x27;</span>)<span class="comment"># 把nan变成&#x27;S&#x27;</span></span><br></pre></td></tr></table></figure>
<p>替换NAN为<code>s</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;查看Embarked的元素\n&quot;</span>,train_data[<span class="string">&quot;Embarked&quot;</span>].unique())</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;查看Embarked的描述\n&quot;</span>,train_data[<span class="string">&quot;Embarked&quot;</span>].describe())</span><br></pre></td></tr></table></figure>
<pre>查看Embarked的元素
 ['S' 'C' 'Q']
查看Embarked的描述
 count     891
unique      3
top         S
freq      646
Name: Embarked, dtype: object
</pre>
<p>修改成功,nan不见了,同时s的数量提高了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;处理前Age的描述:&quot;</span>,train_data[<span class="string">&#x27;Age&#x27;</span>].describe())</span><br><span class="line">train_data[<span class="string">&#x27;Age&#x27;</span>] = train_data[<span class="string">&#x27;Age&#x27;</span>].fillna(<span class="number">30</span>)</span><br><span class="line">print(<span class="string">&quot;处理后ge的描述:&quot;</span>,train_data[<span class="string">&#x27;Age&#x27;</span>].describe())</span><br></pre></td></tr></table></figure>
<pre>处理前Age的描述: count    714.000000
mean      29.699118
std       14.526497
min        0.420000
25%       20.125000
50%       28.000000
75%       38.000000
max       80.000000
Name: Age, dtype: float64
处理后ge的描述: count    891.000000
mean      29.758889
std       13.002570
min        0.420000
25%       22.000000
50%       30.000000
75%       35.000000
max       80.000000
Name: Age, dtype: float64
</pre>

<p>Cabin缺失的数据过多,参考价值不高</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> train_data.columns:</span><br><span class="line">    print(<span class="string">&quot;%-15s&quot;</span>%feature,<span class="string">&quot;不重复的数量：&quot;</span>,<span class="built_in">len</span>(train_data[feature].unique()))</span><br></pre></td></tr></table></figure>
<pre>PassengerId     不重复的数量： 891
Survived        不重复的数量： 2
Pclass          不重复的数量： 3
Name            不重复的数量： 891
Sex             不重复的数量： 2
Age             不重复的数量： 88
SibSp           不重复的数量： 7
Parch           不重复的数量： 7
Ticket          不重复的数量： 681
Fare            不重复的数量： 248
Cabin           不重复的数量： 148
Embarked        不重复的数量： 3
</pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abandon_features = []</span><br><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> train_data.columns:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(train_data[feature].unique())&gt;<span class="number">120</span>:</span><br><span class="line">        print(<span class="string">&#x27;去掉特征值&#x27;</span>,feature)</span><br><span class="line">        abandon_features.append(feature)</span><br><span class="line">train_data = train_data.drop(abandon_features,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre>去掉特征值 PassengerId
去掉特征值 Name
去掉特征值 Ticket
去掉特征值 Fare
去掉特征值 Cabin
</pre>
<p>对重复数量大于120的特征值去掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> train_data.columns:</span><br><span class="line">    print(<span class="string">&#x27;%15s&#x27;</span>%feature,<span class="string">&#x27;的元素有:&#x27;</span>,train_data[feature].unique())</span><br></pre></td></tr></table></figure>
<pre>       Survived 的元素有: [0 1]
         Pclass 的元素有: [3 1 2]
            Sex 的元素有: ['male' 'female']
            Age 的元素有: [22.   38.   26.   35.   30.   54.    2.   27.   14.    4.   58.   20.
 39.   55.   31.   34.   15.   28.    8.   19.   40.   66.   42.   21.
 18.    3.    7.   49.   29.   65.   28.5   5.   11.   45.   17.   32.
 16.   25.    0.83 33.   23.   24.   46.   59.   71.   37.   47.   14.5
 70.5  32.5  12.    9.   36.5  51.   55.5  40.5  44.    1.   61.   56.
 50.   36.   45.5  20.5  62.   41.   52.   63.   23.5   0.92 43.   60.
 10.   64.   13.   48.    0.75 53.   57.   80.   70.   24.5   6.    0.67
 30.5   0.42 34.5  74.  ]
          SibSp 的元素有: [1 0 3 4 2 5 8]
          Parch 的元素有: [0 1 2 5 3 4 6]
       Embarked 的元素有: ['S' 'C' 'Q']
</pre>
<p>分析修改后特征值的类型</p>
<p>可以将sex和embarked的类型换成int</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data.loc[train_data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;Sex&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">train_data.loc[train_data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;Sex&#x27;</span>] = <span class="number">1</span> </span><br><span class="line">train_data.loc[train_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">train_data.loc[train_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">1</span> </span><br><span class="line">train_data.loc[train_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">2</span> </span><br><span class="line">print(<span class="string">&#x27;Sex的元素有:&#x27;</span>,train_data[<span class="string">&#x27;Sex&#x27;</span>].unique())</span><br><span class="line">print(<span class="string">&#x27;Embarked的元素有:&#x27;</span>,train_data[<span class="string">&#x27;Embarked&#x27;</span>].unique())</span><br></pre></td></tr></table></figure>
<pre>Sex的元素有: [1 0]
Embarked的元素有: [0 1 2]
</pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data_feature = train_data.drop(<span class="string">&#x27;Survived&#x27;</span>,axis=<span class="number">1</span>)  <span class="comment">#去掉标签</span></span><br><span class="line">train_data_label = train_data[<span class="string">&#x27;Survived&#x27;</span>]</span><br><span class="line">train_data_feature</span><br></pre></td></tr></table></figure>
<p>分离标签</p>
<h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><h3 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line">train_feature,test_feature,train_label,test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line">svm_model = svm.SVC()</span><br><span class="line">svm_model.fit(train_feature,train_label)</span><br><span class="line">print(<span class="string">&#x27;SVM train:&#x27;</span>,svm_model.score(train_feature,train_label))</span><br><span class="line">svm_model_acc = svm_model.score(train_feature, train_label)</span><br><span class="line">print(<span class="string">&#x27;SVM test:&#x27;</span>,svm_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SVM train: 0.6334269662921348<br>SVM test: 0.6334269662921348</p>
</blockquote>
<h3 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">train_feature,test_feature,train_label,test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line">KNeighbors_model = KNeighborsClassifier(n_neighbors=<span class="number">2</span>)</span><br><span class="line">KNeighbors_model.fit(train_feature,train_label)</span><br><span class="line">print(<span class="string">&#x27;KNN train:&#x27;</span>,KNeighbors_model.score(train_feature,train_label))</span><br><span class="line">KNeighbors_model_acc = KNeighbors_model.score(test_feature,test_label)</span><br><span class="line">print(<span class="string">&#x27;KNN test:&#x27;</span>,KNeighbors_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>KNN train: 0.8637640449438202<br>KNN test: 0.6815642458100558</p>
</blockquote>
<h3 id="DT"><a href="#DT" class="headerlink" title="DT"></a>DT</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line">train_feature, test_feature, train_label, test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line">DecisionTree_model = tree.DecisionTreeClassifier()</span><br><span class="line">DecisionTree_model.fit(train_feature,train_label)</span><br><span class="line">print(<span class="string">&#x27;DT train:&#x27;</span>,DecisionTree_model.score(train_feature,train_label))</span><br><span class="line">DecisionTree_model_acc  = DecisionTree_model.score(test_feature,test_label)</span><br><span class="line">print(<span class="string">&#x27;DT test:&#x27;</span>,DecisionTree_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DT train: 0.9410112359550562<br>DT test: 0.7821229050279329</p>
</blockquote>
<h3 id="RF"><a href="#RF" class="headerlink" title="RF"></a>RF</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line">train_feature, test_feature, train_label, test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">RandomForest_model = RandomForestClassifier(n_estimators=<span class="number">10</span>)</span><br><span class="line">RandomForest_model.fit(train_feature, train_label)</span><br><span class="line">print(<span class="string">&#x27;随机森林 train:&#x27;</span>,RandomForest_model.score(train_feature,train_label))</span><br><span class="line">RandomForest_model_model_acc = RandomForest_model.score(test_feature,test_label)</span><br><span class="line">print(<span class="string">&#x27;随机森林 test:&#x27;</span>,RandomForest_model_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>随机森林 train: 0.9367977528089888<br>随机森林 test: 0.7206703910614525</p>
</blockquote>
<h3 id="NN"><a href="#NN" class="headerlink" title="NN"></a>NN</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line">train_feature, test_feature, train_label, test_label = train_test_split(train_data_feature,train_data_label,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">MLP_model = MLPClassifier(solver=<span class="string">&#x27;lbfgs&#x27;</span>, </span><br><span class="line">                                   alpha=<span class="number">1e-5</span>,</span><br><span class="line">                                   hidden_layer_sizes=(<span class="number">6</span>, <span class="number">2</span>), </span><br><span class="line">                                   )</span><br><span class="line">MLP_model.fit(train_feature, train_label)</span><br><span class="line"></span><br><span class="line"><span class="comment">#將原本train_data資料，分成訓練集與測試集合，並丟入訓練好的模型測試準確度</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;神经网络 train:&quot;</span>,MLP_model.score(train_feature, train_label))</span><br><span class="line">MLP_model_acc = MLP_model.score(test_feature, test_label)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;神经网络 test：&quot;</span>,MLP_model_acc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>神经网络 train: 0.8370786516853933<br>神经网络 test： 0.8044692737430168</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;Model&#x27;</span>: [<span class="string">&#x27;SVM&#x27;</span>, </span><br><span class="line">              <span class="string">&#x27;KNN&#x27;</span>, </span><br><span class="line">              <span class="string">&#x27;DT&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;FR&#x27;</span>, </span><br><span class="line">              <span class="string">&#x27;NN&#x27;</span></span><br><span class="line">             ],</span><br><span class="line">    <span class="string">&#x27;Score&#x27;</span>: [svm_model_acc,</span><br><span class="line">              KNeighbors_model_acc,</span><br><span class="line">              DecisionTree_model_acc,</span><br><span class="line">              RandomForest_model_model_acc,</span><br><span class="line">              MLP_model_acc</span><br><span class="line">              ]</span><br><span class="line">                       &#125;)</span><br><span class="line">models.sort_values(by=<span class="string">&#x27;Score&#x27;</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Model</th>
      <th>Score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4</th>
      <td>NN</td>
      <td>0.804469</td>
    </tr>
    <tr>
      <th>2</th>
      <td>DT</td>
      <td>0.782123</td>
    </tr>
    <tr>
      <th>3</th>
      <td>FR</td>
      <td>0.720670</td>
    </tr>
    <tr>
      <th>1</th>
      <td>KNN</td>
      <td>0.681564</td>
    </tr>
    <tr>
      <th>0</th>
      <td>SVM</td>
      <td>0.633427</td>
    </tr>
  </tbody>
</table>

<h2 id="测试集数据"><a href="#测试集数据" class="headerlink" title="测试集数据"></a>测试集数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data.loc[test_data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;Sex&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">test_data.loc[test_data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;Sex&#x27;</span>] = <span class="number">1</span> </span><br><span class="line">test_data.loc[test_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">test_data.loc[test_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">1</span> </span><br><span class="line">test_data.loc[test_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">2</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data_feature = test_data.drop(abandon_features,axis=<span class="number">1</span>)</span><br><span class="line">test_data_feature.info()</span><br></pre></td></tr></table></figure>
<pre>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 418 entries, 0 to 417
Data columns (total 6 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   Pclass    418 non-null    int64  
 1   Sex       418 non-null    object
 2   Age       332 non-null    float64
 3   SibSp     418 non-null    int64  
 4   Parch     418 non-null    int64  
 5   Embarked  418 non-null    object
dtypes: float64(1), int64(3), object(2)
memory usage: 19.7+ KB
</pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data_feature.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>
<pre>Pclass       0
Sex          0
Age         86
SibSp        0
Parch        0
Embarked     0
dtype: int64</pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data_feature[<span class="string">&#x27;Age&#x27;</span>].describe()</span><br></pre></td></tr></table></figure>
<pre>count    332.000000
mean      30.272590
std       14.181209
min        0.170000
25%       21.000000
50%       27.000000
75%       39.000000
max       76.000000
Name: Age, dtype: float64</pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data_feature[<span class="string">&#x27;Age&#x27;</span>] = test_data_feature[<span class="string">&#x27;Age&#x27;</span>].fillna(<span class="number">30</span>)</span><br><span class="line">test_data_feature[<span class="string">&#x27;Age&#x27;</span>].describe()</span><br></pre></td></tr></table></figure>
<p>将缺失的值替换成平均值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gender_submission = pd.read_csv(os.path.join(root,<span class="string">&quot;gender_submission.csv&quot;</span>))</span><br><span class="line">gender_submission</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>892</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>893</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>894</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>895</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>896</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>413</th>
      <td>1305</td>
      <td>0</td>
    </tr>
    <tr>
      <th>414</th>
      <td>1306</td>
      <td>1</td>
    </tr>
    <tr>
      <th>415</th>
      <td>1307</td>
      <td>0</td>
    </tr>
    <tr>
      <th>416</th>
      <td>1308</td>
      <td>0</td>
    </tr>
    <tr>
      <th>417</th>
      <td>1309</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
查看提交的数据


<h2 id="算出预测-提交得到分数"><a href="#算出预测-提交得到分数" class="headerlink" title="算出预测,提交得到分数"></a>算出预测,提交得到分数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DT_test_data_predic = DecisionTree_model.predict(test_data_feature)</span><br><span class="line">DT_output = pd.DataFrame(&#123;<span class="string">&#x27;PassengerId&#x27;</span>:gender_submission[<span class="string">&#x27;PassengerId&#x27;</span>],<span class="string">&#x27;Survived&#x27;</span>:DT_test_data_predic&#125;)</span><br><span class="line">DT_output.to_csv(<span class="string">&#x27;DT_Submission.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line">DT_output</span><br><span class="line"><span class="comment"># Score: 0.71531</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RF_test_data_predic = RandomForest_model.predict(test_data_feature)</span><br><span class="line">RF_output = pd.DataFrame(&#123;<span class="string">&#x27;PassengerId&#x27;</span>:gender_submission[<span class="string">&#x27;PassengerId&#x27;</span>],<span class="string">&#x27;Survived&#x27;</span>:RF_test_data_predic&#125;)</span><br><span class="line">RF_output.to_csv(<span class="string">&#x27;RF_Submission.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line">RF_output</span><br><span class="line"><span class="comment"># Score: 0.72966</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">KNN_test_data_predic = KNeighbors_model.predict(test_data_feature)</span><br><span class="line">KNN_output = pd.DataFrame(&#123;<span class="string">&#x27;PassengerId&#x27;</span>:gender_submission[<span class="string">&#x27;PassengerId&#x27;</span>],<span class="string">&#x27;Survived&#x27;</span>:KNN_test_data_predic&#125;)</span><br><span class="line">KNN_output.to_csv(<span class="string">&#x27;KNN_Submission.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line">KNN_output</span><br><span class="line"><span class="comment"># Score: 0.71291</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SVM_test_data_predic = svm_model.predict(test_data_feature)</span><br><span class="line">SVM_output = pd.DataFrame(&#123;<span class="string">&#x27;PassengerId&#x27;</span>:gender_submission[<span class="string">&#x27;PassengerId&#x27;</span>],<span class="string">&#x27;Survived&#x27;</span>:SVM_test_data_predic&#125;)</span><br><span class="line">SVM_output.to_csv(<span class="string">&#x27;SVM_Submission.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line">SVM_output</span><br><span class="line"><span class="comment"># Score: 0.62918</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NN_test_data_predic = MLP_model.predict(test_data_feature)</span><br><span class="line">NN_output = pd.DataFrame(&#123;<span class="string">&#x27;PassengerId&#x27;</span>:gender_submission[<span class="string">&#x27;PassengerId&#x27;</span>],<span class="string">&#x27;Survived&#x27;</span>:NN_test_data_predic&#125;)</span><br><span class="line">NN_output.to_csv(<span class="string">&#x27;NN_Submission.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line">NN_output</span><br><span class="line"><span class="comment"># Score: 0.77272</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考</p>
<ol>
<li><a href="https://www.kaggle.com/code/orangecatman/scikit-learn">手把手教學使用(Scikit-Learn)中文教學_鐵達尼號</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Kaggle</category>
        <category>sklearn</category>
      </categories>
      <tags>
        <tag>Kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title>超算暑假log</title>
    <url>/posts/b19ce5f3.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基本是有关科学计算的,AI方面的好少…</p>
<h1 id="7月11日"><a href="#7月11日" class="headerlink" title="7月11日"></a>7月11日</h1><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li><p>复习linux命令（大二下学期选修linux）</p>
</li>
<li><p>学习编译器编译过程</p>
</li>
<li><p>了解make cmake ，makefile文件 CmakeList.txt文件</p>
</li>
<li><p>掌握c、c++、python</p>
</li>
<li><p>cpu架构，指令集，gpu架构</p>
</li>
</ol>
<h2 id="linux基本命令"><a href="#linux基本命令" class="headerlink" title="linux基本命令:"></a>linux基本命令:</h2><ol>
<li>cd 切换目录</li>
<li>pwd 获取绝对路径</li>
<li>touch 更新文件时间标签,文件不存在则创建文件</li>
<li>mkdir 创建目录</li>
<li>cp 复制文件或目录</li>
<li>mv 移动文件或目录</li>
<li>rm 删除文件或目录(rm -rf ..)</li>
<li>rmdir 删除目录</li>
<li>cat 查看文件</li>
<li>more 分页查看文件</li>
<li>head/tail -n 查看文件前/后n行</li>
<li>chmod 修改权限(a,u,g,o)(+-=)/rwx对应421 </li>
<li>chown 修改所有者  chown user[:group] file</li>
<li>which 查看命令所在路径</li>
<li>grep 搜索与匹配</li>
<li>ifconfig 网络参数</li>
<li>gzip/gunzip (.gz) zip/unzip(.zip) tar   (tar -zxvf xxx.tar.gz)</li>
<li>man COMMAND 帮助文档</li>
<li>top 显示进程相关信息</li>
<li>ps -ef | grep xxxx</li>
<li>ls &gt; /xxx  输出重定向  (/dev/null 黑洞)</li>
</ol>
<h2 id="编译器编译过程"><a href="#编译器编译过程" class="headerlink" title="编译器编译过程"></a>编译器编译过程</h2><ol>
<li>预处理         文件合并、宏定义替换、删除注释等    由.c文件到.i文件</li>
<li>编译             将高级语言源代码转换为汇编代码      由.i文件到.s文件</li>
<li>汇编             生成可重定位的机器码                        由.s文件到.o文件</li>
<li>链接             将程序所引用的外部文件关联起来      由.o文件到可执行文件</li>
</ol>
<h2 id="make-cmake-makefile-CmakeList-txt"><a href="#make-cmake-makefile-CmakeList-txt" class="headerlink" title="make cmake makefile CmakeList.txt"></a>make cmake makefile CmakeList.txt</h2><p>makefile格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class="line">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">cal:main.o add.o sub.o mul.o</span></span><br><span class="line">	gcc main.o add.o sub.o mul.o -o cal</span><br><span class="line"></span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	gcc -c add.c -o add.o</span><br><span class="line"><span class="section">sub.o:sub.c</span></span><br><span class="line">	gcc -c sub.c -o sub.o</span><br><span class="line"><span class="section">mul.o:mul.c</span></span><br><span class="line">	gcc -c mul.c -o mul.o</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">src = <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> <span class="comment"># 获取工作目录下所有.c文件列表</span></span><br><span class="line">obj = <span class="variable">$(<span class="built_in">patsubst</span> %.c, %.o, <span class="variable">$(src)</span>)</span> <span class="comment"># 模式字符串替换(符合xxx.c替换成xxx.o)</span></span><br><span class="line"></span><br><span class="line"><span class="section">ALL:cal</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(obj)</span>:%.o:%.c</span><br><span class="line">	gcc -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span> <span class="comment"># $&lt; 依赖文件第一个</span></span><br><span class="line"></span><br><span class="line"><span class="section">cal:<span class="variable">$(obj)</span></span></span><br><span class="line">	gcc <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="comment"># $^ 所有的依赖文件</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	-rm -rf <span class="variable">$(obj)</span> cal</span><br></pre></td></tr></table></figure>


<p>CMakeLists.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># CMake最低版本要求</span><br><span class="line">cmake_minimum_required(VERSION 3.5)</span><br><span class="line"></span><br><span class="line"># 项目名称</span><br><span class="line">project(test_1)</span><br><span class="line"></span><br><span class="line"># 包含子目录头文件</span><br><span class="line">include_directories(&quot;$&#123;PROJECT_SOURCE_DIR&#125;&#x2F;common&quot;)</span><br><span class="line"></span><br><span class="line"># 添加链接静态库</span><br><span class="line">target_link_libraries(mul_cmake_demo CommonFuncs)</span><br><span class="line"></span><br><span class="line"># 将.&#x2F;src 下的所有文件名保存到DIR_SRCS变量</span><br><span class="line">aux_source_directory(.&#x2F;src DIR_SRCS)</span><br><span class="line"></span><br><span class="line"># 设置变量为多个给定的值</span><br><span class="line">set(normal_var a b c)</span><br><span class="line"></span><br><span class="line"># 生成可执行文件，test_1是可执行文件的名字，hello.c是源文件名称，如有其他源文件，可在后面添加</span><br><span class="line">add_executable(test_1 hello.c) </span><br></pre></td></tr></table></figure>


<h2 id="c、c-、python"><a href="#c、c-、python" class="headerlink" title="c、c++、python"></a>c、c++、python</h2><h2 id="指令集，gpu架构"><a href="#指令集，gpu架构" class="headerlink" title="指令集，gpu架构"></a>指令集，gpu架构</h2><h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><p>指令集，是CPU中用来计算和控制计算机系统的一套指令的集合。CPU依靠指令来计算和控制系统，指令执行能力是衡量CPU性能的重要指标，指令集也与CPU效率有密切关系。CPU都有一个基本的指令集</p>
<p>AVX</p>
<p>​    AVX指令集遵循IEEE-754规范，其中的32-bit浮点数为单精度浮点数（float），64-bit浮点数为双精度浮点数（double）。因为AVX中的YMM寄存器为256-bit，所以若存储单精度浮点数32-bit，可存储8个，若存储双精度浮点数64-bit，可存储4个。</p>
<p>AVX2</p>
<p>​    整数和浮点计算理论性能又翻倍</p>
<p>AVX512</p>
<p>​    AVX512可用于整数和浮点运算中，并不是只能提高浮点性能，对于整数性能也是可以提高的，整数运算大约提升33%的理论性能。浮点方面，目前支持AVX512的处理器最高可实现双发射AVX512FMA运算，浮点峰值可以达到双发射AVX256FMA的一倍</p>
<h3 id="gpu架构"><a href="#gpu架构" class="headerlink" title="gpu架构"></a>gpu架构</h3><p>GPU的任务是天然并行的，现代GPU的架构皆是以高度并行能力而设计的。</p>
<h3 id="cuda-core"><a href="#cuda-core" class="headerlink" title="cuda core"></a>cuda core</h3><p>​    cuda core是可以执行 32 位浮点加法、32 位浮点乘法、32 位到 8 位整数运算（如移位、加法、muls 和类似操作）的管道（pipe），并且还可以在其 SM 单元上生成内存请求以提供数据以不断处理数据 . 还要求特殊函数计算并由 SM 单元同步，以正确计算并行算法。</p>
<h3 id="tensor-core"><a href="#tensor-core" class="headerlink" title="tensor core"></a>tensor core</h3><p>Tensor Cores支持混合精度计算，动态调整计算以加快吞吐量，同时保持精度。</p>
<h1 id="7月12日"><a href="#7月12日" class="headerlink" title="7月12日"></a>7月12日</h1><h2 id="大纲-1"><a href="#大纲-1" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>学习torch.nn</li>
<li>数据集处理部分</li>
</ol>
<h3 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h3><h4 id="torch-nn"><a href="#torch-nn" class="headerlink" title="torch.nn"></a>torch.nn</h4><p><a href="https://blog.csdn.net/HiWangWenBing/article/details/120614234">torch.nn库五大基本功能</a></p>
<h5 id="nn-Linear类（全连接层）"><a href="#nn-Linear类（全连接层）" class="headerlink" title="nn.Linear类（全连接层）"></a>nn.Linear类（全连接层）</h5><p><img src="https://img-blog.csdnimg.cn/20211005165134867.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5paH54Gr5Yaw57OW55qE56GF5Z-65bel5Z2K,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h5 id="nn-functional（常见函数"><a href="#nn-functional（常见函数" class="headerlink" title="nn.functional（常见函数)"></a>nn.functional（常见函数)</h5><p>nn.functional包括神经网络前向和后向处理所需要到的常见函数。</p>
<h5 id="nn-xxx和nn-functional-xxx比较"><a href="#nn-xxx和nn-functional-xxx比较" class="headerlink" title="nn.xxx和nn.functional.xxx比较"></a>nn.xxx和nn.functional.xxx比较</h5><p><code>import torch.nn.functional as F</code> 包含<code>loss</code>和<code>activation function</code></p>
<p><code>nn.Xxx</code> 继承于 <code>nn.Module</code>，能够很好的与 <code>nn.Sequential</code> 结合使用</p>
<p>而 <code>nn.functional.xxx</code> 无法与 <code>nn.Sequential</code> 结合使用</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">    nn.BatchNorm2d(num_features=<span class="number">64</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">    nn.Droput(<span class="number">0.2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h5 id="nn-Module类"><a href="#nn-Module类" class="headerlink" title="nn.Module类"></a>nn.Module类</h5><p>可以表示神经网络中的某个层,也可以表示一个包含很多层的神经网络</p>
<h5 id="自定义神经网络模型类（继承于Module类）"><a href="#自定义神经网络模型类（继承于Module类）" class="headerlink" title="自定义神经网络模型类（继承于Module类）"></a>自定义神经网络模型类（继承于Module类）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetC</span>(<span class="params">torch.nn.Module</span>):</span></span><br><span class="line">    <span class="comment"># 定义神经网络</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetC, self).__init__()</span><br><span class="line">        self.h1 = nn.Linear(n_feature, n_hidden)</span><br><span class="line">        self.relu1 = nn.ReLU()</span><br><span class="line">        self.out = nn.Linear(n_hidden, n_output)</span><br><span class="line">        self.softmax = nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#定义前向运算</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># 得到的数据格式torch.Size([64, 1, 28, 28])需要转变为（64,784）</span></span><br><span class="line">        x = x.view(x.size()[<span class="number">0</span>],-<span class="number">1</span>) <span class="comment"># -1表示自动匹配</span></span><br><span class="line">        h1 = self.h1(x)</span><br><span class="line">        a1 =  self.relu1(h1)</span><br><span class="line">        out = self.out(a1)</span><br><span class="line">        a_out = self.softmax(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure>




<h4 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You should build your custom dataset as below.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomDataset</span>(<span class="params">torch.utils.data.Dataset</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># TODO</span></span><br><span class="line">        <span class="comment"># 1. Initialize file paths or a list of file names. </span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="comment"># TODO</span></span><br><span class="line">        <span class="comment"># 1. Read one data from file (e.g. using numpy.fromfile, PIL.Image.open).</span></span><br><span class="line">        <span class="comment"># 2. Preprocess the data (e.g. torchvision.Transform).</span></span><br><span class="line">        <span class="comment"># 3. Return a data pair (e.g. image and label).</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># You should change 0 to the total size of your dataset.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">## eg.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_dataset</span>(<span class="params">Dataset</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.x = torch.randn(<span class="number">1000</span>,<span class="number">3</span>)</span><br><span class="line">        self.y = self.x.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">        self.src,  self.trg = [], []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">            self.src.append(self.x[i])</span><br><span class="line">            self.trg.append(self.y[i])</span><br><span class="line">           </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.src[index], self.trg[index]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.src) </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Dataloader"><a href="#Dataloader" class="headerlink" title="Dataloader"></a>Dataloader</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DataLoader(dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">False</span>, sampler=<span class="literal">None</span>,</span><br><span class="line">           batch_sampler=<span class="literal">None</span>, num_workers=<span class="number">0</span>, collate_fn=<span class="literal">None</span>,</span><br><span class="line">           pin_memory=<span class="literal">False</span>, drop_last=<span class="literal">False</span>, timeout=<span class="number">0</span>,</span><br><span class="line">           worker_init_fn=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>dataset 很重要，需要将dataset定义好，完成相关函数的重写。</p>
<p>batch_size 就是训练的一个批次的样本数。</p>
<p>shuffle 表示每一个epoch中训练样本的顺序是否相同，一般True。</p>
<p>sampler 采样器</p>
<p>batch_sampler 将前面的Sampler采样得到的索引值进行合并，当数量等于一个batch大小后就将这一批的索引值返回。</p>
<p>num_workers 表示同时参与数据读取的线程数量，多线程技术可以加快数据读取，提供GPU/CPU利用率。</p>
<h1 id="7月13日"><a href="#7月13日" class="headerlink" title="7月13日"></a>7月13日</h1><h2 id="大纲-2"><a href="#大纲-2" class="headerlink" title="大纲:"></a>大纲:</h2><ol>
<li>集群</li>
<li>编译器优化</li>
</ol>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>​    计算机集群(称为集群)是高度紧密协调的系统，可以通过一组松散集成的计算机软件和/或硬件来完成计算工作。</p>
<p>4个PC通过交换机连接在一起 NIC表示网络接口,PCI表示I/O总线,</p>
<p>如果将图中的交换机换为共享磁盘,可以得到共享磁盘的集群系统结构</p>
<p><img src="https://i.imgtg.com/2022/07/13/e4k91.png"></p>
<p>集群的每台计算机都称为节点</p>
<p>集群系统功耗：各个部件的功耗加在一起</p>
<p>SSD代替HDD可以减低系统功耗</p>
<p>可以将集群的安装和配置步骤做成脚本，或者实现将系统安装在SSD上</p>
<p><a href="https://blog.csdn.net/zhangnianli127/article/details/10193139">如何设置集群的各个节点之间无密码登录</a></p>
<p><a href="https://wenku.baidu.com/view/1a5313c7e518964bce847c3e.html">mpi实验 虚拟机环境下两节点的MPI集群搭建)</a></p>
<h2 id="编译器优化"><a href="#编译器优化" class="headerlink" title="编译器优化"></a>编译器优化</h2><p>优化编译器就是要消除简单语言翻译中可能引入的低效率，改进目标程序的性能。</p>
<p>性能分析引导优化(Profile Guided Optimization)通过分析程序运行时的实际行为，将结果反馈给编译器，使得编译器可以重新安排代码以减少指令缓存问题和分支预测误判，从而获得性能的提升。</p>
<h3 id="Intel-MPI"><a href="#Intel-MPI" class="headerlink" title="Intel-MPI"></a>Intel-MPI</h3><p>​    英特尔® MPI 库是一个实现开源 MPICH 规范的多结构消息传递库。使用该库创建、维护和测试高级、复杂的应用程序，这些应用程序在基于英特尔® 处理器的高性能计算 (HPC) 集群上表现更好。</p>
<h3 id="icc"><a href="#icc" class="headerlink" title="icc"></a>icc</h3><p>​    ICC：全称Intel C++ Compiler，是Intel开发的C/C++/Fortran编译器套装，适用于Linux、Microsoft和Mac OS X操作系统，没有非IA指令集版本（就是说仅供x86架构CPU使用）。ICC广泛应用于高性能计算、分布式计算等商业计算领域，其向量化和并行化性能是业界的标杆，能够充分发挥现代处理器的特性。</p>
<p><img src="https://i.imgtg.com/2022/07/13/e4ARB.png"></p>
<h1 id="7月14日"><a href="#7月14日" class="headerlink" title="7月14日"></a>7月14日</h1><h2 id="大纲-3"><a href="#大纲-3" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>并行计算</li>
<li>多线程（openmp）</li>
</ol>
<h2 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h2><p>​    最简单的话来解释并行计算就是同时使用 多个计算资源 （就是多个CPU）去运行程序来解决一个需要大量计算的问题 。<br>并行计算程序运行在一个多核心（或多CPU）的计算机、或者由多台计算机组成的网络上。<br>需要进行大量计算的问题，需要被分解成多个独立的、能够同时运行的部分。<br>每个部分将来还将继续分解成一串独立的命令执行流（instructions 命令执行流，也可以是线程）。<br>不同部分的命令执行流可以同时在不同的CPU上得到执行。 换句话说，在同一时间可以有多个线程在执行。</p>
<p><img src="https://ask.qcloudimg.com/http-save/developer-news/5prbqmjrgv.jpeg?imageView2/2/w/1620" alt="img"></p>
<h2 id="多线程（openmp）"><a href="#多线程（openmp）" class="headerlink" title="多线程（openmp）"></a>多线程（openmp）</h2><p>操作系统能够进行运算调度的最小单位。一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
<p><img src="https://pic3.zhimg.com/80/v2-64919602407124d2c79a09e58f3f8dfe_720w.jpg" alt="img"></p>
<p>如果是多核CPU 处理 CPU 密集型程序，我们完全可以最大化的利用 CPU 核心数，应用并发编程来提高效率</p>
<p><img src="https://pic3.zhimg.com/80/v2-25f763818b2faa77d7ed0eb7e88b353a_720w.jpg" alt="img"></p>
<p>线程等待时间所占比例越高，需要越多线程；线程CPU时间所占比例越高，需要越少线程。</p>
<p>CPU 密集型程序  -&gt;  数量一般会设置为 <code>CPU 核数（逻辑）+ 1</code>(确保在CPU周期不会中断工作。)</p>
<p>I/O密集型程序  -&gt;  最佳线程数 = CPU核心数 * (1/CPU利用率) =  CPU核心数 *[ 1 + (I/O耗时/CPU耗时)]</p>
<p>最小化临界区范围，因为临界区的大小往往就是瓶颈问题的所在。</p>
<p>OpenMP是：一种应用程序接口(API)，可用于显式指导多线程、共享内存的并行性。它的特点是<strong>动态并行</strong>：在代码的一个部分和另一个部分之间，并行运行的执行流的数量可以变化。</p>
<p><strong>OpenMP编程模型</strong></p>
<p>内存共享模型：OpenMP是专为多处理器/核，共享内存机器所设计的。底层架构可以是UMA和NUMA。</p>
<p><img src="https://img2018.cnblogs.com/blog/1365470/201812/1365470-20181212223751481-2040405150.png" alt="img"></p>
<p>　<strong>基于线程的并行性</strong></p>
<ul>
<li>OpenMP仅通过线程来完成并行</li>
<li>线程们存在于单个进程的资源中，没有了这个进程，线程也不存在了</li>
<li>通常，线程数与机器的处理器/核数相匹配，然而，实际使用取决与应用程序</li>
<li>OpenMP是一种显式（非自动）编程模型，为程序员提供对并行化的完全控制</li>
<li>并行区域中的所有线程可以同时访问这个共享的数据</li>
</ul>
<p>OpenMP采用fork-join的执行模式。开始的时候只存在一个主线程，当需要进行并行计算的时候，派生出若干个分支线程来执行并行任务。当并行代码执行完成之后，分支线程会合，并把控制流程交给单独的主线程。</p>
<p><img src="https://img-blog.csdnimg.cn/2019103012094258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgxOTQ1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;omp.h&quot;</span>   <span class="comment">//#incluce &quot;&quot;格式：引用非标准库的头文件，编译器从用户的工作目录开始搜索</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nthreads, tid;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel private(nthreads, tid) <span class="comment">//&#123;  花括号写在这会报错</span></span></span><br><span class="line">    &#123;  </span><br><span class="line">        tid = omp_get_thread_num();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello World from OMP thread %d\n&quot;</span>, tid);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tid == <span class="number">0</span>) &#123;</span><br><span class="line">            nthreads = omp_get_num_threads();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Number of threads %d\n&quot;</span>, nthreads);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ filename.cpp -o filename -fopenmp</span><br><span class="line"></span><br><span class="line">./filename</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<blockquote>
<p>Hello World from OMP thread 12<br>Hello World from OMP thread 37<br>Hello World from OMP thread 13<br>Hello World from OMP thread 7<br>Hello World from OMP thread 0<br>Number of threads 40<br>Hello World from OMP thread 39<br>Hello World from OMP thread 2<br>Hello World from OMP thread 5<br>Hello World from OMP thread 38<br>Hello World from OMP thread 22<br>Hello World from OMP thread 4<br>Hello World from OMP thread 10<br>Hello World from OMP thread 17<br>Hello World from OMP thread 3<br>Hello World from OMP thread 26<br>Hello World from OMP thread 1<br>Hello World from OMP thread 8<br>Hello World from OMP thread 35<br>Hello World from OMP thread 14<br>Hello World from OMP thread 6<br>Hello World from OMP thread 18<br>Hello World from OMP thread 28<br>Hello World from OMP thread 20<br>Hello World from OMP thread 11<br>Hello World from OMP thread 9<br>Hello World from OMP thread 23<br>Hello World from OMP thread 33<br>Hello World from OMP thread 34<br>Hello World from OMP thread 31<br>Hello World from OMP thread 36<br>Hello World from OMP thread 19<br>Hello World from OMP thread 21<br>Hello World from OMP thread 29<br>Hello World from OMP thread 15<br>Hello World from OMP thread 25<br>Hello World from OMP thread 24<br>Hello World from OMP thread 30<br>Hello World from OMP thread 16<br>Hello World from OMP thread 27<br>Hello World from OMP thread 32</p>
</blockquote>
<p><a href="https://blog.csdn.net/weixin_41890971/article/details/86766492">Intel编译器安装OpenMPI4.0</a></p>
<p><a href="https://blog.csdn.net/weixin_42819452/article/details/102816640">OpenMP使用详解</a></p>
<p><a href="https://blog.csdn.net/csdnmicrosoftcsdn/article/details/43277439">使用OpenMP给程序加速</a></p>
<p><a href="https://blog.csdn.net/liurong_cn/article/details/8229605">openMP的一点使用经验</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for reduction(+:sum)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        sum = sum + a[i];</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;sum: &quot;</span>&lt;&lt;sum&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用归约(reduction)</p>
<p>不使用的话，当某线程A执行sum = sum + a[i]的同时，另一线程B正好在更新sum，而此时A还在用旧的sum做累加，于是出现了错误。</p>
<p>reduction虽然很方便，但它只支持一些基本操作，比如+,-,*,&amp;,|,&amp;&amp;,||等。使用<code>#pragma omp critical</code>用在一段代码临界区之前，保证每次只有一个OpenMP线程进入（临界区）</p>
<p><code>pragma omp sections</code> 之后的代码块通过 <code>pragma omp section</code> 进一步被分为各个子区段。每个 <code>pragma omp section</code> 块将由一个单独的线程执行。</p>
<h1 id="7月15日"><a href="#7月15日" class="headerlink" title="7月15日"></a>7月15日</h1><h2 id="大纲-4"><a href="#大纲-4" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>多进程（openmpi）</li>
</ol>
<h2 id="openmpi"><a href="#openmpi" class="headerlink" title="openmpi"></a>openmpi</h2><p><a href="http://hmli.ustc.edu.cn/doc/mpi/openmpi-install.htm">Open MPI安装使用</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf openmpi-4.1.4.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> openmpi-4.1.4</span><br><span class="line"></span><br><span class="line">./configure --prefix=/home/Yumj/ifycyu/openmpi</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">MPI_HOME=/home/Yumj/ifycyu/openmpi</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;MPI_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$&#123;MPI_HOME&#125;</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="variable">$&#123;MPI_HOME&#125;</span>/share/man:<span class="variable">$MANPATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> examples</span><br><span class="line">make</span><br><span class="line">mpirun -np 4 hello_c</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgtg.com/2022/07/15/ecvWb.png"></p>
<h3 id="并行计算机和分布式计算"><a href="#并行计算机和分布式计算" class="headerlink" title="并行计算机和分布式计算"></a>并行计算机和分布式计算</h3><p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180413220556066-418199688.png" alt="img"></p>
<p>多台计算机经由网络相连。</p>
<p>每个节点的进程无法访问其他节点的内存。</p>
<p><strong>⚠️NOTE</strong></p>
<p>一个进程的不同线程可以访问同一个内存；</p>
<p>不同的进程永远不能访问同一个内存（即使是同一台主机上的不同进程）；</p>
<p><strong>使用MPI的代码的原理:</strong></p>
<ol>
<li>多个进程并行启动。</li>
<li>每个进程运行该程序。</li>
<li>该程序描述了每个过程的作用。</li>
<li>关注过程的同步以及它们之间的数据交换。</li>
</ol>
<h3 id="编译，执行"><a href="#编译，执行" class="headerlink" title="编译，执行"></a>编译，执行</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mpi.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MPI_Init(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sup.\n&quot;</span>);</span><br><span class="line">    MPI_Finalize();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mpicc -o source source.c &#x2F;&#x2F;mpicc实际上只是一个对gcc的调用 （见：mpicc -showme）</span><br><span class="line">mpirun -n 2 source</span><br></pre></td></tr></table></figure>
<p>⚠️注意：</p>
<p>-n选项指定要并行运行的进程数量。如果省略-n选项，则启动的进程数取决于机器。</p>
<p>mpirun -host host0,host1 source  //允许指定执行所用的机器：这句的意思是：在host0，host1上各执行一次source。</p>
<p><strong><em>点对点通信</em></strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Ssend</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">int</span> count, MPI_Datatype datatype,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> dest, <span class="keyword">int</span> tag, MPI_Comm comm)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Recv</span><span class="params">(<span class="keyword">void</span> *buf, <span class="keyword">int</span> count, MPI_Datatype datatype,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> source, <span class="keyword">int</span> tag, MPI_Comm comm, MPI_Status *status)</span></span>;</span><br></pre></td></tr></table></figure>
<p>comm : 沟通器</p>
<p>tag : 信息标签</p>
<p>dest/source : 在该沟通器中的发送者和接受者的等级号</p>
<p>datatype : 所发送的数据的类型</p>
<p>count :发送和接受的数据数量</p>
<p>buf : 发送/接收的数据的开始地址</p>
<p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180416181406079-591301273.png" alt="img"></p>
<p><strong>MPI_Ssend的标签必须与MPI_Recv的标签匹配，否则通信失败。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mpi.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MPI_Init(&amp;argc, &amp;argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wrank; MPI_Comm_rank(MPI_COMM_WORLD, &amp;wrank);</span><br><span class="line">    <span class="keyword">int</span> witness = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span> (wrank==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> modifier = <span class="number">1</span>;</span><br><span class="line">        MPI_Ssend(&amp;modifier, <span class="number">1</span>, MPI_INT, <span class="number">3</span>, <span class="number">28</span>, MPI_COMM_WORLD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (wrank==<span class="number">3</span>)</span><br><span class="line">        MPI_Recv(&amp;witness, <span class="number">1</span>, MPI_INT, <span class="number">2</span>, <span class="number">28</span>, MPI_COMM_WORLD,</span><br><span class="line">                MPI_STATUS_IGNORE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Rang %d, witness %d.\n&quot;</span>, wrank, witness); </span><br><span class="line"></span><br><span class="line">    MPI_Finalize();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                                              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgtg.com/2022/07/16/ecR3a.png"></p>
<p>⚠️补充说明：</p>
<p>只有收到指定标签的全部消息时，接收过程才会退出对MPI_Recv的调用。</p>
<p><strong><em>全局同步：MPI_Barrier</em></strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MPI_Barrier(MPI_COMM_WORLD);</span><br></pre></td></tr></table></figure>


<p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180418005805643-157476245.png" alt="img"></p>
<p>P3最先到达barrier，但是它停下来了等了等后面的P0，P1，P2，然后四个进程都在barrier之后，再次开始出发，执行。</p>
<p><em>MPI_Barrier是确保进程之间同步的唯一方法。特别是，随后提出的集体通信都不会确保同步。</em></p>
<p><strong>广播 : MPI_Bcast</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Bcast</span><span class="params">(<span class="keyword">void</span> *buffer, <span class="keyword">int</span> count, MPI_Datatype datatype, <span class="keyword">int</span> root, MPI_Comm comm)</span></span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180418023946248-535627891.png" alt="img"></p>
<p>发送者：一个root，唯一的      接受者：包括发送者在内的所有人</p>
<p><strong>选择性分配：MPI_Scatter</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Scatter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> <span class="keyword">void</span> *sendbuf, <span class="keyword">int</span> sendcount, MPI_Datatype sendtype,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">void</span> *recvbuf, <span class="keyword">int</span> recvcount, MPI_Datatype recvtype,<span class="keyword">int</span> root, MPI_Comm comm)</span></span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180418025459852-1113538277.png" alt="img"></p>
<p>所有进程均须调用该方法， 唯一的发送者root， 接受者为所有进程。 </p>
<p>sendcount是发送到单个进程的数据的数量。MPI_Scatter剪切要发送的数据（与通信器中的进程一样多），大小为sendcount。发送的数据的顺序对应于接收过程的顺序：第i个数据集被发送到等级i的过程。发送的数据总数为sendcount *（通信器中的进程数）。</p>
<p><strong>收集：MPI_Gather</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Gather</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> <span class="keyword">void</span> *sendbuf, <span class="keyword">int</span> sendcount, MPI_Datatype sendtype,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">void</span> *recvbuf, <span class="keyword">int</span> recvcount, MPI_Datatype recvtype, <span class="keyword">int</span> root, MPI_Comm comm)</span></span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180418030527875-1176225741.png" alt="img"></p>
<p>这是MPI_Scatter的逆操作。   root是唯一的接收器，所有进程都是发射器。</p>
<p><strong>普遍收集 MPI_Allgather</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Allgather</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> <span class="keyword">void</span> *sendbuf, <span class="keyword">int</span> sendcount, MPI_Datatype sendtype,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">void</span> *recvbuf, <span class="keyword">int</span> recvcount, MPI_Datatype recvtype,</span></span></span><br><span class="line"><span class="function"><span class="params">     MPI_Comm comm)</span></span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180419150708811-2097656129.png" alt="img"></p>
<p><strong>选择性分配：MPI_Scatterv</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Scatterv</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> <span class="keyword">void</span> *sendbuf, <span class="keyword">const</span> <span class="keyword">int</span> sendcounts[], <span class="keyword">const</span> <span class="keyword">int</span> displs[],MPI_Datatype sendtype, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">void</span> *recvbuf, <span class="keyword">int</span> recvcount, MPI_Datatype recvtype, <span class="keyword">int</span> root, MPI_Comm comm)</span></span>; </span><br></pre></td></tr></table></figure>
<p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180419151259702-1966599177.png" alt="img"></p>
<p>给每个进程发送的数据量：sendcounts = {1, 2, 1, 2}</p>
<p>给每个进程发送的数据在缓存中的位置：displs = {0, 1, 3, 4}.</p>
<p><strong>选择性收集 : MPI_Gatherv</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MPI_Gatherv</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> <span class="keyword">void</span> *sendbuf, <span class="keyword">int</span> sendcount, MPI_Datatype sendtype,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">void</span> *recvbuf, <span class="keyword">const</span> <span class="keyword">int</span> recvcounts[], <span class="keyword">const</span> <span class="keyword">int</span> displs[],</span></span></span><br><span class="line"><span class="function"><span class="params">     MPI_Datatype recvtype, <span class="keyword">int</span> root, MPI_Comm comm)</span></span>;</span><br></pre></td></tr></table></figure>


<p><img src="https://images2018.cnblogs.com/blog/946688/201804/946688-20180419153157277-2037463740.png" alt="img"></p>
<h1 id="7月16日"><a href="#7月16日" class="headerlink" title="7月16日"></a>7月16日</h1><h2 id="大纲-5"><a href="#大纲-5" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>MPI并行程序</li>
</ol>
<h2 id="MPI并行程序"><a href="#MPI并行程序" class="headerlink" title="MPI并行程序"></a>MPI并行程序</h2><p>矩阵分块乘法</p>
<p>将一个矩阵每一列分配给各个子进程，然后在进程内部将一列与另一个矩阵相乘，最后将根进程收集结果并进行输出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成随机矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> **<span class="title">generate_matrix</span><span class="params">(<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>,m;</span><br><span class="line">    <span class="keyword">int</span> **matrix;</span><br><span class="line">    matrix = (<span class="keyword">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * size); <span class="comment">//二维数组</span></span><br><span class="line">    <span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; size; m++)</span><br><span class="line">        matrix[m] = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * size); <span class="comment">//一维数组</span></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>) + rand());</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i][j]= rand() % <span class="number">20</span>;<span class="comment">//填充数字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_matrx</span><span class="params">(<span class="keyword">int</span> **a,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//矩阵相乘</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">Multiplication</span><span class="params">(<span class="keyword">int</span> **a,<span class="keyword">int</span> b[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *result;</span><br><span class="line">    result = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * size);</span><br><span class="line">    <span class="keyword">int</span> i,m,n,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; size; m++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(n = <span class="number">0</span>; n &lt; size; n++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += a[n][m] * b[n];</span><br><span class="line">        &#125;</span><br><span class="line">        result[m] = sum;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size,rank,dest;</span><br><span class="line">    MPI_Comm comm = MPI_COMM_WORLD;</span><br><span class="line">    MPI_Status status;</span><br><span class="line">    MPI_Init(&amp;argc,&amp;argv);<span class="comment">//并行初始化函数</span></span><br><span class="line">    MPI_Comm_size(comm,&amp;size);<span class="comment">//获得总的进程数目</span></span><br><span class="line">    MPI_Comm_rank(comm,&amp;rank);<span class="comment">//获得本进程的ID</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> **matrix1;</span><br><span class="line">    <span class="keyword">int</span> **matrix2;</span><br><span class="line">    <span class="keyword">int</span> send_buff[size*size];</span><br><span class="line">    matrix1 = generate_matrix(size);</span><br><span class="line">    matrix2 = generate_matrix(size);</span><br><span class="line">    <span class="keyword">if</span>(rank == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;matrix1 is :\n&quot;</span>);</span><br><span class="line">        print_matrx((<span class="keyword">int</span> **)matrix1,size);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;matrix2 is :\n&quot;</span>);</span><br><span class="line">        print_matrx((<span class="keyword">int</span> **)matrix2,size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j,k,tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">            <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; size; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                send_buff[tmp] = matrix1[j][k];</span><br><span class="line">                tmp++;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rbuf[size];</span><br><span class="line">    <span class="keyword">int</span> final_buff[size];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *result;</span><br><span class="line"></span><br><span class="line">    result = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    MPI_Scatter(send_buff,size,</span><br><span class="line">                ,rbuf,size,MPI_INT,<span class="number">0</span>,comm);<span class="comment">//进程0,分发行</span></span><br><span class="line"></span><br><span class="line">    result = Multiplication((<span class="keyword">int</span> **)matrix2,rbuf,size);<span class="comment">//计算</span></span><br><span class="line">    MPI_Barrier(comm);<span class="comment">//等待所有进程计算结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *recv_buff;</span><br><span class="line">    <span class="keyword">if</span>(rank == <span class="number">0</span>)</span><br><span class="line">        recv_buff = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size*size); </span><br><span class="line">    MPI_Barrier(comm);<span class="comment">//等待所有进程计算结束</span></span><br><span class="line"></span><br><span class="line">    MPI_Gather(result,size,MPI_INT,recv_buff,size,MPI_INT,<span class="number">0</span>,comm);<span class="comment">//收集各列数据</span></span><br><span class="line">    <span class="comment">//根进程进行输出(将二维数组一维化了,)</span></span><br><span class="line">    <span class="keyword">if</span>(rank == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nresult is :\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m,n,tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; size; m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(n = <span class="number">0</span>;n &lt; size;n++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,recv_buff[tmp]);</span><br><span class="line">                tmp++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MPI_Finalize();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h1 id="7月17日"><a href="#7月17日" class="headerlink" title="7月17日"></a>7月17日</h1><h2 id="大纲-6"><a href="#大纲-6" class="headerlink" title="大纲"></a>大纲</h2><p>对这一周的内容进行巩固、完善</p>
<h1 id="7月18日"><a href="#7月18日" class="headerlink" title="7月18日"></a>7月18日</h1><h2 id="大纲-7"><a href="#大纲-7" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>CUDA编程模型</li>
</ol>
<h2 id="CUDA编程模型"><a href="#CUDA编程模型" class="headerlink" title="CUDA编程模型"></a>CUDA编程模型</h2><p>CUDA是一种通用的并行计算平台和编程模型，是在C语言基础上扩展的。</p>
<p>CUDA体系结构的组成来说，包含了三个部分：开发库、运行期环境和驱动</p>
<p>驱动程序必须在每个节点上安装 运行时库可以在共享目录中安装一份</p>
<p>一个典型的CUDA程序是按这样的步骤执行的：</p>
<ol>
<li>把数据从CPU内存拷贝到GPU内存。</li>
<li>调用核函数对存储在GPU内存中的数据进行操作的。</li>
<li>将数据从GPU内存传送回CPU内存。</li>
</ol>
<p>​    尽量使用寄存器，尽量将数据声明为局部变量。而当存在着数据的重复利用时，可以把数据存放在共享内存里。而对于全局内存，我们需要注意用一种合理的方式来进行数据的合并访问，以尽量减少设备对内存子系统再次发出访问操作的次数。</p>
<h3 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h3><p><img src="https://pic1.zhimg.com/80/v2-927e0893292ddecec2983977a5806c6c_720w.jpg" alt="img"></p>
<p>一个内核启动所产生的所有线程统称一个网格（Grid），同一网格中的所有线程共享相同的全局内存空间。</p>
<p>一个网格由多个线程块（Block）构成。再下一级，一个线程块由一组线程（Thread）构成。</p>
<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p><img src="https://pic4.zhimg.com/80/v2-087a0ee8e19464285816fefd0970e4b3_720w.jpg" alt="img"></p>
<p>寄存器是GPU上运行速度最快的内存空间，核函数中声明的一个没有其他修饰符的自变量，通常就存储在寄存器中。</p>
<p>共享内存是GPU上可受用户控制的一级缓存。当存在着数据的重复利用时，使用共享内存是比较合适的。</p>
<p>全局内存是GPU中最大、延迟最高并且最常使用的内存。</p>
<p>CUDA给编程者提供了这些可以操作的GPU内存层次结构，这对我们进行数据移动和布局提供了更多可控制的支持，方便了我们以更接近底层硬件实现的思路优化程序，以达到更高的性能。这也是CUDA编程不同于CPU编程的特点之一。</p>
<h1 id="7月19日"><a href="#7月19日" class="headerlink" title="7月19日"></a>7月19日</h1><h2 id="大纲-8"><a href="#大纲-8" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>GPU硬件结构</li>
<li>软硬件组织结构对比</li>
</ol>
<h2 id="GPU硬件结构"><a href="#GPU硬件结构" class="headerlink" title="GPU硬件结构"></a>GPU硬件结构</h2><p>GPU并不是一个独立运行的计算平台，而需要与CPU协同工作，可以看成是CPU的协处理器，因此当我们在说GPU并行计算时，其实是指的基于CPU+GPU的异构计算架构。</p>
<p><img src="https://pic3.zhimg.com/80/v2-df49a98a67c5b8ce55f1a9afcf21d982_720w.jpg" alt="img"></p>
<p>GPU包括更多的运算核心，其特别适合数据并行的计算密集型任务，CPU负责处理逻辑复杂的串行程序，而GPU重点处理数据密集型的并行计算程序，从而发挥最大功效。</p>
<p><img src="https://pic2.zhimg.com/80/v2-6456af75530956da6bc5bab7418ff9e5_720w.jpg" alt="img"></p>
<p>GPU实际上是一个SM的阵列，每个SM包含N个计算核，GPU的整体结构，其主要是由大量的SM（Streaming-Multiprocessor 流式多处理器）和DRAM存储等构成的。SM由大量计算核（有时也称SP或CUDA核）、LDU（Load-Store Units）、SFU（Special-Function Units）、寄存器、共享内存等构成。这种结构正是GPU具有高并行度计算能力的基础。</p>
<p>当启动一个内核网络时，它的线程块会被分布在可用的SM上来执行。当线程块一旦被调度到一个SM上，其中的线程只会在那个指定的SM上并发执行。多个线程块可能会被分配到同一个SM上，而且是根据SM资源的可用性进行调度的。</p>
<h2 id="软硬件组织结构对比"><a href="#软硬件组织结构对比" class="headerlink" title="软硬件组织结构对比"></a>软硬件组织结构对比</h2><p>CUDA采用单指令多线程（SIMT）架构来管理和执行线程，每32个线程为一组，被称为线程束（Warp）。线程束中所有线程同时执行相同的指令。</p>
<p><img src="https://pic3.zhimg.com/80/v2-7ba17fc91e5feead9a3a6dbfba956c8e_720w.jpg" alt="img"></p>
<p>左侧是逻辑视图从线程构成线程块再构成线程网络。对应右侧的硬件就是CUDA core、SM、GPU。</p>
<p>共享内存被分配在SM上的常驻线程块中，寄存器在线程中被分配。线程块中的线程通过这些资源可以进行相互的合作和通信。尽管线程块里的所有线程都可以逻辑地并行运行，但并不是所有线程都可以同时在物理层面执行。因此线程块里的不同线程可能会以不同速度前进。我们可以使用CUDA语句在需要的时候进行线程的同步。</p>
<h1 id="7月20日"><a href="#7月20日" class="headerlink" title="7月20日"></a>7月20日</h1><h2 id="大纲-9"><a href="#大纲-9" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>了解基本的CUDA语句及用法</li>
</ol>
<p><small><small>8月2日也是有关cuda</small></small></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol>
<li><p>device上分配内存的cudaMalloc函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">cudaError_t <span class="title">cudaMalloc</span><span class="params">(<span class="keyword">void</span>** devPtr, <span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>负责host和device之间数据通信的cudaMemcpy函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">cudaError_t <span class="title">cudaMemcpy</span><span class="params">(<span class="keyword">void</span>* dst, <span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">size_t</span> count, cudaMemcpyKind kind)</span></span></span><br></pre></td></tr></table></figure>
<p>src指向数据源，而dst是目标区域，count是复制的字节数，其中kind控制复制的方向(cpu-&gt;gpu,gpu-&gt;cpu)</p>
</li>
<li><p>cudaMallocManaged函数分配托管内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">cudaError_t <span class="title">cudaMallocManaged</span><span class="params">(<span class="keyword">void</span> **devPtr, <span class="keyword">size_t</span> size, <span class="keyword">unsigned</span> <span class="keyword">int</span> flag=<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="向量加法实例"><a href="#向量加法实例" class="headerlink" title="向量加法实例"></a>向量加法实例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个向量加法kernel，grid和block均为一维</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span>* x, <span class="keyword">float</span> * y, <span class="keyword">float</span>* z, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取全局索引</span></span><br><span class="line">    <span class="keyword">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">    <span class="comment">// 步长</span></span><br><span class="line">    <span class="keyword">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; n; i += stride)</span><br><span class="line">    &#123;</span><br><span class="line">        z[i] = x[i] + y[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> nBytes = N * <span class="keyword">sizeof</span>(<span class="keyword">float</span>);</span><br><span class="line">    <span class="comment">// 申请host内存</span></span><br><span class="line">    <span class="keyword">float</span> *x, *y, *z;</span><br><span class="line">    x = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(nBytes);</span><br><span class="line">    y = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(nBytes);</span><br><span class="line">    z = (<span class="keyword">float</span>*)<span class="built_in">malloc</span>(nBytes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i] = <span class="number">10.0</span>;</span><br><span class="line">        y[i] = <span class="number">20.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请device内存</span></span><br><span class="line">    <span class="keyword">float</span> *d_x, *d_y, *d_z;</span><br><span class="line">    cudaMalloc((<span class="keyword">void</span>**)&amp;d_x, nBytes);</span><br><span class="line">    cudaMalloc((<span class="keyword">void</span>**)&amp;d_y, nBytes);</span><br><span class="line">    cudaMalloc((<span class="keyword">void</span>**)&amp;d_z, nBytes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将host数据拷贝到device</span></span><br><span class="line">    cudaMemcpy((<span class="keyword">void</span>*)d_x, (<span class="keyword">void</span>*)x, nBytes, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy((<span class="keyword">void</span>*)d_y, (<span class="keyword">void</span>*)y, nBytes, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="comment">// 定义kernel的执行配置</span></span><br><span class="line">    <span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">256</span>)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">gridSize</span><span class="params">((N + blockSize.x - <span class="number">1</span>) / blockSize.x)</span></span>;</span><br><span class="line">    <span class="comment">// 执行kernel</span></span><br><span class="line">    add &lt;&lt; &lt; gridSize, blockSize &gt;&gt; &gt;(d_x, d_y, d_z, N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将device得到的结果拷贝到host</span></span><br><span class="line">    cudaMemcpy((<span class="keyword">void</span>*)z, (<span class="keyword">void</span>*)d_z, nBytes, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查执行结果</span></span><br><span class="line">    <span class="keyword">float</span> maxError = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        maxError = fmax(maxError, <span class="built_in">fabs</span>(z[i] - <span class="number">30.0</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最大误差: &quot;</span> &lt;&lt; maxError &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放device内存</span></span><br><span class="line">    cudaFree(d_x);</span><br><span class="line">    cudaFree(d_y);</span><br><span class="line">    cudaFree(d_z);</span><br><span class="line">    <span class="comment">// 释放host内存</span></span><br><span class="line">    <span class="built_in">free</span>(x);</span><br><span class="line">    <span class="built_in">free</span>(y);</span><br><span class="line">    <span class="built_in">free</span>(z);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/80/v2-e4258399e69394620daa1e199d53fe0e_720w.jpg" alt="img"></p>
<p>需要单独在host和device上进行内存分配，并且要进行数据拷贝，这是很容易出错的。好在CUDA 6.0引入统一内存来避免这种麻烦。</p>
<p>用法如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> nBytes = N * <span class="keyword">sizeof</span>(<span class="keyword">float</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请托管内存</span></span><br><span class="line">    <span class="keyword">float</span> *x, *y, *z;</span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;x, nBytes);</span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;y, nBytes);</span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;z, nBytes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i] = <span class="number">10.0</span>;</span><br><span class="line">        y[i] = <span class="number">20.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义kernel的执行配置</span></span><br><span class="line">    <span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">256</span>)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">gridSize</span><span class="params">((N + blockSize.x - <span class="number">1</span>) / blockSize.x)</span></span>;</span><br><span class="line">    <span class="comment">// 执行kernel</span></span><br><span class="line">    add &lt;&lt; &lt; gridSize, blockSize &gt;&gt; &gt;(x, y, z, N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步device 保证结果能正确访问</span></span><br><span class="line">    cudaDeviceSynchronize();</span><br><span class="line">    <span class="comment">// 检查执行结果</span></span><br><span class="line">    <span class="keyword">float</span> maxError = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        maxError = fmax(maxError, <span class="built_in">fabs</span>(z[i] - <span class="number">30.0</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最大误差: &quot;</span> &lt;&lt; maxError &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    cudaFree(x);</span><br><span class="line">    cudaFree(y);</span><br><span class="line">    cudaFree(z);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="7月21日"><a href="#7月21日" class="headerlink" title="7月21日"></a>7月21日</h1><h2 id="大纲-10"><a href="#大纲-10" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>矩阵乘法实例</li>
</ol>
<h2 id="矩阵乘法实例"><a href="#矩阵乘法实例" class="headerlink" title="矩阵乘法实例"></a>矩阵乘法实例</h2><ol>
<li><p>结构体:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 矩阵类型，行优先，M(row, col) = *(M.elements + row * M.width + col)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">float</span> *elements;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>矩阵乘法核函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取矩阵A的(row, col)元素</span></span><br><span class="line"><span class="function">__device__ <span class="keyword">float</span> <span class="title">getElement</span><span class="params">(Matrix *A, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> A-&gt;elements[row * A-&gt;width + col];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为矩阵A的(row, col)元素赋值</span></span><br><span class="line"><span class="function">__device__ <span class="keyword">void</span> <span class="title">setElement</span><span class="params">(Matrix *A, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">float</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A-&gt;elements[row * A-&gt;width + col] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵相乘kernel，2-D，每个线程计算一个元素</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">matMulKernel</span><span class="params">(Matrix *A, Matrix *B, Matrix *C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> Cvalue = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">int</span> row = threadIdx.y + blockIdx.y * blockDim.y;</span><br><span class="line">	<span class="keyword">int</span> col = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A-&gt;width; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		Cvalue += getElement(A, row, i) * getElement(B, i, col);</span><br><span class="line">	&#125;</span><br><span class="line">	setElement(C, row, col, Cvalue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
<li><p>使用统一内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line">    Matrix *A, *B, *C;</span><br><span class="line">    <span class="comment">// 申请托管内存</span></span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;A, <span class="keyword">sizeof</span>(Matrix));</span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;B, <span class="keyword">sizeof</span>(Matrix));</span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;C, <span class="keyword">sizeof</span>(Matrix));</span><br><span class="line">    <span class="keyword">int</span> nBytes = width * height * <span class="keyword">sizeof</span>(<span class="keyword">float</span>);</span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;A-&gt;elements, nBytes);</span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;B-&gt;elements, nBytes);</span><br><span class="line">    cudaMallocManaged((<span class="keyword">void</span>**)&amp;C-&gt;elements, nBytes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    A-&gt;height = height;</span><br><span class="line">    A-&gt;width = width;</span><br><span class="line">    B-&gt;height = height;</span><br><span class="line">    B-&gt;width = width;</span><br><span class="line">    C-&gt;height = height;</span><br><span class="line">    C-&gt;width = width;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        A-&gt;elements[i] = <span class="number">1.0</span>;</span><br><span class="line">        B-&gt;elements[i] = <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义kernel的执行配置(二维线程块32×32 维线程网格128×128)</span></span><br><span class="line">    <span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">gridSize</span><span class="params">((width + blockSize.x - <span class="number">1</span>) / blockSize.x, </span></span></span><br><span class="line"><span class="function"><span class="params">        (height + blockSize.y - <span class="number">1</span>) / blockSize.y)</span></span>;</span><br><span class="line">    <span class="comment">// 将核函数放在线程网格中执行</span></span><br><span class="line">    matMulKernel &lt;&lt; &lt; gridSize, blockSize &gt;&gt; &gt;(A, B, C);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步device 保证结果能正确访问</span></span><br><span class="line">    cudaDeviceSynchronize();</span><br><span class="line">    <span class="comment">// 检查执行结果</span></span><br><span class="line">    <span class="keyword">float</span> maxError = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">        maxError = fmax(maxError, <span class="built_in">fabs</span>(C-&gt;elements[i] - <span class="number">2</span> * width));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最大误差: &quot;</span> &lt;&lt; maxError &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h1 id="7月22日"><a href="#7月22日" class="headerlink" title="7月22日"></a>7月22日</h1><h2 id="大纲-11"><a href="#大纲-11" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>UM(Unified Memory)</li>
</ol>
<h2 id="什么是UM"><a href="#什么是UM" class="headerlink" title="什么是UM"></a>什么是UM</h2><p>在今天典型的PC上，CPU与GPU的内存是物理上独立的，通过PCI-E总线进行连接通信。实际上，在CUDA 6.0之前，程序员必须在编程期间很清楚这一点，并且反应在代码中。必须在CPU和GPU两端都进行内存分配，并不断地进行手动copy，来保证两端的内存一致。</p>
<p>Unified memory在程序员的视角中，维护了一个统一的内存池，在CPU与GPU中共享。使用了单一指针进行托管内存，由系统来自动地进行内存迁移。</p>
<p><code>CPU代码（左）与带有UM的CUDA代码（右）</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortfile</span><span class="params">(FILE *fp, <span class="keyword">int</span> N)</span>             <span class="keyword">void</span> <span class="title">sortfile</span><span class="params">(FILE *fp, <span class="keyword">int</span> N)</span>                   </span></span><br><span class="line"><span class="function"></span>&#123;                                          &#123;</span><br><span class="line">    <span class="keyword">char</span> *data;                                <span class="keyword">char</span> *data; </span><br><span class="line">    data = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(N);                   cudaMallocManaged(data, N);</span><br><span class="line"></span><br><span class="line">    fread(data, <span class="number">1</span>, N, fp);                     fread(data, <span class="number">1</span>, N, fp);</span><br><span class="line"></span><br><span class="line">    qsort(data, N, <span class="number">1</span>, compare);                qsort&lt;&lt;&lt;...&gt;&gt;&gt;(data, N, <span class="number">1</span>, compare);</span><br><span class="line">                                               cudaDeviceSynchronize();</span><br><span class="line"></span><br><span class="line">    usedata(data);                             usedata(data);</span><br><span class="line">    <span class="built_in">free</span>(data);                                <span class="built_in">free</span>(data);</span><br><span class="line">&#125;                                          &#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>简化了代码编写和内存模型</li>
<li><ul>
<li>可以在CPU端和GPU端共用一个指针，不用单独各自分配空间。方便管理，减少了代码量。</li>
<li>更方便的代码迁移。</li>
</ul>
</li>
<li>链表，本质上是有指针组成的嵌套的数据结构，内存空间的传递很复杂。<ul>
<li>在CPU和GPU间直接传递链表元素。</li>
<li>在CPU或GPU任一一端来修改链表元素。</li>
<li>避免了复杂的同步问题。</li>
</ul>
</li>
</ul>
<h1 id="7月23日"><a href="#7月23日" class="headerlink" title="7月23日"></a>7月23日</h1><h2 id="大纲-12"><a href="#大纲-12" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>了解vtune、nvprof</li>
</ol>
<h2 id="Intel-VTune-Profiler"><a href="#Intel-VTune-Profiler" class="headerlink" title="Intel VTune Profiler"></a>Intel VTune Profiler</h2><p><a href="https://blog.csdn.net/yaojingqingcheng/article/details/120335335">使用Intel VTune Profiler进行性能分析及优化</a></p>
<p>Intel VTune Profiler是一个全平台的性能分析工具，可以帮助你快速发现和分析应用程序及整个系统的性能瓶颈。</p>
<p>用户获取的信息主要有以下几点：</p>
<ol>
<li>确定占用大量处理器时间的区域（热点）；</li>
<li>查看应用运行过程中的情况（通过检测绑定process）；</li>
<li>没有充分的有效利用可用的处理器时间的代码；</li>
<li>影响应用程序性能的同步对象；</li>
<li>应用程序是否浪费时间在输入输出操作上，在哪里浪费的，为何浪费；</li>
<li>对比不同的同步方法、不同的线程数量、不同的算法之间对性能的影响；</li>
<li>线程的活动状态和状态的转换；</li>
<li>代码中与硬件相关的性能瓶颈（如缓存缺失、分支预测失败等）；</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> *a = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i ++)</span><br><span class="line">        a[i] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/bf7e88b1cb674ae6a5c36c3d1ec8cab4.png" alt="img"></p>
<p>分析可知，有内存泄漏的风险</p>
<h2 id="nvprof"><a href="#nvprof" class="headerlink" title="nvprof"></a>nvprof</h2><p> nvprof 是一个可用于 Linux 、 Windows 和 OS X 的命令行探查器。</p>
<p>通过使用 <code>nvprof ./myApp</code> 运行应用程序，可以快速看到它所使用的所有内核和内存副本的摘要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;9261&#x3D;&#x3D; Profiling application: .&#x2F;tHogbomCleanHemi</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;9261&#x3D;&#x3D; Profiling result:</span><br><span class="line"></span><br><span class="line">  Time(%)      Time     Calls       Avg       Min       Max  Name</span><br><span class="line"></span><br><span class="line">   58.73%  737.97ms      1000  737.97us  424.77us  1.1405ms  subtractPSFLoop_kernel(float const *, int, float*, int, int, int, int, int, int, int, float, float)</span><br><span class="line"></span><br><span class="line">   38.39%  482.31ms      1001  481.83us  475.74us  492.16us  findPeakLoop_kernel(MaxCandidate*, float const *, int)</span><br><span class="line"></span><br><span class="line">    1.87%  23.450ms         2  11.725ms  11.721ms  11.728ms  [CUDA memcpy HtoD]</span><br><span class="line"></span><br><span class="line">    1.01%  12.715ms      1002  12.689us  2.1760us  10.502ms  [CUDA memcpy DtoH]</span><br></pre></td></tr></table></figure>


<p>摘要将对同一内核的所有调用组合在一起，显示每个内核的总时间和总应用程序时间的百分比。</p>
<h1 id="7月24日"><a href="#7月24日" class="headerlink" title="7月24日"></a>7月24日</h1><h2 id="大纲-13"><a href="#大纲-13" class="headerlink" title="大纲"></a>大纲</h2><p>对这一周的内容进行巩固、完善，回顾 linux 系统下的命令行操作的知识。</p>
<h1 id="7月25-26日"><a href="#7月25-26日" class="headerlink" title="7月25-26日"></a>7月25-26日</h1><h2 id="大纲-14"><a href="#大纲-14" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>InfiniBand</li>
<li>InfiniBand测试工具</li>
</ol>
<h2 id="InfiniBand"><a href="#InfiniBand" class="headerlink" title="InfiniBand"></a>InfiniBand</h2><p>[InfiniBand简介](<a href="http://www.asc-events.net/ASC22/v/pdf1/ASC22">http://www.asc-events.net/ASC22/v/pdf1/ASC22</a> -  InfiniBand简介.pdf)</p>
<p>InfiniBand绕过网络堆栈，为两端应用程序之间的通信创建直接通道，从而避免了操作系统的介入</p>
<p>InfiniBand是为硬件实现而设计的，与TCP不同的是，TCP的体系结构考虑的是软件实现。</p>
<p>InfiniBand架构是一种支持多并发的“转换线缆”技术，它是新一代服务器硬件平台的I/O标准。由于它具有高带宽、低延时、 高可扩展性的特点</p>
<p><img src="https://i.imgtg.com/2022/08/02/AMHPC.png"></p>
<p>其组成单元主要分为四类：</p>
<ol>
<li>HCA（Host Channel Adapter），它是连接内存控制器和TCA的桥梁；将RDMA网卡称为HCA</li>
<li>Infiniband link，它是连接HCA的光纤</li>
<li>交换机和路由器<img src="https://i.imgtg.com/2022/08/02/AoFTL.png"></li>
</ol>
<p>​    发送数据时,会检测接受者是否有buf(防止丢包) 无损网络,不需要像TCP窗口算法那样的丢包机制来确定最佳的正在传输的数据包数量。这使得高效的产品能够以极低的延迟和可忽略的CPU使用率为应用程序提供56 GB/s的数据速率。</p>
<p>建立虚拟通道,获取远端应用数据(不用os网络协议栈进行数据拷贝)</p>
<p><img src="https://i.imgtg.com/2022/08/02/AoicX.png"></p>
<p>通过网口,cpu不感知</p>
<p><img src="https://i.imgtg.com/2022/08/02/Ao1Ot.png"></p>
<p>RDMA是一种通过网络在应用程序之间直接传输数据的能力，无需操作系统的参与，同时消耗双方可忽略的CPU资源（零拷贝传输）。CPU完全不感知，直接内存访问，解放CPU</p>
<p><img src="https://i.imgtg.com/2022/08/02/AoQyb.png"></p>
<p>硬件卸载架构 1让CPU告知网卡,网卡聚合,CPU计算不被打断</p>
<h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><p>ibv_devinfo 显示device信息</p>
<p>ibdev2netdev -v 查看网口映射关系</p>
<p>ibstatus -d xxx 查看xxx设备在子网中的状态</p>
<p>ibswitches  查询全网Switch  ibhosts 查询全网hosts</p>
<p>ibtracert  xx xx 两个地址直接通过的switch</p>
<p>nvidia-smi topo -m 查询网卡到gpu拓扑</p>
<h1 id="7月27-29日"><a href="#7月27-29日" class="headerlink" title="7月27-29日"></a>7月27-29日</h1><h2 id="大纲-15"><a href="#大纲-15" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>MTCNN Pytorch实现</li>
</ol>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>论文:</p>
<p><a href="https://arxiv.org/ftp/arxiv/papers/1604/1604.02878.pdf">Face Detection</a></p>
<p>代码:</p>
<p><a href="https://github.com/xuexingyu24/MTCNN_Tutorial">MTCNN_Tutorial</a></p>
<p>数据集:</p>
<p><a href="https://aistudio.baidu.com/aistudio/datasetdetail/4336">WIDER FACE数据集</a>的wider_face_split.zip与WIDER_train.zip压缩包，解压后存放路径分别为：<br>MTCNN_TUTORIAL-MASTER/data_set/wider_face_split/<br>MTCNN_TUTORIAL-MASTER/data_set/WIDER_train/</p>
<p><a href="http://mmlab.ie.cuhk.edu.hk/archive/CNN_FacePoint.htm">CNN for Facial Point Detection )</a>下载Training set,，解压后存放路径为：</p>
<p>MTCNN_TUTORIAL-MASTER/data_set/landmark/</p>
<h2 id="代码运行"><a href="#代码运行" class="headerlink" title="代码运行"></a>代码运行</h2><h3 id="图像标注"><a href="#图像标注" class="headerlink" title="图像标注"></a>图像标注</h3><ol>
<li><p>运行<code> data_preprocessing/transform.py</code>,将.mat标记文件转换为txt格式</p>
<p><img src="https://i.imgtg.com/2022/07/31/rfWVv.png"></p>
</li>
<li><p>运行<code> data_preprocessing/gen_Pnet_train_data.py</code>小于0.3划分为Negatives，0.4-0.65划分为Part faces，大于0.65划分为Positives。</p>
<p><img src="https://i.imgtg.com/2022/07/31/rfkqq.png"></p>
</li>
<li><p>运行<code> data_preprocessing/assemble_Pnet_imglist.py</code> 组装PNet的数据集注释文件并将其打乱，完成PNet训练数据的准备。</p>
<p><img src="https://i.imgtg.com/2022/07/31/rfxrc.png"></p>
</li>
<li><p>运行<code> train/Train_Pnet.py</code>，训练PNet。</p>
<p><img src="https://i.imgtg.com/2022/07/31/rfzQr.png"></p>
</li>
<li><p>运行<code>data_preprocessing/gen_Rnet_train_data.py</code>  <code>/data_preprocessing/assemble_Rnet_imglist.py</code> 生成RNet训练数据</p>
</li>
<li><p>运行<code>train/Train_Rnet.py</code> 训练RNet</p>
<p><img src="https://i.imgtg.com/2022/07/31/rfSnt.png"></p>
</li>
<li><p>运行<code> data_preprocessing/gen_Onet_train_data.py</code>  <code>data_preprocessing/gen_landmark_48.py</code> <code>data_preprocessing/assemble_Onet_imglist.py</code>生成ONet训练数据</p>
<p><img src="https://i.imgtg.com/2022/08/01/rXHPg.png"></p>
<p><img src="https://i.imgtg.com/2022/08/01/rXtub.png"></p>
</li>
<li><p>运行<code>train/Train_Onet.py</code>，训练ONet</p>
<p><img src="https://i.imgtg.com/2022/08/01/rXL9B.png"></p>
</li>
</ol>
<p>训练,验证阶段完成</p>
<h2 id="结果测试"><a href="#结果测试" class="headerlink" title="结果测试:"></a>结果测试:</h2><p><img src="https://i.imgtg.com/2022/07/30/rQm01.png"></p>
<p>找了很多教程，一直无法显示图片</p>
<p>linux干啥要cv.imshow()，于是改为保存图片</p>
<p><img src="https://i.imgtg.com/2022/07/30/rQpwI.png"></p>
<p>成功保存</p>
<p><img src="https://i.imgtg.com/2022/07/30/rQP1D.jpg"></p>
<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>有些文件的路径有问题,需要换成绝对路径才能运行</p>
<p>sys.path.append(‘..’)有时候换成sys.path.append(‘.’)才能运行</p>
<h1 id="7月30日"><a href="#7月30日" class="headerlink" title="7月30日"></a>7月30日</h1><h2 id="大纲-16"><a href="#大纲-16" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>AI Software Technology</li>
</ol>
<h2 id="英特尔至强可扩展处理器"><a href="#英特尔至强可扩展处理器" class="headerlink" title="英特尔至强可扩展处理器"></a>英特尔至强可扩展处理器</h2><p>发展趋势 : 核数增多 向量位宽越高</p>
<p><img src="https://i.imgtg.com/2022/08/04/AkqDX.png"></p>
<p>向量化和多线程同时引入,性能大幅度提升 </p>
<p>DL boost</p>
<p>VNNI 是一个专门用来对 int 8 低精度模型的<strong>推理</strong>进行加速的一个指令。</p>
<p>由于采用了这种更低精度,这个模型它的模型会变小。运算的时候不光是需要更少的计算资源，同时它也会占用更少的内存带宽，从而使得在一台一路服务器上，在一台服务器上可以同时并发地去运行多路的推理请求，从而使得整体的性能大幅提升。</p>
<h2 id="代码的优化"><a href="#代码的优化" class="headerlink" title="代码的优化"></a>代码的优化</h2><ol>
<li><p>第一个部分: performance 的一个分析，需要知道我这个代码到底哪些部分是最耗时的。</p>
</li>
<li><p>第二个部分: 根据这些最耗时的这些代码去分析它到底是因为它的多线程没有做好，亦或是它的向量化做得不是很好，或者是说它的一个 IO 是它的一个瓶颈，需要找出它的瓶颈。</p>
<ol>
<li>编译器选项</li>
<li>提升内存的访问效率 内存的对齐，包括合适的预取</li>
<li>向量化和并行化。 </li>
</ol>
</li>
</ol>
<p>单节点上进行优化的一些方法</p>
<p><img src="https://i.imgtg.com/2022/08/04/Axde6.png"></p>
<ol>
<li>基本的一些优化，<ol>
<li>编译的选项O0， O1 是不要选的，O0的话通常是做 debug 去用的。建议 O2 或者O3。O2 和O3取决于应用程序。</li>
<li>尽量能够用到一些已经优化的数学库，比如说 intel 的 mkr 矩阵库</li>
<li>选择合适的精度。</li>
</ol>
</li>
<li>内存的访问</li>
<li>SIMD<ol>
<li>提升它的一个向量化的效率，使它尽量地去跟它的理论分值能够达到匹配</li>
</ol>
</li>
<li>并行化<ol>
<li>充分地利用一个多核的优势，使得多核的性能能够达到一个线性的加速</li>
<li>不要频繁地去创建各种的 threads 因为创建了以后再把它 delay 的时候也会有一些开销。</li>
</ol>
</li>
</ol>
<p>单节点上性能已经达到最优，并不是说在多节点上一定达到最优</p>
<p>如果IO量非常大的时候，可能会需要考虑将串行的 IO 去改成并行的 IO 做到直接多个节点之间的一个 load balance 包括这种异步的通讯等等。</p>
<h1 id="8月1日"><a href="#8月1日" class="headerlink" title="8月1日"></a>8月1日</h1><h2 id="大纲-17"><a href="#大纲-17" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>NGC简介</li>
<li>工具包</li>
<li>Demo</li>
</ol>
<h2 id="NGC是什么"><a href="#NGC是什么" class="headerlink" title="NGC是什么"></a>NGC是什么</h2><p>​    借助NGC 目录（NVIDIA 的 GPU 优化 AI 和高性能计算软件中心）中的生产就绪型 AI 预训练模型，数据科学家和开发者可以快速适应模型，或直接将模型按原样部署以进行推理。</p>
<p>​    NGC:合理分配资源，使得所有的开发者都能够很快的去完成她自己的这部分开发工作，而且能够去减轻自己的管理和维护的负担。</p>
<ol>
<li>成套的软件和工具能够去覆盖到从数据的采集整理标注再到模型的训练，到模型的推理优化，以及再到构建完整的 AI 应用的各个方面。</li>
<li>随着 AI 的发展，需要越来越大的 AI 的模型和越来越多的训练数据。有更强大的性能能够去适应越来越大的一个算力的需求。</li>
<li>软件和工具能够在不同的平台上都经过了充分的测试。不管我们是面对一个单卡单GPU的场景还是多卡甚至是多机多卡多节点的一个场景，还是说在云上，在边缘端，在本地服务器等等不同的地方都具备一个很好的稳定性和可靠性。</li>
</ol>
<h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><h3 id="TAO-迁移学习"><a href="#TAO-迁移学习" class="headerlink" title="TAO(迁移学习)"></a>TAO(迁移学习)</h3><p>在基本不写代码或者是很少量的写代码的这个情况下，去使用数据以及 ngc 上提供的预训练的模型</p>
<h3 id="RIVA-对话式"><a href="#RIVA-对话式" class="headerlink" title="RIVA(对话式)"></a>RIVA(对话式)</h3><p>具备了世界一流的这个语音识别和文本转语音的模型。</p>
<h3 id="DEEPSTREAM"><a href="#DEEPSTREAM" class="headerlink" title="DEEPSTREAM"></a>DEEPSTREAM</h3><p>​    实现了一个完整的视频分析的pipeline ，它的源头支持多种视频流的格式和视频数据的来源。实现了从视频流的解码，然后以及视频的前处理后处理的工作。也提供了 plugin 的工具，可以去帮助客户来做定制化的工作。</p>
<h3 id="CLARA"><a href="#CLARA" class="headerlink" title="CLARA"></a>CLARA</h3><p>帮医生来做医疗影像的辅助诊断，来帮助医生去识别器官或者组织中的一些疾病。</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/collections/imagesegmentation">Image Segmentation | NVIDIA NGC</a></p>
<p>拉取docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nvcr.io/nvidia/pytorch:20.10-py3</span><br><span class="line">docker run --gpus all -it --rm nvcr.io/nvidia/pytorch:20.10-py3</span><br></pre></td></tr></table></figure>
<p>开始训练:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd /workspace/examples/maskrcnn/pytorch</span><br><span class="line">mkdir /datasets </span><br><span class="line">ln –sf &lt;/workspace/downloaded/coco&gt; /datasets/data</span><br><span class="line">python -m torch.distributed.launch --nproc_per_node=<span class="number">8</span> tools/train_net.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE <span class="string">&quot;float16&quot;</span> </span><br></pre></td></tr></table></figure>
<h1 id="8月2-3日"><a href="#8月2-3日" class="headerlink" title="8月2-3日"></a>8月2-3日</h1><h2 id="大纲-18"><a href="#大纲-18" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>CUDA</li>
</ol>
<p>感觉之前学的cuda内容不太完善</p>
<p><a href="https://face2ai.com/program-blog/#GPU%E7%BC%96%E7%A8%8B%EF%BC%88CUDA%EF%BC%89">人工智能编程 | 谭升的博客 (face2ai.com)</a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​     GPU 有加速并行的优势，就可以把一个原来的应用程序中可并行的部分把它移植到 GPU 上来让它做计算。然后其它的关于逻辑相关的控制依然放在 CPU 端，进而实现整个应用的性能的提升。</p>
<p>CPU和GPU线程的区别：</p>
<ol>
<li>CPU线程是重量级实体，操作系统交替执行线程，线程上下文切换花销很大</li>
<li>GPU线程是轻量级的，GPU应用一般包含成千上万的线程，多数在排队状态，线程之间切换基本没有开销。</li>
<li>CPU的核被设计用来尽可能减少一个或两个线程运行时间的延迟，而GPU核则是大量线程，最大幅度提高吞吐量</li>
</ol>
<p>​    CUDA是英伟达推出的一个并行计算架构和编程模型</p>
<ol>
<li><p>架构扩大。把 GPU 用于通用计算，然后使得应用程序能够充分利用 CPU 和 GPU 的资源。利用各自的优势来充分地发挥 GPU 在并行计算方面的能力。在 CUDA 编程方面， CUDA 对 CUDA C++编程，其实是对于 C 或者 C++的一个扩展。 CUDA 可以和 CUDA Python 结合，就是对 Python的一个扩展。并且在扩大除了对语言的这种扩展以外，它还会有自己的各种 API 来帮助我们去管理设备和内存。</p>
</li>
<li><p>什么是异构计算呢？ 虽然GPU有很多的核心，功能也很强大，但是它本身是不能独立工作的，也就是说它必须与 CPU 进行协同合作。CUDA并行计算其实就是 CPU 和 GPU 的协同计算，也就是异构计算。然后在CUDA的异构计算中，我们通常把在 CPU 上面执行的代码称为主机端的代码，然后在 GPU 上执行的代码称为设备端的代码。主机端的代码只能够用到主机端的内存。设备端代码只能在它设备上写内存，只能使用它设备上的内存。主机端和设备端内设备端的内存通过 PCIe bus 也就 PCIe 总线来进行连接。</p>
<p><img src="https://i.imgtg.com/2022/08/05/AhmsK.png"></p>
</li>
</ol>
<p><img src="https://i.imgtg.com/2022/08/05/AhJoa.png"></p>
<h2 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h2><p>__global__关键字，声明这个函数是一个kernel函数(所有执行在设备端的函数都称为 kernel 函数)</p>
<p>声明的这个函数表示这个函数在 GPU 上面是可全局调用的(既能在主机端调用，又能在设备端调用。)，执行是在设备端。<code>返回值类型必须是一个 void 型，并且不支持可变参</code></p>
<p>device 这个关键字，声明的函数它能执行在设备端，并且它的调用也只能在设备端调用。</p>
<p>host 其实就和 device 是对应的，只能执行在主机端。调用也只能在主机端来调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HelloFromGpu&lt;&lt;&lt;<span class="number">1</span>,kThreadCount&gt;&gt;&gt;()</span><br></pre></td></tr></table></figure>
<p>这个三个尖括号’&lt;&lt;&lt;grid,block&gt;&gt;&gt;’内是对设备代码执行的线程结构的配置（或者简称为对内核进行配置）</p>
<p>指明kernel launch过程(异步)  1个线程块里面包含5个线程</p>
<p>通过指定grid和block的维度，我们可以配置：</p>
<ul>
<li>内核中线程的数目</li>
<li>内核中使用的线程布局</li>
</ul>
<p>Kernel核函数编写有以下限制</p>
<ol>
<li>只能访问设备内存</li>
<li>必须有void返回类型</li>
<li>不支持可变数量的参数</li>
<li>不支持静态变量</li>
<li>显示异步行为</li>
</ol>
<h2 id="线程管理-1"><a href="#线程管理-1" class="headerlink" title="线程管理"></a>线程管理</h2><p><img src="https://face2ai.com/CUDA-F-2-0-CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B01/4.png" alt="img"></p>
<p>一个线程块block中的线程可以完成下述协作：</p>
<ul>
<li>同步</li>
<li>共享内存</li>
</ul>
<p><strong>不同块内线程不能相互影响！他们是物理隔离的！</strong></p>
<p>idx = blockIdx.x  * blockDim.x + threadIdx.x</p>
<p>写 kernel 的执行配置的时候，block的维度尽量是 32 的倍数，使得它在执行的时候能够更好地利用资源，避免资源的浪费。</p>
<h2 id="内存管理-1"><a href="#内存管理-1" class="headerlink" title="内存管理"></a>内存管理</h2><p>为达到最优性能，CUDA提供了在主机端准备设备内存的函数，并且显式地向设备传递数据，显式的从设备取回数据。</p>
<p><code>cudaMalloc((void **)&amp;d_a,nbytes);</code> 返回值是错误码</p>
<p>要注意向上取整,防止线程不够导致积分错误 </p>
<p>CUDA6.0 中设备代码不能调用<code>cudaMallocManaged</code>，只能主机调用，所有托管内存必须在主机代码上动态声明，或者全局静态声明</p>
<h2 id="进行扩大编程"><a href="#进行扩大编程" class="headerlink" title="进行扩大编程"></a>进行扩大编程</h2><p><img src="https://i.imgtg.com/2022/08/05/AiYKK.png"></p>
<h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>通过<code> cudaGetLastError(void)</code>获取错误码,通过<code>printf(&quot;%s&quot;,cudaGetErrorString(cudaGetLastError));</code>获取问题</p>
<h1 id="8月4日"><a href="#8月4日" class="headerlink" title="8月4日"></a>8月4日</h1><h2 id="大纲-19"><a href="#大纲-19" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>pytorch</li>
</ol>
<p><a href="https://handbook.pytorch.wiki/">PyTorch 中文手册（pytorch handbook） - Pytorch中文手册</a></p>
<p><a href="https://pytorch.zhangxiann.com/">(开篇词)PyTorch 学习笔记 - PyTorch 学习笔记 (zhangxiann.com)</a></p>
<h2 id="pytorch-1"><a href="#pytorch-1" class="headerlink" title="pytorch"></a>pytorch</h2><p>所有的 Tensor 类型默认都是基于CPU，<code>.to</code> 方法 可以将Tensor移动到任何设备中</p>
<p>如果有多个GPU，使用<code>nn.DataParallel</code>来包装我们的模型。 然后通过<code>model.to(device)</code>把模型放到GPU上。</p>
<p>Tensor和numpy对象共享内存，所以他们之间的转换很快，而且几乎不会消耗什么资源。但这也意味着，如果其中一个变了，另外一个也会随之改变。</p>
<h1 id="8月5日"><a href="#8月5日" class="headerlink" title="8月5日"></a>8月5日</h1><h2 id="大纲-20"><a href="#大纲-20" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>TensorFlow</li>
</ol>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIwODI2NDkxNQ==&mid=2247484633&idx=1&sn=adf2dfee2bf09e6dab0a67d329bd0c50&chksm=97048f65a073067365daa419808913b50872a18ef9bb16a5011f90967eb89c335fb204c027d2&scene=21#wechat_redirect">TensorFlow快速入门资料和翻译</a></p>
<p><a href="https://hands1ml.apachecn.org/">Sklearn 与 TensorFlow 机器学习实用指南第二版</a></p>
<h2 id="TensorFlow的数据类型"><a href="#TensorFlow的数据类型" class="headerlink" title="TensorFlow的数据类型"></a>TensorFlow的数据类型</h2><p>▪ scalar: 1.1  常数</p>
<p>▪ vector: [1.1], [1.1, 2.2, … ]  一维</p>
<p>▪ matrix: [[1.1, 2.2], [3.3, 4.4], [5.5, 6.6]]  二维</p>
<p><code>tf.device(&quot;cpu&quot;)</code>:调用设备</p>
<h2 id="Keras"><a href="#Keras" class="headerlink" title="Keras"></a>Keras</h2><p>模型的<code>summary()</code>方法可以展示所有层</p>
<p>可以用<code>get_weights()</code>和<code>set_weights()</code>方法，获取神经层的所有参数。</p>
<p>创建好模型之后，必须调用<code>compile()</code>方法，设置损失函数和优化器，编译模型</p>
<p>只需调用<code>fit()</code>方法，训练模型</p>
<p><code>fit()</code>方法会返回<code>History</code>对象，包含：训练参数（<code>history.params</code>）、周期列表（<code>history.epoch</code>）、以及最重要的包含训练集和验证集的每个周期后的损失和指标的字典（<code>history.history</code>）。如果用这个字典创建一个 pandas 的<code>DataFrame</code>，然后使用方法<code>plot()</code>，就可以画出学习曲线</p>
<p>Keras 使用 HDF5 格式保存模型架构（包括每层的超参数）和每层的所有参数值（连接权重和偏置项）。还保存了优化器（包括超参数和状态）。</p>
<h2 id="TensorBoard可视化"><a href="#TensorBoard可视化" class="headerlink" title="TensorBoard可视化"></a>TensorBoard可视化</h2><p>TensorBoard 是一个强大的交互可视化工具，使用它可以查看训练过程中的学习曲线、比较每次运行的学习曲线、可视化计算图、分析训练数据、查看模型生成的图片、可视化投射到 3D 的多维数据，等等。TensorBoard 是 TensorFlow 自带的。</p>
<p>要使用 TensorBoard，必须修改程序，将要可视化的数据输出为二进制的日志文件<code>event files</code>。每份二进制数据称为摘要<code>summary</code>，TensorBoard 服务器会监测日志文件目录，自动加载更新并可视化：这样就能看到实时数据（稍有延迟），比如训练时的学习曲线。通常，将 TensorBoard 服务器指向根日志目录，程序的日志写入到它的子目录，这样一个 TensorBoard 服务就能可视化并比较多次运行的数据，而不会将其搞混</p>
<h1 id="8月6日"><a href="#8月6日" class="headerlink" title="8月6日"></a>8月6日</h1><h2 id="大纲-21"><a href="#大纲-21" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>Intel oneAPI</li>
<li>oneAPI 工具包</li>
</ol>
<h2 id="Intel-oneAPI"><a href="#Intel-oneAPI" class="headerlink" title="Intel oneAPI"></a>Intel oneAPI</h2><p>Intel oneAPI 是一个跨行业、开放、基于标准的统一的<strong>编程模型</strong>，它为跨 CPU、GPU、FPGA、专用加速器的开发者提供统一的体验</p>
<p>具体来说，<strong>OneAPI的核心是一个名为Data Parallel C++（DPC++）的编程语言</strong>。DPC++本质上是C++的扩展，增加了对SYCL的支持。</p>
<p>oneAPI主要分为两部分：</p>
<ol>
<li><p>跨框架的编程语言。它基于行业标准和开放规范，支持广泛的行业生态系统采纳该技术来推动应用开发领域的新演进。 </p>
</li>
<li><p>跨框架库的集合。它相对应的支持直接编程和API编程，通过统一的语言和库，在包括CPU、GPU、FPGA等不同硬件上，提供完整的本地代码性能。</p>
</li>
</ol>
<h2 id="oneAPI-工具包"><a href="#oneAPI-工具包" class="headerlink" title="oneAPI 工具包"></a>oneAPI 工具包</h2><h3 id="Intel®-oneAPI-Base-Toolkit"><a href="#Intel®-oneAPI-Base-Toolkit" class="headerlink" title="Intel® oneAPI Base Toolkit"></a>Intel® oneAPI Base Toolkit</h3><p>这个工具包是 oneAPI 其他产品的基础，包含了几个我们在 Parallel Studio中常用的软件以及 icc 编译器、MPI、DPCPP 等。这个工具包使开发人员都可以跨CPU、GPU和FPGA构建、测试和部署以性能为中心、以数据为中心的应用程序。</p>
<h3 id="Intel®-oneAPI-HPC-Toolkit"><a href="#Intel®-oneAPI-HPC-Toolkit" class="headerlink" title="Intel® oneAPI HPC Toolkit"></a>Intel® oneAPI HPC Toolkit</h3><p>工具包提供可扩展的快速C++、Fortran、OpenMP和MPI应用程序。Intel® oneAPI Base Toolkit和Intel® oneAPI HPC Toolkit几乎包含Intel Parallel Studio XE的功能</p>
<h3 id="Intel®-AI-Analytics-Toolkit"><a href="#Intel®-AI-Analytics-Toolkit" class="headerlink" title="Intel® AI Analytics Toolkit"></a>Intel® AI Analytics Toolkit</h3><p>工具包为数据科学家、AI开发人员和研究人员提供了优化的深度学习框架（PyTorch、TensorFlow等）和高性能Python库，加速端到端机器学习和数据科学库。这些组件是使用oneAPI库构建的，用于低级计算优化。可最大化从预期处理到机器学习的性能。</p>
<h1 id="8月7日"><a href="#8月7日" class="headerlink" title="8月7日"></a>8月7日</h1><h2 id="大纲-22"><a href="#大纲-22" class="headerlink" title="大纲"></a>大纲</h2><p>总结前面所学的内容</p>
<h1 id="8月8日"><a href="#8月8日" class="headerlink" title="8月8日"></a>8月8日</h1><h2 id="大纲-23"><a href="#大纲-23" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>并行计算</li>
<li>集群的构建</li>
</ol>
<h2 id="并行算法"><a href="#并行算法" class="headerlink" title="并行算法"></a>并行算法</h2><p>一般我们就通过性能加速比这个值的大小或者高低来衡量我们这次性能优化的一个效果。</p>
<p>阿姆达尔定律:Speedup = $\frac{1}{S+V/R}$</p>
<p>S:不能并行化的部分<br>V:可以并行化的部分<br>R:并行化改进</p>
<p><img src="https://i.imgtg.com/2022/08/10/ASamb.png"></p>
<p>结论1：R在理论上决定了最大的性能加速。<br>结论2：S限制了可以实现的实际性能加速。</p>
<h2 id="并行计算机体系结构"><a href="#并行计算机体系结构" class="headerlink" title="并行计算机体系结构"></a>并行计算机体系结构</h2><h3 id="指令级并行"><a href="#指令级并行" class="headerlink" title="指令级并行"></a>指令级并行</h3><p>这个可以认为是计算机里面比较小的一类任务，因为它是通过同时执行多条指令来实现的。这个指令在计算机里面是一个非常小的任务了。</p>
<h3 id="数据并行"><a href="#数据并行" class="headerlink" title="数据并行"></a>数据并行</h3><p>有的指令可以同时处理多组数据产生多个结果。那这样的一种并行就叫做数据级并行，它是在指令级并行基础上发展起来的，可以认为是扩充了指令的功能，和指令实际上是在一个层面上的。</p>
<h3 id="线程级的并行"><a href="#线程级的并行" class="headerlink" title="线程级的并行"></a>线程级的并行</h3><p>一组指令构成了一个线程，这个线程可以认为是一个比较简单的任务。</p>
<h1 id="8月9日"><a href="#8月9日" class="headerlink" title="8月9日"></a>8月9日</h1><h2 id="大纲-24"><a href="#大纲-24" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>编译原理</li>
</ol>
<h2 id="gcc编译的过程"><a href="#gcc编译的过程" class="headerlink" title="gcc编译的过程"></a>gcc编译的过程</h2><p>预处理—编译—汇编—链接</p>
<h2 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h2><p>静态链接就是在 <strong>装载之前</strong>，就完成所有的符号引用的一种链接方式。</p>
<p>在生成可执行文件的时候（链接阶段），把所有需要的函数的二进制代码都包含到可执行文件中去。</p>
<p><strong>优点</strong>：</p>
<ol>
<li>在程序发布的时候就不需要依赖库，也就是不再需要带着库一块发布，程序可以独立执行。</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>浪费内存空间。在多进程的操作系统下，同一时间，内存中可能存在多个相同的公共库函数。</li>
<li>程序的开发与发布流程受模块制约。 只要有一个模块更新，那么就需要重新编译打包整个代码。</li>
</ol>
<h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><p>将对符号的重定位推迟到程序 <strong>运行时</strong> 才进行。</p>
<p>在编译的时候不直接拷贝可执行代码，而是通过 <strong>记录一系列符号和参数</strong>，在程序运行或加载时将这些信息传递给操作系统，操作系统负责将需要的动态库加载到内存中，然后程序在运行到指定的代码时，去共享执行内存中已经加载的动态库可执行代码，最终达到运行时连接的目的。</p>
<p><strong>优点</strong>： </p>
<ol>
<li>解决了静态链接的缺陷，更适应现代的大规模的软件开发。</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li><p>结构复杂。</p>
</li>
<li><p>由于是运行时加载，可能会影响程序的前期执行性能。</p>
</li>
</ol>
<h1 id="8月10日"><a href="#8月10日" class="headerlink" title="8月10日"></a>8月10日</h1><h2 id="大纲-25"><a href="#大纲-25" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>分布式训练</li>
</ol>
<h2 id="数据并行-1"><a href="#数据并行-1" class="headerlink" title="数据并行"></a>数据并行</h2><p>​    将样本数据进行切分，<strong>切分后的数据</strong> 被送至各个训练节点，与 <strong>完整的模型</strong> 进行运算，最后将多个节点的信息进行合并</p>
<p><img src="https://i.imgtg.com/2022/08/11/AcuCx.png" alt="img"></p>
<p>在一个训练的时间间隔内，各个GPU设备可以<strong>并行地用各自分片的数据进行模型训练</strong>，从而大大加速了整体模型的训练。</p>
<p><img src="https://i.imgtg.com/2022/08/11/AcC4p.jpg" alt="img"></p>
<ol>
<li>CPU将数据分配给GPU0和GPU1</li>
<li>不同GPU存储相同的模型，进行前向和反向传播</li>
<li>模型进行权重同步和更新</li>
</ol>
<h2 id="模型并行"><a href="#模型并行" class="headerlink" title="模型并行"></a>模型并行</h2><p>将模型进行切分，<strong>完整的数据</strong> 被送至各个训练节点，与 <strong>切分后的模型</strong> 进行运算，最后将多个节点的运算结果合并</p>
<p><img src="https://pic3.zhimg.com/80/v2-e36e84636f67594a873745948b89967a_720w.jpg" alt="img"></p>
<p>某些情况下，模型规模特别巨大，参数特别多以至于单个GPU的显存塞不下，于是只能通过<strong>模型并行</strong>的方式进行训练，即将模型的各网络层甚至是某一层的参数矩阵划分至多张GPU上进行训练。</p>
<h2 id="分布式训练和集合通信"><a href="#分布式训练和集合通信" class="headerlink" title="分布式训练和集合通信"></a>分布式训练和集合通信</h2><ol>
<li><p><strong>集合通信库：</strong>用于分布式训练时，多个计算设备之间的集合通信，</p>
</li>
<li><p>数据加载与预处理库：分布式训练需要处理海量数据，这使得单机单卡时代不需要考虑的数据加载问题，在分布式时代很容易成为瓶颈，为此，通常需要对分布式训练中的数据即预处理做相关优化。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JNU</category>
        <category>超算</category>
      </categories>
      <tags>
        <tag>JNU</tag>
        <tag>超算</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.5.2</title>
    <url>/posts/407ed11.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3d61dd543052f69117975a8dc97e0ba2fa634f529f2e09a6293e91e87cf3094a">aeb9160ffca703822d13d87209c3dbca7dac60355b92c9f423741406153fdf347017939ba1ccdcc123d66a12ff4695ec05fdfbe143ca0ca658bfae54f698a3a59bd267035ed1a3dcac15f97863881634205e563146f0ddbdb8bdd70ed8bfffdebb43ff3119f5fdeb6f9426892631dc76723f355f1130412e96bcc7c8d5a1612f1ff7d96d6b5684aff33df0a7e788775e8335a73340825e451b3e482e4626b3fdfa105190d6adf3beb42c94e81c2d3051ab1118d986adae6d817c046ab7183d099f51628fcbc0868d876b4ce562e741f5804e30424d42653acb03e76e22e39c1f3437eafc5302d41a4d74df2641c5170f4b9bdcae3626d937fd2f185f1bd2002683cb8ea8be5d3e4983dd203795e5ebf8abdfdf396e487f5332e3d7ee0e8acff44d8c539cba5fb82641f684c385deb355f67ea671fa134a528acb630f60aa25071e68c3041ba40a855aad61cfef0a9eb2a07b84c35b46255af3d1d8b064625eaa08da52f2227a2de7338603728b1d7d136a898dd42a7a198f37b0763c5faaf9165420d31c9195c8408f568dd21c029773027329e2b3b1a8d7b42f628ecc8649a72dc5c37fff56a6a7ae4cd160dd9da52ad955ccaa546354d24494694a4328f41927bdc2163f8370fd7191f033f1ad560c52acc622754a283036d803e485d3472da9dae752e42e8479a49bbdab22961471a4aa8e21548d8d56d1850b195b3c8cc3460537e20dc19221899048b68a5610a40ad8dc73ef6ee7c9507691b003788b8e8ceed6002c9ed1138a593391ca8850cf6ca7788ba45a175a7b4413a9b919198eb4cbbc47d233ce488f7ff2952cea749bacc50ea28c79af9e1da81384054737ef62683f9558d64e23a22a942f0caecb1038f7fcdfb8d9de198005a764ef6a5772b5ae2b9702e7bb784dd0caae33ba80483134e43e2f5ec346aaeb677ec6c2fd403063ce72691717ad86086a7ca45b0de561785c2dc81bec532f8617bd7020300e5e644324dd84df88632e5c2921d0007d8036d54ff07a7468e4614554340e6707f73a55008ede9c59ac59a70e7e8fdd0da7461389ccdb27138c8e7164cb758b2ac99832bfc8f49f9b8327b092138d22661adcb3fa7978993d6e684027d4f493bdf908d80bcbd5b0d2918728765887b092cb3f2ba64a19b91caa466fccb1c2cddf4cf636d4bbc18398f7f975651f23f84474f3b736c0fccf58a74e40fcd5b05281e0cd17fc1c67a361de2249c77e4f793652649cbe8ada9b52caee0f1d96a85d8cfec7eb92fc7f09730c3fcb6b1798498e63969b59734f84937f10497ef165137f6971ce18d1126996a01af4a4674cb16e89adb545cf0d007a63c3bafc62ff932834a8d95000e647a17bd7f286b41806eea75c9880127c5ce4fd59454654ae385aecdf0d95ef490a38dfe47c2898088780fed758d26358552eb4abbac18c42ede32d53708dec96aec7f397922e0537ea1510ce6053dbc2c1d22a1c5930ad17038c778a663bc3b7b6e3d388c023cc1e5ac62bffe5d81e3773e02900a666e6ed7339ba031973ede7dff374206c4e570ba72badaa45af8ae12565fffd852f199213cd33280743d8370a5c8872d572ad7cf60a00a36b39ea1680b367430fd286fd9da7ed71f8e259903e3b7c9680005f507565521111d474b8a148d79bcc1c5e051101929ad49ce97644568d6e05a13570eb09659dcb457454b160fadb9fd634bd4dd2625b6b01d616594fa9dca9f38de9a4f773ac79d812b7c0ef23bec44b118ec2c1c2076687175492a7d8ad22568de359b48b066252be1445ac2b6cd2e24817fa7fbf767c0d7a0b51617a79b6a5fed5641b3381745390da58491aad0939b0bcc99c31f72c679b7124248f7faf92028bfe710311b61005711a2929a4de8f1cb234cd459d74ee5ff7576b17ad5c3ba0441bf575a822f4b7ab65f50b660604d5cb34313d67ffff9c7c18850ae30bf4a94307a85c05e648eeb71e6a85095a085a4663b52a662a6bec67f3b779acaafbb5ac253b33e4643e7bc282ec6e045ab303cf2ec664be991f4c83683c17920bb2386267130059b732d395c62aaa53910f45929962812d3841533709ee1c1c0dce026dd7f60bff80f03f9d4c0ae332f240484f149cdfb5cfff6a797363fc2494fe72926d96c564dfe2cfc5e650a3480767b6d900f6378390a849f34f86e2e0fc702ec602864792067b85cf5fd8f1bf969d7eae9347abac4254f2bd5e3f9da59a896d837a2b6c2e9a0ed4eb1fb26ddabe81b4c9ade5b9384a900ecda06db80a295fb902c04e761ba770d683830bac17700921a5855619af8641b2bf1e5cd47c7dab073db66609909441fac39155a1ac747af40a991dfd958bda26682347967b64086a586facc1b80f0ef8459970b4bde1eb441a9140251c615a3d16b489fed205fd2aed5056e2fd45a7ffa48e700368f7e4223e77282b7104f971cdd77ce61196f5b5752a9eb788a8b80918c45e34fefb18e315e493e47dff522682a39c129b40aaf7dee22c8539289ed9521c3ed7ebe3902eb7d9cb85cffb1f98cbc6d96f9b691bb3147502b6272a9b5e90c9fc1b0913a88b26cef2e0962b1654de6e3a5bbb8c0a5a2d4594b2dfc3b67491445c3fea61de08dce768e9b27071788ed85566d2609f28ef159413b020c82059620850a43bab5aec2474e7a574f4006068cb36af8acf1c2cd5cbcdc8739b6b821da042011e43c586e5bc4c632b5219df661246f95e4abe522d35b6dfa6625c75748bf74a706c7b4f71d1d928d322d0584e7d68e6a77d145e006540a6ff9cb8750fdc653cf61030c8c4fd639dfebab0e4fa56f8f6d78de85d723d621ddb41065757c1ac415dfc43027348dc593eec0ea5e0f616405808e23c2255f92ff664ad7f620e08fa8d3cd68eb95df1b8f29ec5ac98e798c6d3fc5e0572950a89038cdb24ea03b7785dc4c49d996d21e6ab41d0fe5569c3d85ddea56d39084de70a615f207cc3f968711a2b43d12d884bb0ef351deb7c0249bf6d2d4c9e8a7400cec7140b952ab03b8b310e3ccdeb77f789ed981f0cd3d4149a0c8417befb59034d90e771bd0618f8404391b22f37ae52065106f357691e6cf2f7bb9a6296363cf4e7cae8665031a296f1c0808d2d7b24ef0a77cfff41ce5b131d644203fcd5487a547d7bf0339547bf292a7f9b0ec11523f05f3af9622ce5907dd784d845522349c2b06e739f31db48fd71fec5bc02f7997ebb7aae5e973caa49f1a96be316a0b679545cd7ed69932b1c7446fd0efabead01781bafc640accc7948b2aa79061b9ffdaebee8fa446026da121ddd2c71ac22655d6b01304f5a903f9904914285a8f7d4768c02456732ad866ec99484c1ed81128357c619b76356d29b685186cdf65558d0a8dc9a46a0fa6d85a0458416b8f6a9cdd4337958022106483f93b1a9b48b165df7a5f72baff8f8cbf8128dbffffa65eae5e13efdde76d35c1dc2eaa8b6674669d0213cf42dd8fc18d3c53c5799989a8ea1dd5b44d8e695b27124fab6bc9654b1b62173add50a0a81348d5ef88e8399f332e27a6db4e4d778f423f305300a524896a7773fc3c69f2c096a9fb705a751466a828983950adb4606a3cac656c45dfd105523f0f54c7475d0f446f235a212639291f948f7b0cfe695a10865a9927f4091406081c4195d098af031460f51b9b7a7fbc57935e5e4c8a815c35b2cbd7f738669892b1a0738cd018a79aa11c7cb9b08e20bc68b579734145310f83724a771da5cf840f59e70568e7dfb839a47ef66357f63c7dbcf608777c58652c3fd0b815fb49a34eb1e7b3a461a29ddc8b38eccb20d63a4760e30eeac4a8ba638a0d69e8715218d111bae09f3c855751810f02968ef5c8fc98b8f80ff07df9859bd27b198f380ff509c7b21b157c98182993db173a16c3c8617ec4907eeed4b5e5e6a3107dbb4fe09db7d994cdaa5d89f54b37924800da26d8f3fefb6d6d959ae81d2e0bb08104d0274c005c9460d267fe6ab309ed7a6ef9732919c597b6e13cf6bf3e7e47979e9f19de07f014f3069bda5f9607ec9ce5c76e9734030ddc1bd84374934d60c756f3820cf4780e30ba71b5e0ae945df1f6c26a0c1f2f5ff11b4edda408fc7991ad9fccb348fd6b1cab0af57dff9229353a151d5a2629163bfc2c43fc0ea0877cdf6391b162a1bf4c783f6c599bc366f14e047b5d66d19a1abce98c29855fc140117520f4a0e4a712a5764ec631b9a7bb9b9d9887041dd36d3240f771479df736f6dcbfac5a05e16269e1b5cdaf7826adb445875e2d1fbf5c93cbb3d61293b01111225d3475d1ff18b855da2bb9bf7c54cbed70a6a03d1b4e2bf75a2c58944d3d63409b9db11f110a64b71bebaf6fbb8c2bf250b983608905fb2063fcdc1691edf9c6c81da5fbbdac79c9be09abe496078c455e70548dc8adc4021465048b79b938f63f03b5d468675552d69135742ba921546332c3a67b3b370dad241b51c6f30d3b764c72a08b607</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
</search>
